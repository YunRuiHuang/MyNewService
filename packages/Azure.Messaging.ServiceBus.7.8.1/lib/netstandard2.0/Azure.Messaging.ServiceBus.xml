<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Azure.Messaging.ServiceBus</name>
    </assembly>
    <members>
        <member name="T:Azure.Messaging.ServiceBus.Administration.AccessRights">
            <summary>
            The access rights that may be conferred by an authorization rule.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AccessRights.Manage">
            <summary>
            The access right is Manage.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AccessRights.Send">
            <summary>
            The access right is Send.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AccessRights.Listen">
            <summary>
            The access right is Listen.
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes">
            <summary>Specifies the error codes of the exceptions.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.BadRequest">
            <summary>A parse error encountered while processing a request.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.UnauthorizedGeneric">
            <summary>A generic unauthorized error.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.NoTransportSecurity">
            <summary>The service bus has no transport security.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.MissingToken">
            <summary>The token is missing.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.InvalidSignature">
            <summary>The signature is invalid.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.InvalidAudience">
            <summary>The audience is invalid.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.MalformedToken">
            <summary>A malformed token.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.ExpiredToken">
            <summary>The token had expired.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.AudienceNotFound">
            <summary>The audience is not found.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.ExpiresOnNotFound">
            <summary>The expiry date not found.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.IssuerNotFound">
            <summary>The issuer cannot be found.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.SignatureNotFound">
            <summary>The signature cannot be found.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.IpRejected">
            <summary>The incoming ip has been rejected by policy.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.IpNotInAcledSubNet">
            <summary>The incoming ip is not in acled subnet.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.ForbiddenGeneric">
            <summary>A generic forbidden error.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.ForbiddenInvalidOperation">
            <summary>Operation is not allowed.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.EndpointNotFound">
            <summary>The endpoint is not found.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.InvalidDestination">
            <summary>The destination is invalid.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.NamespaceNotFound">
            <summary>The namespace is not found.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.StoreLockLost">
            <summary>The store lock is lost.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.SqlFiltersExceeded">
            <summary>The SQL filters exceeded its allowable maximum number.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.CorrelationFiltersExceeded">
            <summary>The correlation filters exceeded its allowable maximum number.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.SubscriptionsExceeded">
            <summary>The subscriptions exceeded its allowable maximum number.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.UpdateConflict">
            <summary>A conflict during updating occurred.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.EventHubAtFullCapacity">
            <summary>The Service Bus entity is at full capacity.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.ConflictGeneric">
            <summary>A generic conflict error.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.ConflictOperationInProgress">
            <summary>An operation is in progress.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.EntityGone">
            <summary>The entity is not found.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.UnspecifiedInternalError">
            <summary>An internal error that is not specified.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.DataCommunicationError">
            <summary>The error of data communication.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.InternalFailure">
            <summary>An internal error.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.ProviderUnreachable">
            <summary>The provider is unreachable.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.ServerBusy">
            <summary>The server is busy.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.ArchiveStorageAccountServerBusy">
            <summary> Archive Storage Account Server is busy. </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.InvalidArchiveStorageAccountResourceId">
            <summary> Archive Storage Account ResourceId is invalid. </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.BadGatewayFailure">
            <summary>The error is caused by bad gateway.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.GatewayTimeoutFailure">
            <summary>The gateway did not receive a timely response from the upstream server.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.AdministrationClientConstants.ExceptionErrorCodes.UnknownExceptionDetail">
            <summary>This exception detail will be used for those exceptions that are thrown without specific any explicit exception detail.</summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.AuthorizationRule">
            <summary>
            Specifies the authorization rule.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.AuthorizationRule.ClaimType">
            <summary>Gets or sets the claim type.</summary>
            <value>The claim type.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.AuthorizationRule.ClaimValue">
            <summary>Gets or sets the claim value which is either ‘Send’, ‘Listen’, or ‘Manage’.</summary>
            <value>The claim value which is either ‘Send’, ‘Listen’, or ‘Manage’.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.AuthorizationRule.Rights">
            <summary>Gets or sets the list of rights.</summary>
            <value>The list of rights.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.AuthorizationRule.KeyName">
            <summary>Gets or sets the authorization rule key name.</summary>
            <value>The authorization rule key name.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.AuthorizationRule.CreatedTime">
            <summary>Gets or sets the date and time when the authorization rule was created.</summary>
            <value>The date and time when the authorization rule was created.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.AuthorizationRule.ModifiedTime">
            <summary>Gets or sets the date and time when the authorization rule was modified.</summary>
            <value>The date and time when the authorization rule was modified.</value>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.AuthorizationRule.Equals(Azure.Messaging.ServiceBus.Administration.AuthorizationRule)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.AuthorizationRule.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary><param name="obj">The object to compare with the current object.</param><returns><see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.AuthorizationRule.GetHashCode">
            <summary>Serves as the default hash function.</summary><returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.AuthorizationRules">
            <summary>
            Specifies the authorization rules.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.AuthorizationRules.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.AuthorizationRules.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.AuthorizationRules.Equals(Azure.Messaging.ServiceBus.Administration.AuthorizationRules)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.AuthorizationRules.op_Equality(Azure.Messaging.ServiceBus.Administration.AuthorizationRules,Azure.Messaging.ServiceBus.Administration.AuthorizationRules)">
            <summary></summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.AuthorizationRules.op_Inequality(Azure.Messaging.ServiceBus.Administration.AuthorizationRules,Azure.Messaging.ServiceBus.Administration.AuthorizationRules)">
            <summary></summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions">
            <summary>
            Represents the set of options that can be specified for the creation of a queue.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions" /> with the specified relative name.
            </summary>
            <param name="name">Name of the queue relative to the namespace base address.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.#ctor(Azure.Messaging.ServiceBus.Administration.QueueProperties)">
            <summary>
            Initializes a new instance of <see cref="T:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions" /> based on the
            specified <see cref="T:Azure.Messaging.ServiceBus.Administration.QueueProperties" /> instance. This is useful for creating a new queue based
            on the properties of an existing queue.
            </summary>
            <param name="queue">Existing queue to create options from.</param>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.Name">
            <summary>
            Name of the queue relative to the namespace base address.
            </summary>
            <remarks>Max length is 260 chars. Cannot start or end with a slash.
            Cannot have restricted characters: '@','?','#','*'</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.LockDuration">
            <summary>
            Duration of a peek lock receive. i.e., the amount of time that the message is locked by a given receiver so that
            no other receiver receives the same message.
            </summary>
            <remarks>Max value is 5 minutes. Default value is 60 seconds.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.MaxSizeInMegabytes">
            <summary>
            The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.
            </summary>
            <remarks>Default value is 1024.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.RequiresDuplicateDetection">
            <summary>
            This value indicates if the queue requires guard against duplicate messages. If true, duplicate messages having same
            <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.MessageId" /> and sent to queue within duration of <see cref="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.DuplicateDetectionHistoryTimeWindow" />
            will be discarded.
            </summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.RequiresSession">
            <summary>
            This indicates whether the queue supports the concept of session. Sessionful-messages follow FIFO ordering.
            </summary>
            <remarks>
            If true, the receiver can only receive messages using <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" />.
            Defaults to false.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.DefaultMessageTimeToLive">
            <summary>
            The default time to live value for the messages. This is the duration after which the message expires, starting from when
            the message is sent to Service Bus. </summary>
            <remarks>
            This is the default value used when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.TimeToLive" /> is not set on a
             message itself. Messages older than their TimeToLive value will expire and no longer be retained in the message store.
             Subscribers will be unable to receive expired messages.
             Default value is <see cref="F:System.TimeSpan.MaxValue" />.
             </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.AutoDeleteOnIdle">
            <summary>
            The <see cref="T:System.TimeSpan" /> idle interval after which the queue is automatically deleted.
            </summary>
            <remarks>The minimum duration is 5 minutes. Default value is <see cref="F:System.TimeSpan.MaxValue" />.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.DeadLetteringOnMessageExpiration">
            <summary>
            Indicates whether this queue has dead letter support when a message expires.
            </summary>
            <remarks>If true, the expired messages are moved to dead-letter subqueue. Default value is false.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.DuplicateDetectionHistoryTimeWindow">
            <summary>
            The <see cref="T:System.TimeSpan" /> duration of duplicate detection history that is maintained by the service.
            </summary>
            <remarks>
            The default value is 1 minute. Max value is 7 days and minimum is 20 seconds.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.MaxDeliveryCount">
            <summary>
            The maximum delivery count of a message before it is dead-lettered.
            </summary>
            <remarks>The delivery count is increased when a message is received in <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" /> mode
            and didn't complete the message before the message lock expired.
            Default value is 10. Minimum value is 1.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.EnableBatchedOperations">
            <summary>
            Indicates whether server-side batched operations are enabled.
            </summary>
            <remarks>Defaults to true.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.AuthorizationRules">
            <summary>
            The <see cref="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.AuthorizationRules" /> on the queue to control user access at entity level.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.Status">
            <summary>
            The current status of the queue (Enabled / Disabled).
            </summary>
            <remarks>When an entity is disabled, that entity cannot send or receive messages.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.ForwardTo">
            <summary>
            The name of the recipient entity to which all the messages sent to the queue are forwarded to.
            </summary>
            <remarks>If set, user cannot manually receive messages from this queue. The destination entity
            must be an already existing entity.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.ForwardDeadLetteredMessagesTo">
            <summary>
            The name of the recipient entity to which all the dead-lettered messages of this queue are forwarded to.
            </summary>
            <remarks>If set, user cannot manually receive dead-lettered messages from this queue. The destination
            entity must already exist.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.EnablePartitioning">
            <summary>
            Indicates whether the queue is to be partitioned across multiple message brokers.
            </summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.UserMetadata">
            <summary>
            Custom metadata that user can associate with the queue.
            </summary>
            <remarks>Cannot be null. Max length is 1024 chars.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.MaxMessageSizeInKilobytes">
            <summary>
            Gets or sets the maximum message size, in kilobytes, for messages sent to this queue.
            This feature is only available when using a Premium namespace and service version "2021-05" or higher.
            <seealso href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-premium-messaging" />
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.Equals(Azure.Messaging.ServiceBus.Administration.CreateQueueOptions)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.op_Equality(Azure.Messaging.ServiceBus.Administration.CreateQueueOptions,Azure.Messaging.ServiceBus.Administration.CreateQueueOptions)">
            <summary></summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions.op_Inequality(Azure.Messaging.ServiceBus.Administration.CreateQueueOptions,Azure.Messaging.ServiceBus.Administration.CreateQueueOptions)">
            <summary></summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions">
            <summary>
            Represents the metadata description of the subscription.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of SubscriptionDescription class with the specified name and topic name.
            </summary>
            <param name="topicName">Name of the topic relative to the namespace base address.</param>
            <param name="subscriptionName">Name of the subscription.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.#ctor(Azure.Messaging.ServiceBus.Administration.SubscriptionProperties)">
            <summary>
            Initializes a new instance of <see cref="T:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions" /> based on the
            specified <see cref="T:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties" /> instance. This is useful for creating a new subscription based
            on the properties of an existing subscription.
            </summary>
            <param name="subscription">Existing subscription to create options from.</param>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.LockDuration">
            <summary>
            Duration of a peek lock receive. i.e., the amount of time that the message is locked by a given receiver so that
            no other receiver receives the same message.
            </summary>
            <remarks>Max value is 5 minutes. Default value is 60 seconds.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.RequiresSession">
            <summary>
            This indicates whether the subscription supports the concept of session. Sessionful-messages follow FIFO ordering.
            </summary>
            <remarks>
            If true, the receiver can only receive messages using <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" />.
            Defaults to false.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.DefaultMessageTimeToLive">
            <summary>
            The default time to live value for the messages. This is the duration after which the message expires, starting from when
            the message is sent to Service Bus. </summary>
            <remarks>
            This is the default value used when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.TimeToLive" /> is not set on a
             message itself. Messages older than their TimeToLive value will expire and no longer be retained in the message store.
             Subscribers will be unable to receive expired messages.
             Default value is <see cref="F:System.TimeSpan.MaxValue" />.
             </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.AutoDeleteOnIdle">
            <summary>
            The <see cref="T:System.TimeSpan" /> idle interval after which the subscription is automatically deleted.
            </summary>
            <remarks>The minimum duration is 5 minutes. Default value is <see cref="F:System.TimeSpan.MaxValue" />.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.DeadLetteringOnMessageExpiration">
            <summary>
            Indicates whether this subscription has dead letter support when a message expires.
            </summary>
            <remarks>If true, the expired messages are moved to dead-letter subqueue. Default value is false.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.EnableDeadLetteringOnFilterEvaluationExceptions">
            <summary>
            indicates whether messages need to be forwarded to dead-letter sub queue when subscription rule evaluation fails.
            </summary>
            <remarks>Defaults to true.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.TopicName">
            <summary>
            Name of the topic under which subscription exists.
            </summary>
            <remarks>Value cannot be null or empty. Value cannot exceed 260 chars. Cannot start or end with a slash.
            Cannot have restricted characters: '@','?','#','*'</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.SubscriptionName">
            <summary>
            Name of the subscription.
            </summary>
            <remarks>Value cannot be null or empty. Value cannot exceed 50 chars.
            Cannot have restricted characters: '@','?','#','*','/','\'</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.MaxDeliveryCount">
            <summary>
            The maximum delivery count of a message before it is dead-lettered.
            </summary>
            <remarks>The delivery count is increased when a message is received in <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" /> mode
            and didn't complete the message before the message lock expired.
            Default value is 10. Minimum value is 1.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.Status">
            <summary>
            The current status of the subscription (Enabled / Disabled).
            </summary>
            <remarks>When an entity is disabled, that entity cannot send or receive messages.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.ForwardTo">
            <summary>
            The name of the recipient entity to which all the messages sent to the subscription are forwarded to.
            </summary>
            <remarks>If set, user cannot manually receive messages from this subscription. The destination entity
            must be an already existing entity.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.ForwardDeadLetteredMessagesTo">
            <summary>
            The name of the recipient entity to which all the dead-lettered messages of this subscription are forwarded to.
            </summary>
            <remarks>If set, user cannot manually receive dead-lettered messages from this subscription. The destination
            entity must already exist.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.EnableBatchedOperations">
            <summary>
            Indicates whether server-side batched operations are enabled.
            </summary>
            <remarks>Defaults to true.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.UserMetadata">
            <summary>
            Custom metadata that user can associate with the subscription.
            </summary>
            <remarks>Cannot be null. Max length is 1024 chars.</remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.Equals(Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.op_Equality(Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions,Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions)">
             <summary>
            
             </summary>
             <param name="left"></param>
             <param name="right"></param>
             <returns></returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions.op_Inequality(Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions,Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions)">
             <summary>
            
             </summary>
             <param name="left"></param>
             <param name="right"></param>
             <returns></returns>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions">
            <summary>
            Represents the options that can be specified for the creation of a topic.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions" /> with the specified relative name.
            </summary>
            <param name="name">Name of the topic relative to the namespace base address.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.#ctor(Azure.Messaging.ServiceBus.Administration.TopicProperties)">
            <summary>
            Initializes a new instance of <see cref="T:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions" /> based on the
            specified <see cref="T:Azure.Messaging.ServiceBus.Administration.TopicProperties" /> instance. This is useful for creating a new topic based
            on the properties of an existing topic.
            </summary>
            <param name="topic">Existing topic to create options from.</param>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.DefaultMessageTimeToLive">
            <summary>
            The default time to live value for the messages. This is the duration after which the message expires,
            starting from when the message is sent to Service Bus. </summary>
            <remarks>
            This is the default value used when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.TimeToLive" /> is not set on a
            message itself. Messages older than their TimeToLive value will expire and no longer be retained
            in the message store.
            Subscribers will be unable to receive expired messages.
            Default value is <see cref="F:System.TimeSpan.MaxValue" />.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.AutoDeleteOnIdle">
            <summary>
            The <see cref="T:System.TimeSpan" /> idle interval after which the topic is automatically deleted.
            </summary>
            <remarks>The minimum duration is 5 minutes. Default value is <see cref="F:System.TimeSpan.MaxValue" />.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.MaxSizeInMegabytes">
            <summary>
            The maximum size of the topic in megabytes, which is the size of memory allocated for the topic.
            </summary>
            <remarks>Default value is 1024.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.RequiresDuplicateDetection">
            <summary>
            This value indicates if the topic requires guard against duplicate messages. If true, duplicate messages having same
            <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.MessageId" /> and sent to topic within duration of <see cref="P:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.DuplicateDetectionHistoryTimeWindow" />
            will be discarded.
            </summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.DuplicateDetectionHistoryTimeWindow">
            <summary>
            The <see cref="T:System.TimeSpan" /> duration of duplicate detection history that is maintained by the service.
            </summary>
            <remarks>
            The default value is 1 minute. Max value is 7 days and minimum is 20 seconds.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.Name">
            <summary>
            Name of the topic relative to the namespace base address.
            </summary>
            <remarks>Max length is 260 chars. Cannot start or end with a slash.
            Cannot have restricted characters: '@','?','#','*'</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.AuthorizationRules">
            <summary>
            The <see cref="P:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.AuthorizationRules" /> on the topic to control user access at entity level.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.Status">
            <summary>
            The current status of the topic (Enabled / Disabled).
            </summary>
            <remarks>When an entity is disabled, that entity cannot send or receive messages.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.EnablePartitioning">
            <summary>
            Indicates whether the topic is to be partitioned across multiple message brokers.
            </summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.SupportOrdering">
            <summary>
            Defines whether ordering needs to be maintained. If true, messages sent to topic will be
            forwarded to the subscription in order. For partitioned topics, defaults to false, and
            setting it to true has no effect.
            </summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.EnableBatchedOperations">
            <summary>
            Indicates whether server-side batched operations are enabled.
            </summary>
            <remarks>Defaults to true.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.UserMetadata">
            <summary>
            Custom metadata that user can associate with the topic.
            </summary>
            <remarks>Cannot be null. Max length is 1024 chars.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.MaxMessageSizeInKilobytes">
            <summary>
            Gets or sets the maximum message size, in kilobytes, for messages sent to this topic.
            This feature is only available when using a Premium namespace and service version "2021-05" or higher.
            <seealso href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-premium-messaging" />
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.Equals(Azure.Messaging.ServiceBus.Administration.CreateTopicOptions)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.op_Equality(Azure.Messaging.ServiceBus.Administration.CreateTopicOptions,Azure.Messaging.ServiceBus.Administration.CreateTopicOptions)">
            <summary></summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateTopicOptions.op_Inequality(Azure.Messaging.ServiceBus.Administration.CreateTopicOptions,Azure.Messaging.ServiceBus.Administration.CreateTopicOptions)">
            <summary></summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.EntityStatus">
            <summary>
            The status of the messaging entity.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.EntityStatus.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Administration.EntityStatus" /> structure.
            </summary>
            <param name="value">The string value of the instance.</param>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.EntityStatus.Active">
            <summary>
            The status of the messaging entity is active.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.EntityStatus.Disabled">
            <summary>
            The status of the messaging entity is disabled.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.EntityStatus.SendDisabled">
            <summary>
            The sending status of the messaging entity is disabled.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.EntityStatus.ReceiveDisabled">
            <summary>
            The receiving status of the messaging entity is disabled.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.EntityStatus.op_Equality(Azure.Messaging.ServiceBus.Administration.EntityStatus,Azure.Messaging.ServiceBus.Administration.EntityStatus)">
            <summary>
            Determines if two <see cref="T:Azure.Messaging.ServiceBus.Administration.EntityStatus" /> values are the same.
            </summary>
            <param name="left">The first <see cref="T:Azure.Messaging.ServiceBus.Administration.EntityStatus" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Messaging.ServiceBus.Administration.EntityStatus" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are the same; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.EntityStatus.op_Inequality(Azure.Messaging.ServiceBus.Administration.EntityStatus,Azure.Messaging.ServiceBus.Administration.EntityStatus)">
            <summary>
            Determines if two <see cref="T:Azure.Messaging.ServiceBus.Administration.EntityStatus" /> values are different.
            </summary>
            <param name="left">The first <see cref="T:Azure.Messaging.ServiceBus.Administration.EntityStatus" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Messaging.ServiceBus.Administration.EntityStatus" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are different; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.EntityStatus.op_Implicit(System.String)~Azure.Messaging.ServiceBus.Administration.EntityStatus">
            <summary>
            Converts a string to a <see cref="T:Azure.Messaging.ServiceBus.Administration.EntityStatus" />.
            </summary>
            <param name="value">The string value to convert.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.EntityStatus.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.EntityStatus.Equals(Azure.Messaging.ServiceBus.Administration.EntityStatus)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.EntityStatus.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.EntityStatus.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.HttpRequestAndResponse.#ctor(Azure.Core.Pipeline.HttpPipeline,Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.TokenCredential,System.String,Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions.ServiceVersion)">
            <summary>
            Initializes a new <see cref="T:Azure.Messaging.ServiceBus.Administration.HttpRequestAndResponse" /> which can be used to send http request and response.
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.MessagingSku">
            <summary>
            Specifies the SKU/tier of the messaging namespace.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.MessagingSku.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Administration.MessagingSku" /> structure.
            </summary>
            <param name="value">The string value of the instance.</param>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.MessagingSku.Basic">
            <summary>
             Basic namespace. Shared Resource. Only queues are available.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.MessagingSku.Standard">
            <summary>
            Standard namespace. Shared Resource. Queues and topics.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.MessagingSku.Premium">
            <summary>
            Premium namespace. Dedicated Resource. Queues and topics.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.MessagingSku.op_Equality(Azure.Messaging.ServiceBus.Administration.MessagingSku,Azure.Messaging.ServiceBus.Administration.MessagingSku)">
            <summary>
            Determines if two <see cref="T:Azure.Messaging.ServiceBus.Administration.MessagingSku" /> values are the same.
            </summary>
            <param name="left">The first <see cref="T:Azure.Messaging.ServiceBus.Administration.MessagingSku" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Messaging.ServiceBus.Administration.MessagingSku" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are the same; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.MessagingSku.op_Inequality(Azure.Messaging.ServiceBus.Administration.MessagingSku,Azure.Messaging.ServiceBus.Administration.MessagingSku)">
            <summary>
            Determines if two <see cref="T:Azure.Messaging.ServiceBus.Administration.MessagingSku" /> values are different.
            </summary>
            <param name="left">The first <see cref="T:Azure.Messaging.ServiceBus.Administration.MessagingSku" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Messaging.ServiceBus.Administration.MessagingSku" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are different; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.MessagingSku.op_Implicit(System.String)~Azure.Messaging.ServiceBus.Administration.MessagingSku">
            <summary>
            Converts a string to a <see cref="T:Azure.Messaging.ServiceBus.Administration.MessagingSku" />.
            </summary>
            <param name="value">The string value to convert.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.MessagingSku.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.MessagingSku.Equals(Azure.Messaging.ServiceBus.Administration.MessagingSku)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.MessagingSku.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.MessagingSku.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.NamespaceProperties">
            <summary>
            Represents the properties related to a Service Bus namespace.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.NamespaceProperties.Name">
            <summary>
            Name of the namespace.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.NamespaceProperties.NamespaceType">
            <summary>
            Type of entities present in the namespace.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.NamespaceProperties.CreatedTime">
            <summary>
            The time at which the namespace was created.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.NamespaceProperties.ModifiedTime">
            <summary>
            The last time at which the namespace was modified.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.NamespaceProperties.MessagingSku">
            <summary>
            The SKU/tier of the namespace. Valid only for <see cref="P:Azure.Messaging.ServiceBus.Administration.NamespaceType.Messaging" />
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.NamespaceProperties.MessagingUnits">
            <summary>
            The number of messaging units allocated for namespace.
            Valid only for <see cref="P:Azure.Messaging.ServiceBus.Administration.NamespaceType.Messaging" /> and <see cref="P:Azure.Messaging.ServiceBus.Administration.MessagingSku.Premium" />
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.NamespaceProperties.Alias">
            <summary>
            The alias for the namespace.
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.NamespaceType">
            <summary>
            Specifies the type of entities the namespace can contain.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.NamespaceType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Administration.NamespaceType" /> structure.
            </summary>
            <param name="value">The string value of the instance.</param>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.NamespaceType.Messaging">
            <summary>
            Namespace contains service bus entities (queues, topics).
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.NamespaceType.Mixed">
            <summary>
            Supported only for backward compatibility.
            Namespace can contain mixture of messaging entities and notification hubs.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.NamespaceType.op_Equality(Azure.Messaging.ServiceBus.Administration.NamespaceType,Azure.Messaging.ServiceBus.Administration.NamespaceType)">
            <summary>
            Determines if two <see cref="T:Azure.Messaging.ServiceBus.Administration.NamespaceType" /> values are the same.
            </summary>
            <param name="left">The first <see cref="T:Azure.Messaging.ServiceBus.Administration.NamespaceType" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Messaging.ServiceBus.Administration.NamespaceType" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are the same; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.NamespaceType.op_Inequality(Azure.Messaging.ServiceBus.Administration.NamespaceType,Azure.Messaging.ServiceBus.Administration.NamespaceType)">
            <summary>
            Determines if two <see cref="T:Azure.Messaging.ServiceBus.Administration.NamespaceType" /> values are different.
            </summary>
            <param name="left">The first <see cref="T:Azure.Messaging.ServiceBus.Administration.NamespaceType" /> to compare.</param>
            <param name="right">The second <see cref="T:Azure.Messaging.ServiceBus.Administration.NamespaceType" /> to compare.</param>
            <returns>True if <paramref name="left" /> and <paramref name="right" /> are different; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.NamespaceType.op_Implicit(System.String)~Azure.Messaging.ServiceBus.Administration.NamespaceType">
            <summary>
            Converts a string to a <see cref="T:Azure.Messaging.ServiceBus.Administration.NamespaceType" />.
            </summary>
            <param name="value">The string value to convert.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.NamespaceType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.NamespaceType.Equals(Azure.Messaging.ServiceBus.Administration.NamespaceType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.NamespaceType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.NamespaceType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.QueueProperties">
            <summary>
            Represents the static properties of the queue.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.QueueProperties.#ctor(System.String)">
            <summary>
            Initializes a new instance of QueueProperties class with the specified relative name.
            </summary>
            <param name="name">Name of the queue relative to the namespace base address.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.QueueProperties.#ctor(Azure.Messaging.ServiceBus.Administration.CreateQueueOptions)">
            <summary>
            Initializes a new instance of QueueProperties from the provided options.
            </summary>
            <param name="options">Options used to create the properties instance.</param>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.Name">
            <summary>
            Name of the queue relative to the namespace base address.
            </summary>
            <remarks>Max length is 260 chars. Cannot start or end with a slash.
            Cannot have restricted characters: '@','?','#','*'</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.LockDuration">
            <summary>
            Duration of a peek lock receive. i.e., the amount of time that the message is locked by a given receiver so that
            no other receiver receives the same message.
            </summary>
            <remarks>Max value is 5 minutes. Default value is 60 seconds.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.MaxSizeInMegabytes">
            <summary>
            The maximum size of the queue in megabytes, which is the size of memory allocated for the queue.
            </summary>
            <remarks>Default value is 1024.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.RequiresDuplicateDetection">
            <summary>
            This value indicates if the queue requires guard against duplicate messages. If true, duplicate messages having the same
            <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.MessageId" /> and sent to the queue within duration of <see cref="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.DuplicateDetectionHistoryTimeWindow" />
            will be discarded.
            </summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.RequiresSession">
            <summary>
            This indicates whether the queue supports the concept of session. Sessionful-messages follow FIFO ordering.
            </summary>
            <remarks>
            If true, the receiver can only receive messages using <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" />.
            Defaults to false.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.DefaultMessageTimeToLive">
            <summary>
            The default time to live value for the messages. This is the duration after which the message expires, starting from when
            the message is sent to Service Bus. </summary>
            <remarks>
            This is the default value used when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.TimeToLive" /> is not set on a
             message itself. Messages older than their TimeToLive value will expire and no longer be retained in the message store.
             Subscribers will be unable to receive expired messages.
             Default value is <see cref="F:System.TimeSpan.MaxValue" />.
             </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.AutoDeleteOnIdle">
            <summary>
            The <see cref="T:System.TimeSpan" /> idle interval after which the queue is automatically deleted.
            </summary>
            <remarks>The minimum duration is 5 minutes. Default value is <see cref="F:System.TimeSpan.MaxValue" />.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.DeadLetteringOnMessageExpiration">
            <summary>
            Indicates whether this queue has dead letter support when a message expires.
            </summary>
            <remarks>If true, the expired messages are moved to dead-letter subqueue. Default value is false.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.DuplicateDetectionHistoryTimeWindow">
            <summary>
            The <see cref="T:System.TimeSpan" /> duration of duplicate detection history that is maintained by the service.
            </summary>
            <remarks>
            The default value is 1 minute. Max value is 7 days and minimum is 20 seconds.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.MaxDeliveryCount">
            <summary>
            The maximum delivery count of a message before it is dead-lettered.
            </summary>
            <remarks>The delivery count is increased when a message is received in <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" /> mode
            and didn't complete the message before the message lock expired.
            Default value is 10. Minimum value is 1.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.EnableBatchedOperations">
            <summary>
            Indicates whether server-side batched operations are enabled.
            </summary>
            <remarks>Defaults to true.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.AuthorizationRules">
            <summary>
            The <see cref="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.AuthorizationRules" /> on the queue to control user access at entity level.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.Status">
            <summary>
            The current status of the queue (Enabled / Disabled).
            </summary>
            <remarks>When an entity is disabled, that entity cannot send or receive messages.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.ForwardTo">
            <summary>
            The name of the recipient entity to which all the messages sent to the queue are forwarded to.
            </summary>
            <remarks>If set, user cannot manually receive messages from this queue. The destination entity
            must be an already existing entity.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.ForwardDeadLetteredMessagesTo">
            <summary>
            The name of the recipient entity to which all the dead-lettered messages of this queue are forwarded to.
            </summary>
            <remarks>If set, user cannot manually receive dead-lettered messages from this queue. The destination
            entity must already exist.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.EnablePartitioning">
            <summary>
            Indicates whether the queue is to be partitioned across multiple message brokers.
            </summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.UserMetadata">
            <summary>
            Custom metadata that user can associate with the description.
            </summary>
            <remarks>Cannot be null. Max length is 1024 chars.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.MaxMessageSizeInKilobytes">
            <summary>
            Gets or sets the maximum message size, in kilobytes, for messages sent to this queue.
            This feature is only available when using a Premium namespace and service version "2021-05" or higher.
            <seealso href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-premium-messaging" />
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueProperties.UnknownProperties">
            <summary>
            List of properties that were retrieved using GetQueue but are not understood by this version of client is stored here.
            The list will be sent back when an already retrieved QueueDescription will be used in UpdateQueue call.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.QueueProperties.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.QueueProperties.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.QueueProperties.Equals(Azure.Messaging.ServiceBus.Administration.QueueProperties)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.QueueProperties.op_Equality(Azure.Messaging.ServiceBus.Administration.QueueProperties,Azure.Messaging.ServiceBus.Administration.QueueProperties)">
            <summary></summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.QueueProperties.op_Inequality(Azure.Messaging.ServiceBus.Administration.QueueProperties,Azure.Messaging.ServiceBus.Administration.QueueProperties)">
            <summary></summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.QueueRuntimeProperties">
            <summary>
            Represents the runtime properties of the queue.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueRuntimeProperties.Name">
            <summary>
            The name of the queue.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueRuntimeProperties.TotalMessageCount">
            <summary>
            The total number of messages in the queue.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueRuntimeProperties.ActiveMessageCount">
            <summary>
            The number of active messages in the entity.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueRuntimeProperties.DeadLetterMessageCount">
            <summary>
            The number of dead-lettered messages in the entity.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueRuntimeProperties.ScheduledMessageCount">
            <summary>
            The number of messages that are scheduled to be enqueued.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueRuntimeProperties.TransferMessageCount">
            <summary>
            The number of messages which are yet to be transferred/forwarded to destination entity.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueRuntimeProperties.TransferDeadLetterMessageCount">
            <summary>
            The number of messages transfer-messages which are dead-lettered into transfer-dead-letter subqueue.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueRuntimeProperties.SizeInBytes">
            <summary>
            The current size of the entity in bytes.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueRuntimeProperties.CreatedAt">
            <summary>
            The <see cref="T:System.DateTimeOffset" /> when the entity was created.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueRuntimeProperties.UpdatedAt">
            <summary>
            The <see cref="T:System.DateTimeOffset" /> when the entity description was last updated.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.QueueRuntimeProperties.AccessedAt">
            <summary>
            The <see cref="T:System.DateTimeOffset" /> when the entity was last accessed.
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter">
            <summary>
            Represents the correlation rule filter expression.
            </summary>
            <remarks>
            <para>
            A CorrelationRuleFilter holds a set of conditions that are matched against one of more of an arriving message's user and system properties.
            A common use is a match against the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.CorrelationId" /> property, but the application can also choose to match against
            <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.ContentType" />, <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.Subject" />, <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.MessageId" />, <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.ReplyTo" />,
            <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.ReplyToSessionId" />, <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.SessionId" />, <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.To" />, and any user-defined properties.
            A match exists when an arriving message's value for a property is equal to the value specified in the correlation filter. For string expressions,
            the comparison is case-sensitive. When specifying multiple match properties, the filter combines them as a logical AND condition,
            meaning all conditions must match for the filter to match.
            </para>
            <para>
            The CorrelationRuleFilter provides an efficient shortcut for declarations of filters that deal only with correlation equality.
            In this case the cost of the lexicographical analysis of the expression can be avoided.
            Not only will correlation filters be optimized at declaration time, but they will also be optimized at runtime.
            Correlation filter matching can be reduced to a hashtable lookup, which aggregates the complexity of the set of defined correlation filters to O(1).
            </para>
            </remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter" /> class with default values.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter" /> class with the specified correlation identifier.
            </summary>
            <param name="correlationId">The identifier for the correlation.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="correlationId" /> is null or empty.</exception>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter.CorrelationId">
            <summary>
            Identifier of the correlation.
            </summary>
            <value>The identifier of the correlation.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter.MessageId">
            <summary>
            Identifier of the message.
            </summary>
            <value>The identifier of the message.</value>
            <remarks>Max MessageId size is 128 chars.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter.To">
            <summary>
            Address to send to.
            </summary>
            <value>The address to send to.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter.ReplyTo">
            <summary>
            Address of the queue to reply to.
            </summary>
            <value>The address of the queue to reply to.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter.Subject">
            <summary>
            Application specific subject.
            </summary>
            <value>The application specific subject.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter.SessionId">
            <summary>
            Session identifier.
            </summary>
            <value>The session identifier.</value>
            <remarks>Max size of sessionId is 128 chars.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter.ReplyToSessionId">
            <summary>
            Session identifier to reply to.
            </summary>
            <value>The session identifier to reply to.</value>
            <remarks>Max size of ReplyToSessionId is 128.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter.ContentType">
            <summary>
            Content type of the message.
            </summary>
            <value>The content type of the message.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter.ApplicationProperties">
            <summary>
            Application specific properties of the message.
            </summary>
            <value>The application specific properties of the message.</value>
            <remarks>
            Only following value types are supported:
            byte, sbyte, char, short, ushort, int, uint, long, ulong, float, double, decimal,
            bool, Guid, string, Uri, DateTime, DateTimeOffset, TimeSpan, Stream, byte[],
            and IList / IDictionary of supported types
            </remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter.ToString">
            <summary>
            Converts the value of the current instance to its equivalent string representation.
            </summary>
            <returns>A string representation of the current instance.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter.GetHashCode">
            <summary>Serves as the default hash function.</summary><returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary><param name="obj">The object to compare with the current object.</param><returns><see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter.Equals(Azure.Messaging.ServiceBus.Administration.RuleFilter)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter.op_Equality(Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter,Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter)">
            <summary>Compares two <see cref="T:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter" /> values for equality.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter.op_Inequality(Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter,Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter)">
            <summary>Compares two <see cref="T:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter" /> values for inequality.</summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions">
            <summary>
            Represents the set of options that can be specified for the creation of a rule.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions.DefaultRuleName">
            <summary>
            Gets the name of the default rule on the subscription.
            </summary>
            <remarks>
            Whenever a new subscription is created, a default rule is always added.
            The default rule is a <see cref="T:Azure.Messaging.ServiceBus.Administration.TrueRuleFilter" /> which will enable all messages in the topic to reach subscription.
            </remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions" /> class with default values.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions" /> class with the specified name.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions.#ctor(System.String,Azure.Messaging.ServiceBus.Administration.RuleFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions" /> class with the specified name and filter expression.
            </summary>
            <param name="name"></param>
            <param name="filter">The filter expression used to match messages.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions.#ctor(Azure.Messaging.ServiceBus.Administration.RuleProperties)">
            <summary>
            Initializes a new instance of <see cref="T:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions" /> based on the
            specified <see cref="T:Azure.Messaging.ServiceBus.Administration.RuleProperties" /> instance. This is useful for creating a new rule based
            on the properties of an existing rule.
            </summary>
            <param name="rule">Existing rule to create options from.</param>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions.Filter">
            <summary>
            Gets or sets the filter expression used to match messages.
            </summary>
            <value>The filter expression used to match messages.</value>
            <exception cref="T:System.ArgumentNullException">null (Nothing in Visual Basic) is assigned.</exception>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions.Action">
            <summary>
            Gets or sets the action to perform if the message satisfies the filtering expression.
            </summary>
            <value>The action to perform if the message satisfies the filtering expression.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions.Name">
            <summary>
            Gets or sets the name of the rule.
            </summary>
            <value>Returns a <see cref="T:System.String" /> Representing the name of the rule.</value>
            <remarks>Max allowed length of rule name is 50 chars.</remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions.GetHashCode">
            <summary>Serves as the default hash function.</summary><returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary><param name="obj">The object to compare with the current object.</param><returns><see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions.Equals(Azure.Messaging.ServiceBus.Administration.CreateRuleOptions)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions.op_Equality(Azure.Messaging.ServiceBus.Administration.CreateRuleOptions,Azure.Messaging.ServiceBus.Administration.CreateRuleOptions)">
            <summary>Compares two <see cref="T:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions" /> values for equality.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions.op_Inequality(Azure.Messaging.ServiceBus.Administration.CreateRuleOptions,Azure.Messaging.ServiceBus.Administration.CreateRuleOptions)">
            <summary>Compares two <see cref="T:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions" /> values for inequality.</summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.FalseRuleFilter">
            <summary>
            Matches none the messages arriving to be selected for the subscription.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.FalseRuleFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Administration.FalseRuleFilter" /> class.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.FalseRuleFilter.ToString">
            <summary>
            Converts the current instance to its string representation.
            </summary>
            <returns>A string representation of the current instance.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.FalseRuleFilter.GetHashCode">
            <summary>Serves as the default hash function.</summary><returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.FalseRuleFilter.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary><param name="obj">The object to compare with the current object.</param><returns><see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.FalseRuleFilter.Equals(Azure.Messaging.ServiceBus.Administration.RuleFilter)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.FalseRuleFilter.op_Equality(Azure.Messaging.ServiceBus.Administration.FalseRuleFilter,Azure.Messaging.ServiceBus.Administration.FalseRuleFilter)">
            <summary>Compares two <see cref="T:Azure.Messaging.ServiceBus.Administration.FalseRuleFilter" /> values for equality.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.FalseRuleFilter.op_Inequality(Azure.Messaging.ServiceBus.Administration.FalseRuleFilter,Azure.Messaging.ServiceBus.Administration.FalseRuleFilter)">
            <summary>Compares two <see cref="T:Azure.Messaging.ServiceBus.Administration.FalseRuleFilter" /> values for inequality.</summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.RuleAction">
            <summary>
            Represents the filter actions which are allowed for the transformation
            of a message that have been matched by a filter expression.
            </summary>
            <remarks>
            Filter actions allow for the transformation of a message that have been matched by a filter expression.
            The typical use case for filter actions is to append or update the properties that are attached to a message,
            for example assigning a group ID based on the correlation ID of a message.
            </remarks>
            <seealso cref="T:Azure.Messaging.ServiceBus.Administration.SqlRuleAction" />
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.RuleAction.Equals(Azure.Messaging.ServiceBus.Administration.RuleAction)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.RuleAction.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary><param name="obj">The object to compare with the current object.</param><returns><see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.RuleAction.GetHashCode">
            <summary>Serves as the default hash function.</summary><returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.RuleFilter">
            <summary>
            Describes a filter expression that is evaluated against a Message.
            </summary>
            <remarks>
            Filter is an abstract class with the following concrete implementations:
            <list type="bullet">
            <item><description><b>SqlRuleFilter</b> that represents a filter using SQL syntax.</description></item>
            <item><description><b>CorrelationRuleFilter</b> that provides an optimization for correlation equality expressions.</description></item>
            </list>
            </remarks>
            <seealso cref="T:Azure.Messaging.ServiceBus.Administration.SqlRuleFilter" />
            <seealso cref="T:Azure.Messaging.ServiceBus.Administration.TrueRuleFilter" />
            <seealso cref="T:Azure.Messaging.ServiceBus.Administration.CorrelationRuleFilter" />
            <seealso cref="T:Azure.Messaging.ServiceBus.Administration.FalseRuleFilter" />
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.RuleFilter.Equals(Azure.Messaging.ServiceBus.Administration.RuleFilter)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.RuleFilter.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary><param name="obj">The object to compare with the current object.</param><returns><see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.RuleFilter.GetHashCode">
            <summary>Serves as the default hash function.</summary><returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.RuleProperties">
            <summary>
            Represents the properties of a rule.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.RuleProperties.DefaultRuleName">
            <summary>
            Gets the name of the default rule on the subscription.
            </summary>
            <remarks>
            Whenever a new subscription is created, a default rule is always added.
            The default rule is a <see cref="T:Azure.Messaging.ServiceBus.Administration.TrueRuleFilter" /> which will enable all messages in the topic to reach subscription.
            </remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.RuleProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Administration.RuleProperties" /> class with default values.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.RuleProperties.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Administration.RuleProperties" /> class with the specified name.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.RuleProperties.#ctor(System.String,Azure.Messaging.ServiceBus.Administration.RuleFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Administration.RuleProperties" /> class with the specified name and filter expression.
            </summary>
            <param name="name"></param>
            <param name="filter">The filter expression used to match messages.</param>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.RuleProperties.Filter">
            <summary>
            Gets or sets the filter expression used to match messages.
            </summary>
            <value>The filter expression used to match messages.</value>
            <exception cref="T:System.ArgumentNullException">null (Nothing in Visual Basic) is assigned.</exception>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.RuleProperties.Action">
            <summary>
            Gets or sets the action to perform if the message satisfies the filtering expression.
            </summary>
            <value>The action to perform if the message satisfies the filtering expression.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.RuleProperties.Name">
            <summary>
            Gets or sets the name of the rule.
            </summary>
            <value>Returns a <see cref="T:System.String" /> Representing the name of the rule.</value>
            <remarks>Max allowed length of rule name is 50 chars.</remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.RuleProperties.GetHashCode">
            <summary>Serves as the default hash function.</summary><returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.RuleProperties.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary><param name="obj">The object to compare with the current object.</param><returns><see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.RuleProperties.Equals(Azure.Messaging.ServiceBus.Administration.RuleProperties)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.RuleProperties.op_Equality(Azure.Messaging.ServiceBus.Administration.RuleProperties,Azure.Messaging.ServiceBus.Administration.RuleProperties)">
            <summary>Compares two <see cref="T:Azure.Messaging.ServiceBus.Administration.RuleProperties" /> values for equality.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.RuleProperties.op_Inequality(Azure.Messaging.ServiceBus.Administration.RuleProperties,Azure.Messaging.ServiceBus.Administration.RuleProperties)">
            <summary>Compares two <see cref="T:Azure.Messaging.ServiceBus.Administration.RuleProperties" /> values for inequality.</summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.SqlRuleAction">
            <summary>
            Represents set of actions written in SQL language-based syntax that is performed against a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessage" />.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SqlRuleAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Administration.SqlRuleAction" /> class with the specified SQL expression.
            </summary>
            <param name="sqlExpression">The SQL expression.</param>
            <remarks>Max allowed length of sql expression is 1024 chars.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SqlRuleAction.SqlExpression">
            <summary>
            Gets the SQL expression.
            </summary>
            <value>The SQL expression.</value>
            <remarks>Max allowed length of sql expression is 1024 chars.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SqlRuleAction.Parameters">
            <summary>
            Gets the value of a rule action.
            </summary>
            <value>The value of a rule action.</value>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SqlRuleAction.ToString">
            <summary>
            Returns a string representation of <see cref="T:Azure.Messaging.ServiceBus.Administration.SqlRuleAction" />.
            </summary>
            <returns>The string representation of <see cref="T:Azure.Messaging.ServiceBus.Administration.SqlRuleAction" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SqlRuleAction.GetHashCode">
            <summary>Serves as the default hash function.</summary><returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SqlRuleAction.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary><param name="obj">The object to compare with the current object.</param><returns><see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SqlRuleAction.Equals(Azure.Messaging.ServiceBus.Administration.RuleAction)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SqlRuleAction.op_Equality(Azure.Messaging.ServiceBus.Administration.SqlRuleAction,Azure.Messaging.ServiceBus.Administration.SqlRuleAction)">
            <summary>Compares two <see cref="T:Azure.Messaging.ServiceBus.Administration.SqlRuleAction" /> values for equality.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SqlRuleAction.op_Inequality(Azure.Messaging.ServiceBus.Administration.SqlRuleAction,Azure.Messaging.ServiceBus.Administration.SqlRuleAction)">
            <summary>Compares two <see cref="T:Azure.Messaging.ServiceBus.Administration.SqlRuleAction" /> values for inequality.</summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.SqlRuleFilter">
            <summary>
            Represents a filter which is a composition of an expression and an action that is executed in the pub/sub pipeline.
            </summary>
            <remarks>
            A <see cref="T:Azure.Messaging.ServiceBus.Administration.SqlRuleFilter" /> holds a SQL-like condition expression that is evaluated in the broker against the arriving messages'
            user-defined properties and system properties. All system properties (which are all properties explicitly listed
            on the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessage" /> class) must be prefixed with <code>sys.</code> in the condition expression. The SQL subset implements
            testing for existence of properties (EXISTS), testing for null-values (IS NULL), logical NOT/AND/OR, relational operators,
            numeric arithmetic, and simple text pattern matching with LIKE.
            </remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SqlRuleFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Administration.SqlRuleFilter" /> class using the specified SQL expression.
            </summary>
            <remarks>Max allowed length of sql expression is 1024 chars.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SqlRuleFilter.SqlExpression">
            <summary>
            Gets the SQL expression.
            </summary>
            <value>The SQL expression.</value>
            <remarks>Max allowed length of sql expression is 1024 chars.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SqlRuleFilter.Parameters">
            <summary>
            Sets the value of a filter expression.
            Allowed types: string, int, long, bool, double
            </summary>
            <value>The value of a filter expression.</value>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SqlRuleFilter.ToString">
            <summary>
            Returns a string representation of <see cref="T:Azure.Messaging.ServiceBus.Administration.SqlRuleFilter" />.
            </summary>
            <returns>The string representation of <see cref="T:Azure.Messaging.ServiceBus.Administration.SqlRuleFilter" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SqlRuleFilter.GetHashCode">
            <summary>Serves as the default hash function.</summary><returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SqlRuleFilter.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary><param name="obj">The object to compare with the current object.</param><returns><see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SqlRuleFilter.Equals(Azure.Messaging.ServiceBus.Administration.RuleFilter)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SqlRuleFilter.op_Equality(Azure.Messaging.ServiceBus.Administration.SqlRuleFilter,Azure.Messaging.ServiceBus.Administration.SqlRuleFilter)">
            <summary>Compares two <see cref="T:Azure.Messaging.ServiceBus.Administration.SqlRuleFilter" /> values for equality.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SqlRuleFilter.op_Inequality(Azure.Messaging.ServiceBus.Administration.SqlRuleFilter,Azure.Messaging.ServiceBus.Administration.SqlRuleFilter)">
            <summary>Compares two <see cref="T:Azure.Messaging.ServiceBus.Administration.SqlRuleFilter" /> values for inequality.</summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.TrueRuleFilter">
            <summary>
            Matches all the messages arriving to be selected for the subscription.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.TrueRuleFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Administration.TrueRuleFilter" /> class.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.TrueRuleFilter.ToString">
            <summary>
            Converts the value of the current instance to its equivalent string representation.
            </summary>
            <returns>A string representation of the current instance.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.TrueRuleFilter.GetHashCode">
            <summary>Serves as the default hash function.</summary><returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.TrueRuleFilter.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary><param name="obj">The object to compare with the current object.</param><returns><see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.TrueRuleFilter.Equals(Azure.Messaging.ServiceBus.Administration.RuleFilter)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.TrueRuleFilter.op_Equality(Azure.Messaging.ServiceBus.Administration.TrueRuleFilter,Azure.Messaging.ServiceBus.Administration.TrueRuleFilter)">
            <summary>Compares two <see cref="T:Azure.Messaging.ServiceBus.Administration.TrueRuleFilter" /> values for equality.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.TrueRuleFilter.op_Inequality(Azure.Messaging.ServiceBus.Administration.TrueRuleFilter,Azure.Messaging.ServiceBus.Administration.TrueRuleFilter)">
            <summary>Compares two <see cref="T:Azure.Messaging.ServiceBus.Administration.TrueRuleFilter" /> values for inequality.</summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient">
            <summary>
            The <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> is the client through which all Service Bus
            entities can be created, updated, fetched and deleted.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.#ctor">
            <summary>
            Parameterless constructor to allow mocking.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.#ctor(System.String)">
             <summary>
             Initializes a new <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> which can be used to perform administration operations on ServiceBus entities.
             </summary>
            
             <param name="connectionString">Namespace connection string.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.#ctor(System.String,Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions)">
             <summary>
             Initializes a new <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> which can be used to perform administration operations on ServiceBus entities.
             </summary>
            
             <param name="connectionString">Namespace connection string.</param>
             <param name="options">A set of options to apply when configuring the connection.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.#ctor(System.String,Azure.AzureNamedKeyCredential,Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions)">
             <summary>
             Initializes a new <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> which can be used to perform administration operations on ServiceBus entities.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Service Bus namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="credential">The <see cref="T:Azure.AzureNamedKeyCredential" /> to use for authorization.  Access controls may be specified by the Service Bus namespace or the requested Service Bus entity, depending on Azure configuration.</param>
             <param name="options">A set of options to apply when configuring the connection.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.#ctor(System.String,Azure.AzureSasCredential,Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions)">
             <summary>
             Initializes a new <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> which can be used to perform administration operations on ServiceBus entities.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Service Bus namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="credential">The <see cref="T:Azure.AzureNamedKeyCredential" /> to use for authorization.  Access controls may be specified by the Service Bus namespace or the requested Service Bus entity, depending on Azure configuration.</param>
             <param name="options">A set of options to apply when configuring the connection.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.#ctor(System.String,Azure.Core.TokenCredential)">
             <summary>
             Initializes a new <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> which can be used to perform administration operations on ServiceBus entities.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Service Bus namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="credential">The Azure managed identity credential to use for authorization.  Access controls may be specified by the Service Bus namespace or the requested Service Bus entity, depending on Azure configuration.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.#ctor(System.String,Azure.Core.TokenCredential,Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions)">
             <summary>
             Initializes a new <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> which can be used to perform administration operations on ServiceBus entities.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Service Bus namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="credential">The Azure managed identity credential to use for authorization.  Access controls may be specified by the Service Bus namespace or the requested Service Bus entity, depending on Azure configuration.</param>
             <param name="options">A set of options to apply when configuring the connection.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.GetNamespacePropertiesAsync(System.Threading.CancellationToken)">
             <summary>
             Gets information related to the currently used namespace.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>Works with any claim (Send/Listen/Manage).</remarks>
             <returns><see cref="T:Azure.Messaging.ServiceBus.Administration.NamespaceProperties" /> containing namespace information.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.DeleteQueueAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Deletes the queue described by the name relative to the service namespace base address.
             </summary>
            
             <param name="name">The name of the queue relative to the service namespace base address.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <exception cref="T:System.ArgumentException"><paramref name="name" /> is empty or null, or name starts or ends with "/".</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The length of name is greater than 260.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityNotFound">Queue with this name does not exist.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.DeleteTopicAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Deletes the topic described by the name relative to the service namespace base address.
             </summary>
            
             <param name="name">The name of the topic relative to the service namespace base address.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <exception cref="T:System.ArgumentException"><paramref name="name" /> is empty or null, or name starts or ends with "/".</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The length of topic name is greater than 260.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityNotFound">Topic with this name does not exist.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.DeleteSubscriptionAsync(System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             Deletes the subscription with the specified topic and subscription name.
             </summary>
            
             <param name="topicName">The name of the topic relative to the service namespace base address.</param>
             <param name="subscriptionName">The name of the subscription to delete.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <exception cref="T:System.ArgumentException"><paramref name="topicName" /> or <paramref name="subscriptionName" /> is empty or null, or path starts or ends with "/".</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The length of topic name is greater than 260 or length of subscription name is greater than 50.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityNotFound">Subscription with this name does not exist.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.DeleteRuleAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             Deletes the rule described by <paramref name="ruleName" /> from <paramref name="subscriptionName" /> under <paramref name="topicName" />./&gt;
             </summary>
            
             <param name="topicName">The name of the topic relative to the service namespace base address.</param>
             <param name="subscriptionName">The name of the subscription to delete.</param>
             <param name="ruleName">The name of the rule to delete.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <exception cref="T:System.ArgumentException">Thrown if <paramref name="topicName" />, <paramref name="subscriptionName" />, or <paramref name="ruleName" /> is null, white space empty or not in the right format.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The length of topic name is greater than 260 or length of subscription-name/rule-name is greater than 50.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityNotFound">Rule with this name does not exist.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.GetQueueAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Retrieves a queue from the service namespace.
             </summary>
            
             <param name="name">The name of the queue relative to service bus namespace.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns><see cref="T:Azure.Messaging.ServiceBus.Administration.QueueProperties" /> containing information about the queue.</returns>
             <exception cref="T:System.ArgumentException">Thrown if <paramref name="name" /> is null, white space empty or not in the right format.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The length of queue name is greater than 260.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityNotFound">Queue with this name does not exist.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.GetTopicAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Retrieves a topic from the service namespace.
             </summary>
            
             <param name="name">The name of the topic relative to service bus namespace.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns><see cref="T:Azure.Messaging.ServiceBus.Administration.TopicProperties" /> containing information about the topic.</returns>
             <exception cref="T:System.ArgumentException">Thrown if <paramref name="name" /> is null, white space empty or not in the right format.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The length of topic name is greater than 260.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityNotFound">Topic with this name does not exist.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.GetSubscriptionAsync(System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             Retrieves a subscription from the service namespace.
             </summary>
            
             <param name="topicName">The name of the topic relative to service bus namespace.</param>
             <param name="subscriptionName">The subscription name.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns><see cref="T:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties" /> containing information about the subscription.</returns>
             <exception cref="T:System.ArgumentException">Thrown if <paramref name="topicName" />, <paramref name="subscriptionName" /> is null, white space empty or not in the right format.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The length of topic name is greater than 260 or length of subscription-name is greater than 50.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityNotFound">Topic or Subscription with this name does not exist.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.GetRuleAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             Retrieves a rule from the service namespace.
             </summary>
            
             <param name="topicName">The name of the topic relative to service bus namespace.</param>
             <param name="subscriptionName">The subscription name the rule belongs to.</param>
             <param name="ruleName">The name of the rule to retrieve.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>Note - Only following data types are deserialized in Filters and Action parameters - string,int,long,bool,double,DateTime.
             Other data types would return its string value.</remarks>
             <returns><see cref="T:Azure.Messaging.ServiceBus.Administration.RuleProperties" /> containing information about the rule.</returns>
             <exception cref="T:System.ArgumentException">Thrown if <paramref name="topicName" />, <paramref name="subscriptionName" /> or <paramref name="ruleName" /> is null, white space empty or not in the right format.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The length of topic name is greater than 260 or length of subscription-name/rule-name is greater than 50.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityNotFound">Topic/Subscription/Rule with this name does not exist.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.GetQueueRuntimePropertiesAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Retrieves the runtime properties of a queue.
             </summary>
            
             <param name="name">The name of the queue relative to service bus namespace.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns><see cref="T:Azure.Messaging.ServiceBus.Administration.QueueRuntimeProperties" /> containing runtime properties about the queue.</returns>
             <exception cref="T:System.ArgumentException">Thrown if <paramref name="name" /> is null, white space empty or not in the right format.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The length of queue name is greater than 260.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityNotFound">Queue with this name does not exist.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.GetTopicRuntimePropertiesAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Retrieves the runtime properties of a topic.
             </summary>
             <param name="name">The name of the topic relative to service bus namespace.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns><see cref="T:Azure.Messaging.ServiceBus.Administration.TopicRuntimeProperties" /> containing runtime properties about the topic.</returns>
             <exception cref="T:System.ArgumentException">Thrown if <paramref name="name" /> is null, white space empty or not in the right format.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The length of topic name is greater than 260.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityNotFound">Topic with this name does not exist.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.GetSubscriptionRuntimePropertiesAsync(System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             Retrieves the runtime properties of a subscription.
             </summary>
            
             <param name="topicName">The name of the topic relative to service bus namespace.</param>
             <param name="subscriptionName">The subscription name.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns><see cref="T:Azure.Messaging.ServiceBus.Administration.SubscriptionRuntimeProperties" /> containing runtime properties about the subscription.</returns>
             <exception cref="T:System.ArgumentException">Thrown if <paramref name="topicName" />, <paramref name="subscriptionName" /> is null, white space empty or not in the right format.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The length of topic name is greater than 260 or length of subscription-name is greater than 50.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityNotFound">Topic or Subscription with this name does not exist.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.GetQueuesAsync(System.Threading.CancellationToken)">
             <summary>
             Retrieves the list of queues present in the namespace.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:Azure.AsyncPageable`1" /> describing the queues.</returns>
             <remarks>Maximum value allowed is 100 per page.</remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">If the parameters are out of range.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.GetTopicsAsync(System.Threading.CancellationToken)">
             <summary>
             Retrieves the list of topics present in the namespace.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:Azure.AsyncPageable`1" /> describing the topics.</returns>
             <remarks>Maximum value allowed is 100 per page.</remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">If the parameters are out of range.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.GetSubscriptionsAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Retrieves the list of subscriptions present in the topic.
             </summary>
            
             <param name="topicName">The topic name under which all the subscriptions need to be retrieved.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:Azure.AsyncPageable`1" /> describing the subscriptions.</returns>
             <remarks>Maximum value allowed is 100 per page.</remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">If the parameters are out of range.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.GetRulesAsync(System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             Retrieves the list of rules for a given subscription in a topic.
             </summary>
            
             <param name="topicName">The topic name.</param>
             <param name="subscriptionName"> The subscription for which all the rules need to be retrieved.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:Azure.AsyncPageable`1" /> describing the rules.</returns>
             <remarks>Maximum value allowed is 100 per page.</remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">If the parameters are out of range.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.GetQueuesRuntimePropertiesAsync(System.Threading.CancellationToken)">
             <summary>
             Retrieves the list of runtime properties for queues present in the namespace.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:Azure.AsyncPageable`1" /> describing the queues runtime properties.</returns>
             <remarks>Maximum value allowed is 100 per page.</remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">If the parameters are out of range.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.GetTopicsRuntimePropertiesAsync(System.Threading.CancellationToken)">
             <summary>
             Retrieves the list of runtime properties for topics present in the namespace.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:Azure.AsyncPageable`1" /> describing the topics runtime properties.</returns>
             <remarks>Maximum value allowed is 100 per page.</remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">If the parameters are out of range.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.GetSubscriptionsRuntimePropertiesAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Retrieves the list of runtime properties for subscriptions present in the namespace.
             </summary>
            
             <param name="topicName">The name of the topic relative to service bus namespace.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
              <returns>An <see cref="T:Azure.AsyncPageable`1" /> describing the subscriptions runtime properties.</returns>
             <remarks>Maximum value allowed is 100 per page.</remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">If the parameters are out of range.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or an unexpected exception occured.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.CreateQueueAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Creates a new queue in the service namespace with the given name.
             </summary>
            
             <param name="name">The name of the queue relative to the service namespace base address.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>Throws if a queue already exists. <see cref="T:Azure.Messaging.ServiceBus.Administration.QueueProperties" /> for default values of queue properties.</remarks>
             <returns>The <see cref="T:Azure.Messaging.ServiceBus.Administration.QueueProperties" /> of the newly created queue.</returns>
             <exception cref="T:System.ArgumentNullException">Queue name is null or empty.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="name" /> is greater than 260 characters.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityAlreadyExists">An entity with the same name exists under the same service namespace.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.QuotaExceeded">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.CreateQueueAsync(Azure.Messaging.ServiceBus.Administration.CreateQueueOptions,System.Threading.CancellationToken)">
             <summary>
             Creates a new queue in the service namespace with the given name.
             </summary>
             <param name="options">A <see cref="T:Azure.Messaging.ServiceBus.Administration.CreateQueueOptions" /> object describing the attributes with which the new queue will be created.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>Throws if a queue already exists.</remarks>
             <returns>The <see cref="T:Azure.Messaging.ServiceBus.Administration.QueueProperties" /> of the newly created queue.</returns>
             <exception cref="T:System.ArgumentNullException">Queue name is null or empty.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityAlreadyExists">An entity with the same name exists under the same service namespace.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.QuotaExceeded">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.CreateTopicAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Creates a new topic in the service namespace with the given name.
             </summary>
            
             <param name="name">The name of the topic relative to the service namespace base address.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>Throws if a topic already exists. <see cref="T:Azure.Messaging.ServiceBus.Administration.TopicProperties" /> for default values of topic properties.</remarks>
             <returns>The <see cref="T:Azure.Messaging.ServiceBus.Administration.TopicProperties" /> of the newly created topic.</returns>
             <exception cref="T:System.ArgumentNullException">Topic name is null or empty.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="name" /> is greater than 260 characters.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityAlreadyExists">A topic with the same name exists under the same service namespace.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.QuotaExceeded">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.CreateTopicAsync(Azure.Messaging.ServiceBus.Administration.CreateTopicOptions,System.Threading.CancellationToken)">
             <summary>
             Creates a new topic in the service namespace with the given name.
             </summary>
            
             <param name="options">A <see cref="T:Azure.Messaging.ServiceBus.Administration.TopicProperties" /> object describing the attributes with which the new topic will be created.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>Throws if a topic already exists. <see cref="T:Azure.Messaging.ServiceBus.Administration.TopicProperties" /> for default values of topic properties.</remarks>
             <returns>The <see cref="T:Azure.Messaging.ServiceBus.Administration.TopicProperties" /> of the newly created topic.</returns>
             <exception cref="T:System.ArgumentNullException">Topic description is null.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityAlreadyExists">A topic with the same name exists under the same service namespace.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.QuotaExceeded">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.CreateSubscriptionAsync(System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             Creates a new subscription within a topic in the service namespace with the given name.
             </summary>
            
             <param name="topicName">The name of the topic relative to the service namespace base address.</param>
             <param name="subscriptionName">The name of the subscription.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>Throws if a subscription already exists. <see cref="T:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties" /> for default values of subscription description.
             By default, A "pass-through" filter is created for this subscription, which means it will allow all messages to go to this subscription. The name of the filter is represented by <see cref="F:Azure.Messaging.ServiceBus.Administration.RuleProperties.DefaultRuleName" />.
             <see cref="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.CreateSubscriptionAsync(Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions,Azure.Messaging.ServiceBus.Administration.CreateRuleOptions,System.Threading.CancellationToken)" /> for creating subscription with a different filter.</remarks>
             <returns>The <see cref="T:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties" /> of the newly created subscription.</returns>
             <exception cref="T:System.ArgumentNullException">Topic name or subscription name is null or empty.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="topicName" /> is greater than 260 characters or <paramref name="subscriptionName" /> is greater than 50 characters.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityAlreadyExists">A subscription with the same name exists under the same service namespace.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.QuotaExceeded">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.CreateSubscriptionAsync(Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions,System.Threading.CancellationToken)">
             <summary>
             Creates a new subscription within a topic in the service namespace with the given name.
             </summary>
            
             <param name="options">A <see cref="T:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties" /> object describing the attributes with which the new subscription will be created.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>Throws if a subscription already exists.
             Be default, A "pass-through" filter is created for this subscription, which means it will allow all messages to go to this subscription. The name of the filter is represented by <see cref="F:Azure.Messaging.ServiceBus.Administration.RuleProperties.DefaultRuleName" />.
             <see cref="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.CreateSubscriptionAsync(Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions,Azure.Messaging.ServiceBus.Administration.CreateRuleOptions,System.Threading.CancellationToken)" /> for creating subscription with a different filter.</remarks>
             <returns>The <see cref="T:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties" /> of the newly created subscription.</returns>
             <exception cref="T:System.ArgumentNullException">Subscription description is null.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityAlreadyExists">A subscription with the same name exists under the same service namespace.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.QuotaExceeded">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.CreateSubscriptionAsync(Azure.Messaging.ServiceBus.Administration.CreateSubscriptionOptions,Azure.Messaging.ServiceBus.Administration.CreateRuleOptions,System.Threading.CancellationToken)">
             <summary>
             Creates a new subscription within a topic with the provided default rule.
             </summary>
            
             <param name="options">A <see cref="T:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties" /> object describing the attributes with which the new subscription will be created.</param>
             <param name="rule"> A <see cref="T:Azure.Messaging.ServiceBus.Administration.RuleProperties" /> object describing the default rule. If null, then pass-through filter with name <see cref="F:Azure.Messaging.ServiceBus.Administration.RuleProperties.DefaultRuleName" /> will be created.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>Throws if a subscription already exists. </remarks>
             <returns>The <see cref="T:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties" /> of the newly created subscription.</returns>
             <exception cref="T:System.ArgumentNullException">Subscription description is null.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityAlreadyExists">A subscription with the same name exists under the same service namespace.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.QuotaExceeded">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.CreateRuleAsync(System.String,System.String,Azure.Messaging.ServiceBus.Administration.CreateRuleOptions,System.Threading.CancellationToken)">
             <summary>
             Adds a new rule to the subscription under given topic.
             </summary>
            
             <param name="topicName">The topic name relative to the service namespace base address.</param>
             <param name="subscriptionName">The name of the subscription.</param>
             <param name="options">A <see cref="T:Azure.Messaging.ServiceBus.Administration.CreateRuleOptions" /> object describing the attributes with which the messages are matched and acted upon.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <exception cref="T:System.ArgumentNullException">Subscription or rule description is null.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityAlreadyExists">A subscription with the same name exists under the same service namespace.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out. The timeout period is initialized through the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class (see Retry property). You may need to increase the value of timeout to avoid this exception if the timeout value is relatively low.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.QuotaExceeded">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
             <returns><see cref="T:Azure.Messaging.ServiceBus.Administration.RuleProperties" /> of the recently created rule.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.UpdateQueueAsync(Azure.Messaging.ServiceBus.Administration.QueueProperties,System.Threading.CancellationToken)">
             <summary>
             Updates an existing queue.
             </summary>
            
             <param name="queue">A <see cref="T:Azure.Messaging.ServiceBus.Administration.QueueProperties" /> object describing the attributes with which the queue will be updated.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The <see cref="T:Azure.Messaging.ServiceBus.Administration.QueueProperties" /> of the updated queue.</returns>
             <exception cref="T:System.ArgumentNullException">Queue descriptor is null.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityNotFound">Described queue was not found.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.QuotaExceeded">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.UpdateTopicAsync(Azure.Messaging.ServiceBus.Administration.TopicProperties,System.Threading.CancellationToken)">
             <summary>
             Updates an existing topic.
             </summary>
            
             <param name="topic">A <see cref="T:Azure.Messaging.ServiceBus.Administration.TopicProperties" /> object describing the attributes with which the topic will be updated.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The <see cref="T:Azure.Messaging.ServiceBus.Administration.TopicProperties" /> of the updated topic.</returns>
             <exception cref="T:System.ArgumentNullException">Topic descriptor is null.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityNotFound">Described topic was not found.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.QuotaExceeded">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.UpdateSubscriptionAsync(Azure.Messaging.ServiceBus.Administration.SubscriptionProperties,System.Threading.CancellationToken)">
             <summary>
             Updates an existing subscription under a topic.
             </summary>
            
             <param name="subscription">A <see cref="T:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties" /> object describing the attributes with which the subscription will be updated.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The <see cref="T:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties" /> of the updated subscription.</returns>
             <exception cref="T:System.ArgumentNullException">subscription descriptor is null.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityNotFound">Described subscription was not found.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.QuotaExceeded">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.UpdateRuleAsync(System.String,System.String,Azure.Messaging.ServiceBus.Administration.RuleProperties,System.Threading.CancellationToken)">
             <summary>
             Updates an existing rule for a topic-subscription.
             </summary>
            
             <param name="topicName">Name of the topic.</param>
             <param name="subscriptionName">Name of the subscription.</param>
             <param name="rule">A <see cref="T:Azure.Messaging.ServiceBus.Administration.RuleProperties" /> object describing the attributes with which the rule will be updated.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The <see cref="T:Azure.Messaging.ServiceBus.Administration.RuleProperties" /> of the updated rule.</returns>
             <exception cref="T:System.ArgumentNullException">rule descriptor is null.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityNotFound">Described topic/subscription/rule was not found.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.QuotaExceeded">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.QueueExistsAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Checks whether a given queue exists or not.
             </summary>
            
             <param name="name">Name of the queue entity to check.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>True if queue exists, false otherwise.</returns>
             <exception cref="T:System.ArgumentException">Queue name provided is not valid.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.TopicExistsAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Checks whether a given topic exists or not.
             </summary>
            
             <param name="name">Name of the topic entity to check.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>True if topic exists, false otherwise.</returns>
             <exception cref="T:System.ArgumentException">topic name provided is not valid.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.SubscriptionExistsAsync(System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             Checks whether a given subscription exists or not.
             </summary>
            
             <param name="topicName">Name of the topic.</param>
             <param name="subscriptionName">Name of the subscription to check.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>True if subscription exists, false otherwise.</returns>
             <exception cref="T:System.ArgumentException">topic or subscription name provided is not valid.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.RuleExistsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             Checks whether a given rule exists or not.
             </summary>
            
             <param name="topicName">Name of the topic.</param>
             <param name="subscriptionName">Name of the subscription to check.</param>
             <param name="ruleName">The name of the rule to retrieve.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>True if subscription exists, false otherwise.</returns>
             <exception cref="T:System.ArgumentException">topic or subscription name provided is not valid.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">The operation times out.</exception>
             <exception cref="T:System.UnauthorizedAccessException">No sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> has the correct <see cref="T:Azure.Core.TokenCredential" /> credentials to perform this operation.</exception>
             <exception cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">The server is busy. You should wait before you retry the operation.</exception>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">An internal error or unexpected exception occurs.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient.BuildAudienceResource(System.String)">
             <summary>
             Builds the audience for use in the signature.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Service Bus namespace.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
            
             <returns>The value to use as the audience of the signature.</returns>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions">
            <summary>
              The set of options that can be specified when creating an <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" />
              to configure its behavior.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions.#ctor(Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions.ServiceVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions" /> class.
            </summary>
            <param name="version">
            The <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions.ServiceVersion" /> of the service API used when
            making requests.
            </param>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions.ServiceVersion">
            <summary>
            The versions of Service Bus Administration supported by this client
            library.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions.ServiceVersion.V2017_04">
            <summary>
            The 2017-04 service version.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions.ServiceVersion.V2021_05">
            <summary>
            The 2021-05 service version.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions.Version">
            <summary>
            Gets the <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions.ServiceVersion" /> of the service API used when
            making requests.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClientOptions.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule">
            <summary>
            Defines the authorization rule for an entity using SAS.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule.#ctor(System.String,System.Collections.Generic.IEnumerable{Azure.Messaging.ServiceBus.Administration.AccessRights})">
            <summary>Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule" /> class.</summary>
            <param name="keyName">The authorization rule key name.</param>
            <param name="rights">The list of rights.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Azure.Messaging.ServiceBus.Administration.AccessRights})">
            <summary>Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule" /> class.</summary>
            <param name="keyName">The authorization rule key name.</param>
            <param name="primaryKey">The primary key for the authorization rule.</param>
            <param name="rights">The list of rights.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.Messaging.ServiceBus.Administration.AccessRights})">
            <summary>Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule" /> class.</summary>
            <param name="keyName">The authorization rule key name.</param>
            <param name="primaryKey">The primary key for the authorization rule.</param>
            <param name="secondaryKey">The secondary key for the authorization rule.</param>
            <param name="rights">The list of rights.</param>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule.ClaimType">
            <summary>Gets or sets the claim type.</summary>
            <value>The claim type.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule.KeyName">
            <summary>Gets or sets the authorization rule key name.</summary>
            <value>The authorization rule key name.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule.PrimaryKey">
            <summary>Gets or sets the primary key for the authorization rule.</summary>
            <value>The primary key for the authorization rule.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule.SecondaryKey">
            <summary>Gets or sets the secondary key for the authorization rule.</summary>
            <value>The secondary key for the authorization rule.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule.Rights">
            <summary>Gets or sets the list of rights.</summary>
            <value>The list of rights.</value>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule.Equals(Azure.Messaging.ServiceBus.Administration.AuthorizationRule)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="other">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule.op_Equality(Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule,Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule)">
            <summary></summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule.op_Inequality(Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule,Azure.Messaging.ServiceBus.Administration.SharedAccessAuthorizationRule)">
            <summary></summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties">
            <summary>
            Represents the static properties of the subscription.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of SubscriptionDescription class with the specified name and topic name.
            </summary>
            <param name="topicName">Name of the topic relative to the namespace base address.</param>
            <param name="subscriptionName">Name of the subscription.</param>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.LockDuration">
            <summary>
            Duration of a peek lock receive. i.e., the amount of time that the message is locked by a given receiver so that
            no other receiver receives the same message.
            </summary>
            <remarks>Max value is 5 minutes. Default value is 60 seconds.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.RequiresSession">
            <summary>
            This indicates whether the subscription supports the concept of session. Sessionful-messages follow FIFO ordering.
            </summary>
            <remarks>
            If true, the receiver can only receive messages using <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" />.
            Defaults to false.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.DefaultMessageTimeToLive">
            <summary>
            The default time to live value for the messages. This is the duration after which the message expires, starting from when
            the message is sent to Service Bus. </summary>
            <remarks>
            This is the default value used when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.TimeToLive" /> is not set on a
             message itself. Messages older than their TimeToLive value will expire and no longer be retained in the message store.
             Subscribers will be unable to receive expired messages.
             Default value is <see cref="F:System.TimeSpan.MaxValue" />.
             </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.AutoDeleteOnIdle">
            <summary>
            The <see cref="T:System.TimeSpan" /> idle interval after which the subscription is automatically deleted.
            </summary>
            <remarks>The minimum duration is 5 minutes. Default value is <see cref="F:System.TimeSpan.MaxValue" />.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.DeadLetteringOnMessageExpiration">
            <summary>
            Indicates whether this subscription has dead letter support when a message expires.
            </summary>
            <remarks>If true, the expired messages are moved to dead-letter subqueue. Default value is false.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.EnableDeadLetteringOnFilterEvaluationExceptions">
            <summary>
            indicates whether messages need to be forwarded to dead-letter sub queue when subscription rule evaluation fails.
            </summary>
            <remarks>Defaults to true.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.TopicName">
            <summary>
            Name of the topic under which subscription exists.
            </summary>
            <remarks>Value cannot be null or empty. Value cannot exceed 260 chars. Cannot start or end with a slash.
            Cannot have restricted characters: '@','?','#','*'</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.SubscriptionName">
            <summary>
            Name of the subscription.
            </summary>
            <remarks>Value cannot be null or empty. Value cannot exceed 50 chars.
            Cannot have restricted characters: '@','?','#','*','/','\'</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.MaxDeliveryCount">
            <summary>
            The maximum delivery count of a message before it is dead-lettered.
            </summary>
            <remarks>The delivery count is increased when a message is received in <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" /> mode
            and didn't complete the message before the message lock expired.
            Default value is 10. Minimum value is 1.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.Status">
            <summary>
            The current status of the subscription (Enabled / Disabled).
            </summary>
            <remarks>When an entity is disabled, that entity cannot send or receive messages.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.ForwardTo">
            <summary>
            The name of the recipient entity to which all the messages sent to the subscription are forwarded to.
            </summary>
            <remarks>If set, user cannot manually receive messages from this subscription. The destination entity
            must be an already existing entity.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.ForwardDeadLetteredMessagesTo">
            <summary>
            The name of the recipient entity to which all the dead-lettered messages of this subscription are forwarded to.
            </summary>
            <remarks>If set, user cannot manually receive dead-lettered messages from this subscription. The destination
            entity must already exist.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.EnableBatchedOperations">
            <summary>
            Indicates whether server-side batched operations are enabled.
            </summary>
            <remarks>Defaults to true.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.UserMetadata">
            <summary>
            Custom metadata that user can associate with the description.
            </summary>
            <remarks>Cannot be null. Max length is 1024 chars.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.UnknownProperties">
            <summary>
            List of properties that were retrieved using GetSubscription but are not understood by this version of client is stored here.
            The list will be sent back when an already retrieved SubscriptionDescription will be used in UpdateSubscription call.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.Equals(Azure.Messaging.ServiceBus.Administration.SubscriptionProperties)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.op_Equality(Azure.Messaging.ServiceBus.Administration.SubscriptionProperties,Azure.Messaging.ServiceBus.Administration.SubscriptionProperties)">
             <summary>
            
             </summary>
             <param name="left"></param>
             <param name="right"></param>
             <returns></returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.SubscriptionProperties.op_Inequality(Azure.Messaging.ServiceBus.Administration.SubscriptionProperties,Azure.Messaging.ServiceBus.Administration.SubscriptionProperties)">
             <summary>
            
             </summary>
             <param name="left"></param>
             <param name="right"></param>
             <returns></returns>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.SubscriptionRuntimeProperties">
            <summary>
            This provides runtime properties of the subscription.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionRuntimeProperties.TopicName">
            <summary>
            The name of the topic.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionRuntimeProperties.SubscriptionName">
            <summary>
            The name of subscription.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionRuntimeProperties.TotalMessageCount">
            <summary>
            The total number of messages in the subscription.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionRuntimeProperties.ActiveMessageCount">
            <summary>
            The number of active messages in the entity.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionRuntimeProperties.DeadLetterMessageCount">
            <summary>
            The number of dead-lettered messages in the entity.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionRuntimeProperties.TransferMessageCount">
            <summary>
            The number of messages which are yet to be transferred/forwarded to destination entity.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionRuntimeProperties.TransferDeadLetterMessageCount">
            <summary>
            The number of messages transfer-messages which are dead-lettered into transfer-dead-letter subqueue.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionRuntimeProperties.AccessedAt">
            <summary>
            The <see cref="T:System.DateTimeOffset" /> when the entity was last accessed.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionRuntimeProperties.CreatedAt">
            <summary>
            The <see cref="T:System.DateTimeOffset" /> when the entity was created.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.SubscriptionRuntimeProperties.UpdatedAt">
            <summary>
            The <see cref="T:System.DateTime" /> when the entity description was last updated.
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.TopicProperties">
            <summary>
            Represents the static properties of the topic.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.TopicProperties.#ctor(System.String)">
            <summary>
            Initializes a new instance of TopicDescription class with the specified relative name.
            </summary>
            <param name="name">Name of the topic relative to the namespace base address.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.TopicProperties.#ctor(Azure.Messaging.ServiceBus.Administration.CreateTopicOptions)">
            <summary>
            Initializes a new instance of TopicProperties from the provided options.
            </summary>
            <param name="options">Options used to create the properties instance.</param>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicProperties.DefaultMessageTimeToLive">
            <summary>
            The default time to live value for the messages. This is the duration after which the message expires, starting from when
            the message is sent to Service Bus. </summary>
            <remarks>
            This is the default value used when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.TimeToLive" /> is not set on a
             message itself. Messages older than their TimeToLive value will expire and no longer be retained in the message store.
             Subscribers will be unable to receive expired messages.
             Default value is <see cref="F:System.TimeSpan.MaxValue" />.
             </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicProperties.AutoDeleteOnIdle">
            <summary>
            The <see cref="T:System.TimeSpan" /> idle interval after which the topic is automatically deleted.
            </summary>
            <remarks>The minimum duration is 5 minutes. Default value is <see cref="F:System.TimeSpan.MaxValue" />.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicProperties.MaxSizeInMegabytes">
            <summary>
            The maximum size of the topic in megabytes, which is the size of memory allocated for the topic.
            </summary>
            <remarks>Default value is 1024.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicProperties.RequiresDuplicateDetection">
            <summary>
            This value indicates if the topic requires guard against duplicate messages. If true, duplicate messages having same
            <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.MessageId" /> and sent to topic within duration of <see cref="P:Azure.Messaging.ServiceBus.Administration.TopicProperties.DuplicateDetectionHistoryTimeWindow" />
            will be discarded.
            </summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicProperties.DuplicateDetectionHistoryTimeWindow">
            <summary>
            The <see cref="T:System.TimeSpan" /> duration of duplicate detection history that is maintained by the service.
            </summary>
            <remarks>
            The default value is 1 minute. Max value is 7 days and minimum is 20 seconds.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicProperties.Name">
            <summary>
            Name of the topic relative to the namespace base address.
            </summary>
            <remarks>Max length is 260 chars. Cannot start or end with a slash.
            Cannot have restricted characters: '@','?','#','*'</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicProperties.AuthorizationRules">
            <summary>
            The <see cref="P:Azure.Messaging.ServiceBus.Administration.TopicProperties.AuthorizationRules" /> on the topic to control user access at entity level.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicProperties.Status">
            <summary>
            The current status of the topic (Enabled / Disabled).
            </summary>
            <remarks>When an entity is disabled, that entity cannot send or receive messages.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicProperties.EnablePartitioning">
            <summary>
            Indicates whether the topic is to be partitioned across multiple message brokers.
            </summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicProperties.SupportOrdering">
            <summary>
            Defines whether ordering needs to be maintained. If true, messages sent to topic will be
            forwarded to the subscription in order. For partitioned topics, defaults to false, and
            setting it to true has no effect.
            </summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicProperties.EnableBatchedOperations">
            <summary>
            Indicates whether server-side batched operations are enabled.
            </summary>
            <remarks>Defaults to true.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicProperties.UserMetadata">
            <summary>
            Custom metadata that user can associate with the description.
            </summary>
            <remarks>Cannot be null. Max length is 1024 chars.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicProperties.MaxMessageSizeInKilobytes">
            <summary>
            Gets or sets the maximum message size, in kilobytes, for messages sent to this topic.
            This feature is only available when using a Premium namespace and service version "2021-05" or higher.
            <seealso href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-premium-messaging" />
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicProperties.UnknownProperties">
            <summary>
            List of properties that were retrieved using GetTopic but are not understood by this version of client is stored here.
            The list will be sent back when an already retrieved TopicDescription will be used in UpdateTopic call.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.TopicProperties.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.TopicProperties.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.TopicProperties.Equals(Azure.Messaging.ServiceBus.Administration.TopicProperties)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.TopicProperties.op_Equality(Azure.Messaging.ServiceBus.Administration.TopicProperties,Azure.Messaging.ServiceBus.Administration.TopicProperties)">
            <summary></summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Administration.TopicProperties.op_Inequality(Azure.Messaging.ServiceBus.Administration.TopicProperties,Azure.Messaging.ServiceBus.Administration.TopicProperties)">
            <summary></summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Administration.TopicRuntimeProperties">
            <summary>
            Represents the runtime properties of the topic.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicRuntimeProperties.Name">
            <summary>
            The name of the topic.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicRuntimeProperties.AccessedAt">
            <summary>
            The <see cref="T:System.DateTime" /> when the entity was last accessed.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicRuntimeProperties.CreatedAt">
            <summary>
            The <see cref="T:System.DateTimeOffset" /> when the entity was created.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicRuntimeProperties.UpdatedAt">
            <summary>
            The <see cref="T:System.DateTimeOffset" /> when the entity description was last updated.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicRuntimeProperties.SizeInBytes">
            <summary>
            The current size of the entity in bytes.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicRuntimeProperties.SubscriptionCount">
            <summary>
            The number of subscriptions to the topic.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Administration.TopicRuntimeProperties.ScheduledMessageCount">
            <summary>
            The number of messages that are scheduled to be enqueued.
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Amqp.AmqpClient">
             <summary>
               A transport client abstraction responsible for brokering operations for AMQP-based connections.
               It is intended that the public <see cref="T:Azure.Messaging.ServiceBus.ServiceBusConnection" /> make use of an instance via containment
               and delegate operations to it.
             </summary>
            
             <seealso cref="T:Azure.Messaging.ServiceBus.Core.TransportClient" />
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Amqp.AmqpClient.IsClosed">
             <summary>
               Indicates whether or not this client has been closed.
             </summary>
            
             <value>
               <c>true</c> if the client is closed; otherwise, <c>false</c>.
             </value>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Amqp.AmqpClient.ServiceEndpoint">
             <summary>
               The endpoint for the Service Bus service to which the client is associated.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpClient.#ctor(System.String,Azure.Messaging.ServiceBus.Authorization.ServiceBusTokenCredential,Azure.Messaging.ServiceBus.ServiceBusClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Amqp.AmqpClient" /> class.
             </summary>
            
             <param name="host">The fully qualified host name for the Service Bus namespace.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="credential">The Azure managed identity credential to use for authorization.  Access controls may be specified by the Service Bus namespace or the requested Service Bus entity, depending on Azure configuration.</param>
             <param name="options">A set of options to apply when configuring the client.</param>
            
             <remarks>
               As an internal type, this class performs only basic sanity checks against its arguments.  It
               is assumed that callers are trusted and have performed deep validation.
            
               Any parameters passed are assumed to be owned by this instance and safe to mutate or dispose;
               creation of clones or otherwise protecting the parameters is assumed to be the purview of the
               caller.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpClient.CreateSender(System.String,Azure.Messaging.ServiceBus.ServiceBusRetryPolicy,System.String)">
             <summary>
               Creates a producer strongly aligned with the active protocol and transport,
               responsible for publishing <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessage" /> to the Service Bus entity.
             </summary>
            
             <param name="entityPath">The entity path to send the message to.</param>
             <param name="retryPolicy">The policy which governs retry behavior and try timeouts.</param>
             <param name="identifier">The identifier for the sender.</param>
            
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.Core.TransportSender" /> configured in the requested manner.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpClient.CreateReceiver(System.String,Azure.Messaging.ServiceBus.ServiceBusRetryPolicy,Azure.Messaging.ServiceBus.ServiceBusReceiveMode,System.UInt32,System.String,System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
              Creates a receiver strongly aligned with the active protocol and transport, responsible
              for reading <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessage" /> from a specific Service Bus entity.
            </summary>
            <param name="entityPath">The entity path to receive from.</param>
            <param name="retryPolicy">The policy which governs retry behavior and try timeouts.</param>
            <param name="receiveMode">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> used to specify how messages are received. Defaults to PeekLock mode.</param>
            <param name="prefetchCount">Controls the number of events received and queued locally without regard to whether an operation was requested.  If <c>null</c> a default will be used.</param>
            <param name="identifier">The identifier for the sender.</param>
            <param name="sessionId">The session ID to receive messages for.</param>
            <param name="isSessionReceiver">Whether or not this is a sessionful receiver link.</param>
            <param name="isProcessor">Whether or not the receiver is being created for a processor.</param>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the
                open link operation. Only applicable for session receivers.</param>
            <returns>A <see cref="T:Azure.Messaging.ServiceBus.Core.TransportReceiver" /> configured in the requested manner.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpClient.CreateRuleManager(System.String,Azure.Messaging.ServiceBus.ServiceBusRetryPolicy,System.String)">
             <summary>
               Creates a rule manager strongly aligned with the active protocol and transport,
               responsible for adding, removing and getting rules from the Service Bus subscription.
             </summary>
            
             <param name="subscriptionPath">The path of the Service Bus subscription to which the rule manager is bound.</param>
             <param name="retryPolicy">The policy which governs retry behavior and try timeouts.</param>
             <param name="identifier">The identifier for the rule manager.</param>
            
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.Core.TransportRuleManager" /> configured in the requested manner.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpClient.CloseAsync(System.Threading.CancellationToken)">
             <summary>
               Closes the connection to the transport client instance.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope">
            <summary>
              Defines a context for AMQP operations which can be shared amongst the different
              client types within a given scope.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope.IsDisposed">
             <summary>
               Indicates whether this <see cref="T:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope" /> has been disposed.
             </summary>
            
             <value><c>true</c> if disposed; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope.TransactionController">
            <summary>
             The controller responsible for managing transactions.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope.#ctor(System.Uri,Azure.Messaging.ServiceBus.Authorization.ServiceBusTokenCredential,Azure.Messaging.ServiceBus.ServiceBusTransportType,System.Net.IWebProxy,System.Boolean,System.TimeSpan,Azure.Messaging.ServiceBus.ServiceBusTransportMetrics)">
            <summary>
              Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope" /> class.
            </summary>
            <param name="serviceEndpoint">Endpoint for the Service Bus service to which the scope is associated.</param>
            <param name="credential">The credential to use for authorization with the Service Bus service.</param>
            <param name="transport">The transport to use for communication.</param>
            <param name="proxy">The proxy, if any, to use for communication.</param>
            <param name="useSingleSession">If true, all links will use a single session.</param>
            <param name="operationTimeout">The timeout for operations associated with the connection.</param>
            <param name="metrics">The metrics instance to populate transport metrics. May be null.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope.#ctor">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope" /> class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope.OpenManagementLinkAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
               Opens an AMQP link for use with management operations.
             </summary>
             <param name="entityPath">The path for the entity.</param>
             <param name="identifier">The identifier for the sender or receiver that is opening a management link.</param>
             <param name="timeout">The timeout to apply when creating the link.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A link for use with management operations.</returns>
            
             <remarks>
               The authorization for this link does not require periodic
               refreshing.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope.OpenReceiverLinkAsync(System.String,System.String,System.TimeSpan,System.UInt32,Azure.Messaging.ServiceBus.ServiceBusReceiveMode,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
              Opens an AMQP link for use with receiver operations.
            </summary>
            <param name="identifier">The identifier of the entity that is receiving.</param>
            <param name="entityPath">The entity path to receive from.</param>
            <param name="timeout">The timeout to apply when creating the link.</param>
            <param name="prefetchCount">Controls the number of events received and queued locally without regard to whether an operation was requested.</param>
            <param name="receiveMode">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> used to specify how messages are received. Defaults to PeekLock mode.</param>
            <param name="sessionId">The session to connect to.</param>
            <param name="isSessionReceiver">Whether or not this is a sessionful receiver.</param>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            <returns>A link for use with consumer operations.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope.OpenSenderLinkAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
               Opens an AMQP link for use with sender operations.
             </summary>
             <param name="entityPath"></param>
             <param name="identifier">The identifier for the sender that is opening a send link.</param>
             <param name="timeout">The timeout to apply when creating the link.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A link for use with sender operations.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope.Dispose">
            <summary>
              Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope" />,
              including ensuring that the client itself has been closed.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope.CreateAndOpenConnectionAsync(System.Version,System.Uri,Azure.Messaging.ServiceBus.ServiceBusTransportType,System.Net.IWebProxy,System.String,System.TimeSpan,Azure.Messaging.ServiceBus.ServiceBusTransportMetrics)">
             <summary>
               Creates an AMQP connection for a given scope.
             </summary>
            
             <param name="amqpVersion">The version of AMQP to use for the connection.</param>
             <param name="serviceEndpoint">The endpoint for the Service Bus service to which the scope is associated.</param>
             <param name="transportType">The type of transport to use for communication.</param>
             <param name="proxy">The proxy, if any, to use for communication.</param>
             <param name="scopeIdentifier">The unique identifier for the associated scope.</param>
             <param name="timeout">The timeout to consider when creating the connection.</param>
             <param name="metrics">The metrics instance to populate transport metrics. May be null.</param>
             <returns>An AMQP connection that may be used for communicating with the Service Bus service.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope.CreateManagementLinkAsync(System.String,System.String,Microsoft.Azure.Amqp.AmqpConnection,System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
               Creates an AMQP link for use with management operations.
             </summary>
             <param name="entityPath"></param>
             <param name="identifier">The identifier for the sender or receiver that is opening a management link.</param>
             <param name="connection">The active and opened AMQP connection to use for this link.</param>
             <param name="timeout">The timeout to apply when creating the link.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A link for use with management operations.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope.CreateReceivingLinkAsync(System.String,System.String,Microsoft.Azure.Amqp.AmqpConnection,System.Uri,System.TimeSpan,System.UInt32,Azure.Messaging.ServiceBus.ServiceBusReceiveMode,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
              Creates an AMQP link for use with receiving operations.
            </summary>
            <param name="entityPath">The entity path to receive from.</param>
            <param name="identifier">The identifier for the receiver that is creating a receive link.</param>
            <param name="connection">The active and opened AMQP connection to use for this link.</param>
            <param name="endpoint">The fully qualified endpoint to open the link for.</param>
            <param name="timeout">The timeout to apply when creating the link.</param>
            <param name="prefetchCount">Controls the number of events received and queued locally without regard to whether an operation was requested.</param>
            <param name="receiveMode">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> used to specify how messages are received. Defaults to PeekLock mode.</param>
            <param name="sessionId">The session to receive from.</param>
            <param name="isSessionReceiver">Whether or not this is a sessionful receiver.</param>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            <returns>A link for use for operations related to receiving events.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope.CreateSendingLinkAsync(System.String,System.String,Microsoft.Azure.Amqp.AmqpConnection,System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
               Creates an AMQP link for use with publishing operations.
             </summary>
             <param name="entityPath">The entity path to send to.</param>
             <param name="identifier">The identifier of the sender that is creating a send link.</param>
             <param name="connection">The active and opened AMQP connection to use for this link.</param>
             <param name="timeout">The timeout to apply when creating the link.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A link for use for operations related to receiving events.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope.StartTrackingLinkAsActive(System.String,Microsoft.Azure.Amqp.AmqpObject,System.Threading.Timer)">
             <summary>
               Performs the actions needed to configure and begin tracking the specified AMQP
               link as an active link bound to this scope.
             </summary>
             <param name="entityPath">The entity path for the associated link.</param>
             <param name="link">The link to begin tracking.</param>
             <param name="authorizationRefreshTimer">The timer used to manage refreshing authorization, if the link requires it.</param>
            
             <remarks>
               This method does operate on the specified <paramref name="link" /> in order to configure it
               for active tracking; no assumptions are made about the open/connected state of the link nor are
               its communication properties modified.
             </remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope.CloseConnection(Microsoft.Azure.Amqp.AmqpConnection)">
             <summary>
               Performs the tasks needed to close a connection.
             </summary>
            
             <param name="connection">The connection to close.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope.CalculateLinkAuthorizationRefreshInterval(System.DateTime,System.Nullable{System.DateTime})">
             <summary>
               Calculates the interval after which authorization for an AMQP link should be
               refreshed.
             </summary>
            
             <param name="expirationTimeUtc">The date/time, in UTC, that the current authorization is expected to expire.</param>
             <param name="currentTimeUtc">The current date/time, in UTC.  If not specified, the system time will be used.</param>
            
             <returns>The interval after which authorization should be refreshed.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope.CreateAuthorizationRefreshHandler(System.String,Microsoft.Azure.Amqp.AmqpConnection,Microsoft.Azure.Amqp.AmqpObject,Azure.Messaging.ServiceBus.Amqp.CbsTokenProvider,System.Uri,System.String[],System.String[],System.TimeSpan,System.Func{System.Threading.Timer},System.String)">
             <summary>
               Creates the timer event handler to support refreshing AMQP link authorization
               on a recurring basis.
             </summary>
             <param name="entityPath">The entity path to refresh authorization with.</param>
             <param name="connection">The AMQP connection to which the link being refreshed is bound to.</param>
             <param name="amqpLink">The AMQP link to refresh authorization for.</param>
             <param name="tokenProvider">The <see cref="T:Azure.Messaging.ServiceBus.Amqp.CbsTokenProvider" /> to use for obtaining access tokens.</param>
             <param name="endpoint">The Service Bus service endpoint that the AMQP link is communicating with.</param>
             <param name="audience">The audience associated with the authorization.  This is likely the <paramref name="endpoint" /> absolute URI.</param>
             <param name="requiredClaims">The set of claims required to support the operations of the AMQP link.</param>
             <param name="refreshTimeout">The timeout to apply when requesting authorization refresh.</param>
             <param name="refreshTimerFactory">A function to allow retrieving the <see cref="T:System.Threading.Timer" /> associated with the link authorization.</param>
             <param name="identifier">The identifier of the entity that will be refreshing authorization.</param>
            
             <returns>A <see cref="T:System.Threading.TimerCallback" /> delegate to perform the refresh when a timer is due.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope.OpenAmqpObjectAsync(Microsoft.Azure.Amqp.AmqpObject,System.TimeSpan,System.Threading.CancellationToken,System.String)">
             <summary>
               Performs the actions needed to open an AMQP object, such
               as a session or link for use.
             </summary>
            
             <param name="target">The target AMQP object to open.</param>
             <param name="timeout">The timeout to apply when opening the link.</param>
             <param name="cancellationToken">Token to signal cancellation of the operation.</param>
             <param name="entityPath">The path of the entity associated with the AMQP object being opened, if any.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope.RequestAuthorizationUsingCbsAsync(Microsoft.Azure.Amqp.AmqpConnection,Azure.Messaging.ServiceBus.Amqp.CbsTokenProvider,System.Uri,System.String[],System.String[],System.TimeSpan,System.String)">
             <summary>
               Requests authorization for a connection or link using a connection via the CBS mechanism.
             </summary>
            
             <param name="connection">The AMQP connection for which the authorization is associated.</param>
             <param name="tokenProvider">The <see cref="T:Azure.Messaging.ServiceBus.Amqp.CbsTokenProvider" /> to use for obtaining access tokens.</param>
             <param name="endpoint">The Service Bus service endpoint that the authorization is requested for.</param>
             <param name="audience">The audience associated with the authorization.  This is likely the <paramref name="endpoint" /> absolute URI.</param>
             <param name="requiredClaims">The set of claims required to support the operations of the AMQP link.</param>
             <param name="timeout">The timeout to apply when requesting authorization.</param>
             <param name="identifier">The identifier of the entity requesting authorization.</param>
            
             <returns>The date/time, in UTC, when the authorization expires.</returns>
            
             <remarks>
               It is assumed that there is a valid <see cref="T:Microsoft.Azure.Amqp.AmqpCbsLink" /> already associated
               with the connection; this will be used as the transport for the authorization
               credentials.
             </remarks>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Amqp.AmqpMessageBatch">
             <summary>
               A set of messages with known size constraints, based on messages to be sent
               using an AMQP-based transport.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Amqp.AmqpMessageBatch.MaxSizeInBytes">
             <summary>
               The maximum size allowed for the batch, in bytes.  This includes the messages in the batch as
               well as any overhead for the batch itself when sent to the Queue/Topic.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Amqp.AmqpMessageBatch.SizeInBytes">
             <summary>
               The size of the batch, in bytes, as it will be sent to the Queue/Topic
               service.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Amqp.AmqpMessageBatch.Count">
             <summary>
               The count of messages contained in the batch.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpMessageBatch.#ctor(Azure.Messaging.ServiceBus.CreateMessageBatchOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Amqp.AmqpMessageBatch" /> class.
             </summary>
            
             <param name="options">The set of options to apply to the batch.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpMessageBatch.TryAddMessage(Azure.Messaging.ServiceBus.ServiceBusMessage)">
             <summary>
               Attempts to add a message to the batch, ensuring that the size
               of the batch does not exceed its maximum.
             </summary>
            
             <param name="message">The message to attempt to add to the batch.</param>
            
             <returns><c>true</c> if the message was added; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpMessageBatch.Clear">
             <summary>
               Clears the batch, removing all messages and resetting the
               available size.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpMessageBatch.AsReadOnly``1">
             <summary>
               Represents the batch as an enumerable set of transport-specific
               representations of a message.
             </summary>
            
             <typeparam name="T">The transport-specific message representation being requested.</typeparam>
            
             <returns>The set of messages as an enumerable of the requested type.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpMessageBatch.Dispose">
             <summary>
               Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.ServiceBus.Amqp.AmqpMessageBatch" />.
             </summary>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Amqp.AmqpMessageConstants">
            <summary>
            Service Bus specific constants that are used to identify keys for various
            MessageAnnotations in an AMQP message.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Amqp.AmqpMessageConstants.DeadLetterReasonHeader">
            <summary>
             Property key representing dead-letter reason, when a message is received from a dead-letter subqueue of an entity.
             This key and the associated values are stored in the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.ApplicationProperties" /> dictionary
             for dead lettered messages.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Amqp.AmqpMessageConstants.DeadLetterErrorDescriptionHeader">
            <summary>
             Property key representing detailed error description, when a message is received from a dead-letter subqueue of an entity.
             This key and the associated values are stored in the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.ApplicationProperties" /> dictionary
             for dead lettered messages.
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver">
             <summary>
             A transport client abstraction responsible for brokering operations for AMQP-based connections.
             It is intended that the public <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> make use of an instance
             via containment and delegate operations to it.
             </summary>
            
             <seealso cref="T:Azure.Messaging.ServiceBus.Core.TransportReceiver" />
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.IsClosed">
             <summary>
             Indicates whether or not this receiver has been closed.
             </summary>
            
             <value>
             <c>true</c> if the receiver is closed; otherwise, <c>false</c>.
             </value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.LastPeekedSequenceNumber">
            <summary>
            Gets the sequence number of the last peeked message.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.SessionId">
            <summary>
            The Session Id associated with the receiver.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.#ctor(System.String,Azure.Messaging.ServiceBus.ServiceBusReceiveMode,System.UInt32,Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope,Azure.Messaging.ServiceBus.ServiceBusRetryPolicy,System.String,System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver" /> class.
             </summary>
            
             <param name="entityPath">The name of the Service Bus entity from which events will be consumed.</param>
             <param name="receiveMode">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> used to specify how messages are received. Defaults to PeekLock mode.</param>
             <param name="prefetchCount">Controls the number of events received and queued locally without regard to whether an operation was requested.  If <c>null</c> a default will be used.</param>
             <param name="connectionScope">The AMQP connection context for operations .</param>
             <param name="retryPolicy">The retry policy to consider when an operation fails.</param>
             <param name="identifier">The identifier for the sender.</param>
             <param name="sessionId">The session ID to receive messages for.</param>
             <param name="isSessionReceiver">Whether or not this is a sessionful receiver link.</param>
             <param name="isProcessor">Whether or not the receiver is being created for a processor.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the
             open link operation. Only applicable for session receivers.</param>
            
             <remarks>
             As an internal type, this class performs only basic sanity checks against its arguments.  It
             is assumed that callers are trusted and have performed deep validation.
             Any parameters passed are assumed to be owned by this instance and safe to mutate or dispose;
             creation of clones or otherwise protecting the parameters is assumed to be the purview of the
             caller.
             </remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.ReceiveMessagesAsync(System.Int32,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Receives a list of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> from the entity using <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> mode.
            </summary>
            <param name="maxMessages">The maximum number of messages that will be received.</param>
            <param name="maxWaitTime">An optional <see cref="T:System.TimeSpan" /> specifying the maximum time to wait for the first message before returning an empty list if no messages have been received.</param>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            <returns>List of messages received. Returns an empty list if no message is found.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.CompleteAsync(System.Guid,System.Threading.CancellationToken)">
             <summary>
             Completes a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" />. This will delete the message from the service.
             </summary>
            
             <param name="lockToken">The lockToken of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to complete.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             This operation can only be performed on a message that was received by this receiver
             when <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.DeferAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
             <summary> Indicates that the receiver wants to defer the processing for the message.</summary>
            
             <param name="lockToken">The lockToken of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to defer.</param>
             <param name="propertiesToModify">The properties of the message to modify while deferring the message.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             A lock token can be found in <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.LockTokenGuid" />,
             only when <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             In order to receive this message again in the future, you will need to save
             the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.SequenceNumber" />
             and receive it using <see cref="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.ReceiveDeferredMessagesAsync(System.Int64[],System.Threading.CancellationToken)" />.
             Deferring messages does not impact message's expiration, meaning that deferred messages can still expire.
             This operation can only be performed on messages that were received by this receiver.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.AbandonAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
             <summary>
             Abandons a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" />. This will make the message available again for processing.
             </summary>
            
             <param name="lockToken">The lock token of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to abandon.</param>
             <param name="propertiesToModify">The properties of the message to modify while abandoning the message.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             Abandoning a message will increase the delivery count on the message.
             This operation can only be performed on messages that were received by this receiver
             when <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.DeadLetterAsync(System.Guid,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
             <summary>
             Moves a message to the dead-letter subqueue.
             </summary>
            
             <param name="lockToken">The lock token of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to dead-letter.</param>
             <param name="deadLetterReason">The reason for dead-lettering the message.</param>
             <param name="deadLetterErrorDescription">The error description for dead-lettering the message.</param>
             <param name="propertiesToModify">The properties of the message to modify while moving to subqueue.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             In order to receive a message from the dead-letter queue, you will need a new
             <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> with the corresponding path.
             You can use EntityNameHelper.FormatDeadLetterPath(string)"/&gt; to help with this.
             This operation can only be performed on messages that were received by this receiver
             when <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.DeadLetterInternalAsync(System.Guid,System.TimeSpan,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String)">
             <summary>
             Moves a message to the dead-letter subqueue.
             </summary>
            
             <param name="lockToken">The lock token of the corresponding message to dead-letter.</param>
             <param name="timeout"></param>
             <param name="propertiesToModify">The properties of the message to modify while moving to subqueue.</param>
             <param name="deadLetterReason">The reason for dead-lettering the message.</param>
             <param name="deadLetterErrorDescription">The error description for dead-lettering the message.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.PeekMessagesAsync(System.Nullable{System.Int64},System.Int32,System.Threading.CancellationToken)">
             <summary>
             Fetches a list of active messages without changing the state of the receiver or the message source.
             </summary>
            
             <param name="sequenceNumber">The sequence number from where to read the message.</param>
             <param name="messageCount">The maximum number of messages that will be fetched.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             The first call to <see cref="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.PeekMessagesAsync(System.Nullable{System.Int64},System.Int32,System.Threading.CancellationToken)" />(long, int, CancellationToken) fetches the first active message for this receiver.
             Each subsequent call fetches the subsequent message in the entity.
             Unlike a received message, peeked message will not have lock token associated with it,
             and hence it cannot be Completed/Abandoned/Deferred/Deadlettered/Renewed.
             Also, unlike <see cref="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.ReceiveMessagesAsync(System.Int32,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" />, this method will fetch even Deferred messages (but not Deadlettered message)
             </remarks>
             <returns></returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.RenewMessageLockAsync(System.Guid,System.Threading.CancellationToken)">
             <summary>
             Renews the lock on the message. The lock will be renewed based on the setting specified on the queue.
             </summary>
             <returns>New lock token expiry date and time in UTC format.</returns>
            
             <param name="lockToken">Lock token associated with the message.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.RenewSessionLockAsync(System.Threading.CancellationToken)">
            <summary>
            Renews the lock on the session specified by the <see cref="P:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.SessionId" />. The lock will be renewed based on the setting specified on the entity.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.GetStateAsync(System.Threading.CancellationToken)">
             <summary>
             Gets the session state.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The session state as <see cref="T:System.BinaryData" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.SetStateAsync(System.BinaryData,System.Threading.CancellationToken)">
             <summary>
             Set a custom state on the session which can be later retrieved using <see cref="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.GetStateAsync(System.Threading.CancellationToken)" />.
             </summary>
            
             <param name="sessionState">A <see cref="T:System.BinaryData" /> of session state</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>This state is stored on Service Bus forever unless you set an empty state on it.</remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.ReceiveDeferredMessagesAsync(System.Int64[],System.Threading.CancellationToken)">
            <summary>
            Receives a <see cref="T:System.Collections.Generic.IList`1" /> of deferred messages identified by <paramref name="sequenceNumbers" />.
            </summary>
            <param name="sequenceNumbers">A <see cref="T:System.Collections.Generic.IList`1" /> containing the sequence numbers to receive.</param>
            <param name="cancellationToken"></param>
            <returns>Messages identified by sequence number are returned.
            Throws if the messages have not been deferred.</returns>
            <seealso cref="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.DeferAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)" />
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.CloseAsync(System.Threading.CancellationToken)">
             <summary>
             Closes the connection to the transport receiver instance.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpReceiver.OpenLinkAsync(System.Threading.CancellationToken)">
            <summary>
            Opens an AMQP link for use with session receiver operations.
            </summary>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Amqp.AmqpRuleManager.IsClosed">
             <summary>
             Indicates whether or not this rule manager has been closed.
             </summary>
            
             <value>
             <c>true</c> if the rule manager is closed; otherwise, <c>false</c>.
             </value>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpRuleManager.#ctor(System.String,Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope,Azure.Messaging.ServiceBus.ServiceBusRetryPolicy,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Amqp.AmqpRuleManager" /> class.
             </summary>
            
             <param name="subscriptionPath">The path of the Service Bus subscription to which the rule manager is bound.</param>
             <param name="connectionScope">The AMQP connection context for operations.</param>
             <param name="retryPolicy">The retry policy to consider when an operation fails.</param>
             <param name="identifier">The identifier for the rule manager.</param>
            
             <remarks>
             As an internal type, this class performs only basic sanity checks against its arguments.  It
             is assumed that callers are trusted and have performed deep validation.
            
             Any parameters passed are assumed to be owned by this instance and safe to mutate or dispose;
             creation of clones or otherwise protecting the parameters is assumed to be the purview of the
             caller.
             </remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpRuleManager.AddRuleAsync(Azure.Messaging.ServiceBus.Administration.RuleProperties,System.Threading.CancellationToken)">
             <summary>
             Adds a rule to the current subscription to filter the messages reaching from topic to the subscription.
             </summary>
            
             <param name="properties">The rule description that provides the rule to add.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             You can add rules to the subscription that decides which messages from the topic should reach the subscription.
             A default <see cref="T:Azure.Messaging.ServiceBus.Administration.TrueRuleFilter" /> rule named <see cref="F:Azure.Messaging.ServiceBus.Administration.RuleProperties.DefaultRuleName" /> is always added while creation of the Subscription.
             You can add multiple rules with distinct names to the same subscription.
             Multiple filters combine with each other using logical OR condition. i.e., If any filter succeeds, the message is passed on to the subscription.
             </remarks>
            
             <returns>A task instance that represents the asynchronous add rule operation.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpRuleManager.RemoveRuleAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Removes the rule on the subscription identified by <paramref name="ruleName" />.
             </summary>
            
             <param name="ruleName">Name of the rule</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A task instance that represents the asynchronous remove rule operation.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpRuleManager.GetRulesAsync(System.Threading.CancellationToken)">
             <summary>
             Get all rules associated with the subscription.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>Returns a list of rules description</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpRuleManager.CloseAsync(System.Threading.CancellationToken)">
             <summary>
             Closes the connection to the transport rule manager instance.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Amqp.AmqpSender">
             <summary>
               A transport sender abstraction responsible for brokering operations for AMQP-based connections.
               It is intended that the public <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSender" /> make use of an instance
               via containment and delegate operations to it.
             </summary>
            
             <seealso cref="T:Azure.Messaging.ServiceBus.Core.TransportSender" />
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Amqp.AmqpSender.IsClosed">
             <summary>
               Indicates whether or not this sender has been closed.
             </summary>
            
             <value>
               <c>true</c> if the sender is closed; otherwise, <c>false</c>.
             </value>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpSender.#ctor(System.String,Azure.Messaging.ServiceBus.Amqp.AmqpConnectionScope,Azure.Messaging.ServiceBus.ServiceBusRetryPolicy,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Amqp.AmqpSender" /> class.
             </summary>
            
             <param name="entityPath">The name of the entity to which messages will be sent.</param>
             <param name="connectionScope">The AMQP connection context for operations.</param>
             <param name="retryPolicy">The retry policy to consider when an operation fails.</param>
             <param name="identifier">The identifier for the sender.</param>
            
             <remarks>
               As an internal type, this class performs only basic sanity checks against its arguments.  It
               is assumed that callers are trusted and have performed deep validation.
            
               Any parameters passed are assumed to be owned by this instance and safe to mutate or dispose;
               creation of clones or otherwise protecting the parameters is assumed to be the purview of the
               caller.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpSender.CreateMessageBatchAsync(Azure.Messaging.ServiceBus.CreateMessageBatchOptions,System.Threading.CancellationToken)">
             <summary>
               Creates a size-constraint batch to which <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessage" /> may be added using a try-based pattern.  If a message would
               exceed the maximum allowable size of the batch, the batch will not allow adding the message and signal that scenario using its
               return value.
            
               Because messages that would violate the size constraint cannot be added, publishing a batch will not trigger an exception when
               attempting to send the message to the Queue/Topic.
             </summary>
            
             <param name="options">The set of options to consider when creating this batch.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessageBatch" /> with the requested <paramref name="options" />.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpSender.SendBatchAsync(Azure.Messaging.ServiceBus.ServiceBusMessageBatch,System.Threading.CancellationToken)">
             <summary>
               Sends a set of messages to the associated Queue/Topic using a batched approach.
             </summary>
            
             <param name="messageBatch">The set of messages to send.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpSender.SendBatchInternalAsync(System.Collections.Generic.IReadOnlyCollection{Azure.Messaging.ServiceBus.ServiceBusMessage},System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
                Sends a set of messages to the associated Queue/Topic using a batched approach.
             </summary>
            
             <param name="messages"></param>
             <param name="timeout"></param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpSender.SendAsync(System.Collections.Generic.IReadOnlyCollection{Azure.Messaging.ServiceBus.ServiceBusMessage},System.Threading.CancellationToken)">
             <summary>
               Sends a list of messages to the associated Service Bus entity using a batched approach.
               If the size of the messages exceed the maximum size of a single batch,
               an exception will be triggered and the send will fail. In order to ensure that the messages
               being sent will fit in a batch, use <see cref="M:Azure.Messaging.ServiceBus.Amqp.AmqpSender.SendBatchAsync(Azure.Messaging.ServiceBus.ServiceBusMessageBatch,System.Threading.CancellationToken)" /> instead.
             </summary>
            
             <param name="messages">The list of messages to send.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpSender.CloseAsync(System.Threading.CancellationToken)">
             <summary>
               Closes the connection to the transport sender instance.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpSender.ScheduleMessagesAsync(System.Collections.Generic.IReadOnlyCollection{Azure.Messaging.ServiceBus.ServiceBusMessage},System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="messages"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpSender.ScheduleMessageInternalAsync(System.Collections.Generic.IReadOnlyCollection{Azure.Messaging.ServiceBus.ServiceBusMessage},System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="messages"></param>
             <param name="timeout"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpSender.CancelScheduledMessagesAsync(System.Int64[],System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="sequenceNumbers"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpSender.CancelScheduledMessageInternalAsync(System.Int64[],System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="sequenceNumbers"></param>
             <param name="timeout"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpSender.CreateLinkAndEnsureSenderStateAsync(System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
               Creates the AMQP link to be used for sender-related operations and ensures
               that the corresponding state for the sender has been updated based on the link
               configuration.
             </summary>
            
             <param name="timeout">The timeout to apply when creating the link.</param>
             <param name="cancellationToken">The cancellation token to consider when creating the link.</param>
            
             <returns>The AMQP link to use for sender-related operations.</returns>
            
             <remarks>
               This method will modify class-level state, setting those attributes that depend on the AMQP
               link configuration.  There exists a benign race condition in doing so, as there may be multiple
               concurrent callers.  In this case, the attributes may be set multiple times but the resulting
               value will be the same.
             </remarks>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Amqp.CbsTokenProvider">
             <summary>
               Performs the actions needed to generate <see cref="T:Microsoft.Azure.Amqp.CbsToken" /> instances for
               authorization within an AMQP scope.
             </summary>
            
             <seealso cref="T:Microsoft.Azure.Amqp.ICbsTokenProvider" />
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.CbsTokenProvider.#ctor(Azure.Messaging.ServiceBus.Authorization.ServiceBusTokenCredential,System.TimeSpan,System.Threading.CancellationToken)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Amqp.CbsTokenProvider" /> class.
             </summary>
            
             <param name="credential">The credential to use for access token generation.</param>
             <param name="tokenExpirationBuffer">The amount of time to buffer expiration</param>
             <param name="cancellationToken">The cancellation token to consider when making requests.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.CbsTokenProvider.GetTokenAsync(System.Uri,System.String,System.String[])">
             <summary>
               Asynchronously requests a CBS token to be used for authorization within an AMQP
               scope.
             </summary>
            
             <param name="namespaceAddress">The address of the namespace to be authorized.</param>
             <param name="appliesTo">The resource to which the token should apply.</param>
             <param name="requiredClaims">The set of claims that are required for authorization.</param>
            
             <returns>The token to use for authorization.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.CbsTokenProvider.Dispose">
             <summary>
               Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.ServiceBus.Amqp.CbsTokenProvider" />.
             </summary>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Amqp.ManagementUtilities">
            <summary>
            Utility methods related to the management link
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Amqp.MessageBody">
            <summary>
            The body abstractions allow to optimize several use cases of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessage" /> and
            <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to make sure body memory is only converted when needed and as little as possible.
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.AmqpResponse">
             <summary>
               The set of annotations for service responses associated with an AMQP messages and
               entities.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.ServiceBus.AmqpResponse.StatusCode">
            <summary>The annotation that identifies the code of a response status.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.AmqpResponse.StatusDescription">
            <summary>The annotation that identifies the description of a response status.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.AmqpResponse.ErrorCondition">
            <summary>The annotation that identifies an error response.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.AmqpResponse.IsSuccessStatus(Microsoft.Azure.Amqp.AmqpResponseStatusCode)">
             <summary>
               Determines whether the given AMQP status code value should be considered a successful
               request.
             </summary>
            
             <param name="statusCode">The status code value to consider.</param>
            
             <returns><c>true</c> if the request should be considered successful; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Authorization.ServiceBusClaim">
             <summary>
               The set of claims for operations associated with the Service Bus service.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Authorization.ServiceBusClaim.Manage">
            <summary>Needed for management operations, such as querying metadata, against the service.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Authorization.ServiceBusClaim.Send">
            <summary>Needed for sending messages to the service.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Authorization.ServiceBusClaim.Listen">
            <summary>Needed for receiving messages from the service. </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Authorization.ServiceBusTokenCredential">
             <summary>
               Provides a generic token-based credential for a given Service Bus entity instance.
             </summary>
            
             <seealso cref="T:Azure.Core.TokenCredential" />
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Authorization.ServiceBusTokenCredential.IsSharedAccessCredential">
             <summary>
               Indicates whether the credential is based on an Service Bus
               shared access policy.
             </summary>
            
             <value><c>true</c> if the credential should be considered a SAS credential; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Authorization.ServiceBusTokenCredential.#ctor(Azure.Core.TokenCredential)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Authorization.ServiceBusTokenCredential" /> class.
             </summary>
            
             <param name="tokenCredential">The <see cref="T:Azure.Core.TokenCredential" /> on which to base the token.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Authorization.ServiceBusTokenCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
             <summary>
               Retrieves the token that represents the shared access signature credential, for
               use in authorization against an Service Bus entity.
             </summary>
            
             <param name="requestContext">The details of the authentication request.</param>
             <param name="cancellationToken">The token used to request cancellation of the operation.</param>
            
             <returns>The token representing the shared access signature for this credential.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Authorization.ServiceBusTokenCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
             <summary>
               Retrieves the token that represents the shared access signature credential, for
               use in authorization against an Service Bus entity.
             </summary>
            
             <param name="requestContext">The details of the authentication request.</param>
             <param name="cancellationToken">The token used to request cancellation of the operation.</param>
            
             <returns>The token representing the shared access signature for this credential.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Authorization.ServiceBusTokenCredential.GetTokenUsingDefaultScopeAsync(System.Threading.CancellationToken)">
             <summary>
               Retrieves the token that represents the shared access signature credential, for
               use in authorization against an Service Bus entity. It provides a default value for the Token Request Context.
             </summary>
            
             <param name="cancellationToken">The token used to request cancellation of the operation.</param>
            
             <returns>The token representing the shared access signature for this credential.</returns>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Authorization.SharedAccessCredential">
             <summary>
               Provides a credential based on a shared access signature for a given
               Service Bus entity.
             </summary>
            
             <seealso cref="T:Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature" />
             <seealso cref="T:Azure.Core.TokenCredential" />
             <seealso cref="T:Azure.AzureNamedKeyCredential" />
             <seealso cref="T:Azure.AzureSasCredential" />
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Authorization.SharedAccessCredential.#ctor(Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Authorization.SharedAccessCredential" /> class.
             </summary>
            
             <param name="signature">The shared access signature on which to base the token.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Authorization.SharedAccessCredential.#ctor(Azure.AzureSasCredential)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Authorization.SharedAccessCredential" /> class.
             </summary>
            
             <param name="sourceCredential">The <see cref="T:Azure.AzureSasCredential" /> to base signatures on.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Authorization.SharedAccessCredential.#ctor(Azure.AzureNamedKeyCredential,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Authorization.SharedAccessCredential" /> class.
             </summary>
            
             <param name="sourceCredential">The <see cref="T:Azure.AzureNamedKeyCredential" /> to base signatures on.</param>
             <param name="signatureResource">The fully-qualified identifier for the resource to which this credential is intended to serve as authorization for.  This is also known as the "token audience" in some contexts.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Authorization.SharedAccessCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
             <summary>
               Retrieves the token that represents the shared access signature credential, for
               use in authorization against a Service Bus entity.
             </summary>
            
             <param name="requestContext">The details of the authentication request.</param>
             <param name="cancellationToken">The token used to request cancellation of the operation.</param>
            
             <returns>The token representing the shared access signature for this credential.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Authorization.SharedAccessCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
             <summary>
               Retrieves the token that represents the shared access signature credential, for
               use in authorization against an Service Bus entity.
             </summary>
            
             <param name="requestContext">The details of the authentication request.</param>
             <param name="cancellationToken">The token used to request cancellation of the operation.</param>
            
             <returns>The token representing the shared access signature for this credential.</returns>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature">
             <summary>
               A shared access signature, which can be used for authorization to an Service Bus namespace
               or a specific Service Bus entity.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature.MaximumKeyNameLength">
            <summary>The maximum allowed length of the SAS key name.</summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature.SharedAccessKeyName">
             <summary>
               The name of the shared access key, either for the Service Bus namespace
               or the Service Bus entity.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature.SharedAccessKey">
             <summary>
               The value of the shared access key, either for the Service Bus namespace
               or the Service Bus entity.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature.SignatureExpiration">
             <summary>
               The date and time that the shared access signature expires, in UTC.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature.Resource">
             <summary>
               The resource to which the shared access signature is intended to serve as
               authorization.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature.Value">
             <summary>
               The shared access signature to be used for authorization, either for the Service Bus namespace
               or the Service Bus entity.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature.#ctor(System.String,System.String,System.String,System.Nullable{System.TimeSpan})">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature" /> class.
             </summary>
            
             <param name="serviceBusResource">The Service Bus resource to which the token is intended to serve as authorization.</param>
             <param name="sharedAccessKeyName">The name of the shared access key that the signature should be based on.</param>
             <param name="sharedAccessKey">The value of the shared access key for the signature.</param>
             <param name="signatureValidityDuration">The duration that the signature should be considered valid; if not specified, a default will be assumed.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature.#ctor(System.String,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature" /> class.
             </summary>
            
             <param name="sharedAccessSignature">The shared access signature that will be parsed as the basis of this instance.</param>
             <param name="sharedAccessKey">The value of the shared access key for the signature.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature.#ctor(System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature" /> class.
             </summary>
            
             <param name="sharedAccessSignature">The shared access signature that will be parsed as the basis of this instance.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature.#ctor(System.String,System.String,System.String,System.String,System.DateTimeOffset)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature" /> class.
             </summary>
            
             <param name="eventHubResource">The Service Bus resource to which the token is intended to serve as authorization.</param>
             <param name="sharedAccessKeyName">The name of the shared access key that the signature should be based on.</param>
             <param name="sharedAccessKey">The value of the shared access key for the signature.</param>
             <param name="value">The shared access signature to be used for authorization.</param>
             <param name="signatureExpiration">The date and time that the shared access signature expires, in UTC.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature.CloneWithNewExpiration(System.TimeSpan)">
             <summary>
               Creates a new signature with the specified period for which the shared access signature is considered valid.
             </summary>
            
             <param name="signatureValidityDuration">The duration that the signature should be considered valid.</param>
            
             <returns>A new <see cref="T:Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature" /> based on the same key, but with a new expiration time.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Authorization.SharedAccessSignature.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusClient">
            <summary>
            The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> is the top-level client through which all Service Bus
            entities can be interacted with. Any lower level types retrieved from here, such
            as <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSender" /> and <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> will share the
            same AMQP connection. Disposing the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> will cause the AMQP
            connection to close.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusClient.FullyQualifiedNamespace">
             <summary>
               The fully qualified Service Bus namespace that the connection is associated with.  This is likely
               to be similar to <c>{yournamespace}.servicebus.windows.net</c>.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusClient.IsClosed">
             <summary>
               Indicates whether or not this <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> has been closed.
             </summary>
            
             <value>
               <c>true</c> if the client is closed; otherwise, <c>false</c>.
             </value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusClient.TransportType">
            <summary>
            The transport type used for this <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" />.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusClient.Identifier">
            <summary>
              A unique name used to identify this <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" />.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusClient.Logger">
            <summary>
              The instance of <see cref="T:Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource" /> which can be mocked for testing.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.DisposeAsync">
             <summary>
               Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" />,
               including ensuring that the client itself has been closed.
             </summary>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.GetTransportMetrics">
            <summary>
            Gets the metrics associated with this <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> instance. The metrics returned represent a snapshot and will not be updated.
            To get updated metrics, this method should be called again.
            In order to use this property, <see cref="P:Azure.Messaging.ServiceBus.ServiceBusClientOptions.EnableTransportMetrics" /> must be set to <value>true</value>.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusClient.Connection">
            <summary>
            The connection that is used for the client.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.#ctor">
            <summary>
            Can be used for mocking.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> class.
             </summary>
            
             <param name="connectionString">The connection string to use for connecting to the
             Service Bus namespace.</param>
            
             <remarks>
             If the connection string specifies a specific entity name, any subsequent calls to
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateSender(System.String)" />, <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String)" />,
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateProcessor(System.String)" /> etc. must still specify the same entity name.
            
             The connection string will recognize and apply properties populated by the
             Azure portal such as Endpoint, SharedAccessKeyName, SharedAccessKey, and EntityPath.
             Other values will be ignored; to configure the processor, please use the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClientOptions" />.
             </remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.#ctor(System.String,Azure.Messaging.ServiceBus.ServiceBusClientOptions)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> class.
             </summary>
            
             <param name="connectionString">The connection string to use for connecting to the
             Service Bus namespace.</param>
             <param name="options">The set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClientOptions" /> to use for
             configuring this <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" />.</param>
            
             <remarks>
             If the connection string specifies a specific entity name, any subsequent calls to
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateSender(System.String)" />, <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String)" />,
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateProcessor(System.String)" /> etc. must still specify the same entity name.
            
             The connection string will recognize and apply properties populated by the
             Azure portal such as Endpoint, SharedAccessKeyName, SharedAccessKey, and EntityPath.
             Other values will be ignored; to configure the processor, please use the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClientOptions" />.
             </remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.#ctor(System.String,Azure.AzureNamedKeyCredential,Azure.Messaging.ServiceBus.ServiceBusClientOptions)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> class.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Service Bus namespace to connect to.
             This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="credential">The <see cref="T:Azure.AzureNamedKeyCredential" /> to use for authorization.  Access controls may be specified by the Service Bus namespace.</param>
             <param name="options">The set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClientOptions" /> to use for configuring this <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" />.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.#ctor(System.String,Azure.AzureSasCredential,Azure.Messaging.ServiceBus.ServiceBusClientOptions)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> class.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Service Bus namespace to connect to.
             This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="credential">The <see cref="T:Azure.AzureSasCredential" /> to use for authorization.  Access controls may be specified by the Service Bus namespace.</param>
             <param name="options">The set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClientOptions" /> to use for configuring this <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" />.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.#ctor(System.String,Azure.Core.TokenCredential)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> class.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Service Bus namespace to connect to.
             This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="credential">The Azure managed identity credential to use for authorization.  Access controls may be specified by the Service Bus namespace.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.#ctor(System.String,Azure.Core.TokenCredential,Azure.Messaging.ServiceBus.ServiceBusClientOptions)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> class.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Service Bus namespace to connect to.
             This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="credential">The Azure managed identity credential to use for authorization.  Access controls may be specified by the Service Bus namespace.</param>
             <param name="options">The set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClientOptions" /> to use for configuring this <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" />.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateSender(System.String)">
             <summary>
             Creates a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSender" /> instance that can be used for sending messages to a specific
             queue or topic.
             </summary>
            
             <param name="queueOrTopicName">The queue or topic to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSender" />
             for.</param>
            
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSender" /> scoped to the specified queue or topic.</returns>
             <exception cref="T:System.ArgumentException">
               The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> was constructed with a connection string containing the "EntityPath" token
               that has a different value than the <paramref name="queueOrTopicName" /> value specified here.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String)">
             <summary>
             Creates a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> instance that can be used for receiving and settling messages
             from a specific queue. It uses <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> to specify how messages are received. Defaults to PeekLock mode.
             If you want to change the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" />, use <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)" /> method.
             The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set in <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions" />.
             </summary>
            
             <param name="queueName">The queue to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> for.</param>
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> scoped to the specified queue.</returns>
             <exception cref="T:System.ArgumentException">
               The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> was constructed with a connection string containing the "EntityPath" token
               that has a different value than the <paramref name="queueName" /> value specified here.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)">
             <summary>
             Creates a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> instance that can be used for receiving and settling messages
             from a specific queue. It uses <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> to specify how messages are received. Defaults to PeekLock mode.
             The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set in <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions" />.
             </summary>
            
             <param name="queueName">The queue to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> for.</param>
             <param name="options">The set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions" /> to use for configuring the
             <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" />.</param>
            
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> scoped to the specified queue.</returns>
             <exception cref="T:System.ArgumentException">
               The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> was constructed with a connection string containing the "EntityPath" token
               that has a different value than the <paramref name="queueName" /> value specified here.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,System.String)">
             <summary>
             Creates a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> instance that can be used for receiving and
             settling messages from a specific subscription. It uses <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> to specify
             how messages are received. Defaults to PeekLock mode. If you want to change the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" />,
             use <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)" /> method.
             The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set in <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions" />.
             </summary>
            
             <param name="topicName">The topic to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> for.</param>
             <param name="subscriptionName">The subscription specific to the specified topic to create
             a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> for.</param>
            
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> scoped to the specified subscription and topic.</returns>
             <exception cref="T:System.ArgumentException">
               The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> was constructed with a connection string containing the "EntityPath" token
               that has a different value than the <paramref name="topicName" /> value specified here.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)">
             <summary>
             Creates a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> instance that can be used for
             receiving and settling messages from a specific subscription. It uses <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> to specify
             how messages are received. Defaults to PeekLock mode. The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set in <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions" />.
             </summary>
            
             <param name="topicName">The topic to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> for.</param>
             <param name="subscriptionName">The subscription specific to the specified topic to create
             a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> for.</param>
             <param name="options">The set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions" /> to use for configuring the
             <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" />.</param>
            
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> scoped to the specified subscription and topic.</returns>
             <exception cref="T:System.ArgumentException">
               The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> was constructed with a connection string containing the "EntityPath" token
               that has a different value than the <paramref name="topicName" /> value specified here.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.AcceptNextSessionAsync(System.String,Azure.Messaging.ServiceBus.ServiceBusSessionReceiverOptions,System.Threading.CancellationToken)">
             <summary>
             Creates a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> instance that can be used for receiving
             and settling messages from a specific session-enabled queue. It uses <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> to specify
             how messages are received. Defaults to PeekLock mode. The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set in <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions" />.
             </summary>
            
             <param name="queueName">The session-enabled queue to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> for.</param>
             <param name="options">The set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiverOptions" /> to use for configuring the
             <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" />.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>Because this is establishing a session lock, this method performs a service call. If there are no available messages in the queue,
             this will throw a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusException" /> with <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> of <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout" />.
             </remarks>
            
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> scoped to the specified queue and a specific session.</returns>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               There are no unlocked sessions in the entity. This can occur if the entity has no messages, or if all of the messages
               belong to sessions that are locked by other receivers.
               The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout" /> in this case.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.AcceptNextSessionAsync(System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusSessionReceiverOptions,System.Threading.CancellationToken)">
             <summary>
             Creates a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> instance that can be used for receiving
             and settling messages from a specific session-enabled subscription. It uses <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> to specify
             how messages are received. Defaults to PeekLock mode. The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set in <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions" />.
             </summary>
            
             <param name="topicName">The topic to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> for.</param>
             <param name="subscriptionName">The session-enabled subscription to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> for.</param>
             <param name="options">The set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiverOptions" /> to use for configuring the
             <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" />.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>Because this is establishing a session lock, this method performs a service call. If there are no available messages in the queue,
             this will throw a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusException" /> with <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> of <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout" />.
             </remarks>
            
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> scoped to the specified queue and a specific session.</returns>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               There are no unlocked sessions in the entity. This can occur if the entity has no messages, or if all of the messages
               belong to sessions that are locked by other receivers.
               The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout" /> in this case.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.AcceptSessionAsync(System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusSessionReceiverOptions,System.Threading.CancellationToken)">
             <summary>
             Creates a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> instance that can be used for receiving
             and settling messages from a specific session-enabled queue. It uses <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> to specify
             how messages are received. Defaults to PeekLock mode. The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set in <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions" />.
             </summary>
            
             <param name="queueName">The session-enabled queue to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> for.</param>
             <param name="sessionId">Gets or sets a session ID to scope the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> to.</param>
             <param name="options">The set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiverOptions" /> to use for configuring the
             <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" />.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>Because this is establishing a session lock, this method performs a service call. If the
             sessionId parameter is null, and there are no available messages in the queue, this will
             throw a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusException" /> with <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> of <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout" />.
             </remarks>
            
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> scoped to the specified queue and a specific session.</returns>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               The <paramref name="sessionId" /> corresponds to a session that is currently locked by another receiver.
               The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionCannotBeLocked" /> in this case.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.AcceptSessionAsync(System.String,System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusSessionReceiverOptions,System.Threading.CancellationToken)">
             <summary>
             Creates a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> instance that can be used for receiving
             and settling messages from a specific session-enabled subscription. It uses <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> to specify
             how messages are received. Defaults to PeekLock mode. The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set in <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions" />.
             </summary>
            
             <param name="topicName">The topic to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> for.</param>
             <param name="subscriptionName">The session-enabled subscription to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> for.</param>
             <param name="sessionId">Gets or sets a session ID to scope the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> to.</param>
             <param name="options">The set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiverOptions" /> to use for configuring the
             <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" />.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>Because this is establishing a session lock, this method performs a service call. If the
             sessionId parameter is null, and there are no available messages in the queue, this will
             throw a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusException" /> with <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> of <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout" />.
             </remarks>
            
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> scoped to the specified queue and a specific session.</returns>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               The <paramref name="sessionId" /> corresponds to a session that is currently locked by another receiver.
               The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionCannotBeLocked" /> in this case.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateProcessor(System.String)">
             <summary>
             Creates a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> instance that can be used to process messages using
             event handlers that are set on the processor. It uses <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> to specify
             how messages are received. Defaults to PeekLock mode. If you want to change the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" />,
             use <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateProcessor(System.String,Azure.Messaging.ServiceBus.ServiceBusProcessorOptions)" /> method.
             The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set in <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions" /> type.
             </summary>
            
             <param name="queueName">The queue to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> for.</param>
            
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> scoped to the specified queue.</returns>
             <exception cref="T:System.ArgumentException">
               The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> was constructed with a connection string containing the "EntityPath" token
               that has a different value than the <paramref name="queueName" /> value specified here.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateProcessor(System.String,Azure.Messaging.ServiceBus.ServiceBusProcessorOptions)">
             <summary>
             Creates a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> instance that can be used to process messages using
             event handlers that are set on the processor. It uses <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> to specify
             how messages are received. Defaults to PeekLock mode. The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set in <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions" /> type.
             </summary>
            
             <param name="queueName">The queue to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> for.</param>
             <param name="options">The set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions" /> to use for configuring the
             <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" />.</param>
            
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> scoped to the specified queue.</returns>
             <exception cref="T:System.ArgumentException">
               The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> was constructed with a connection string containing the "EntityPath" token
               that has a different value than the <paramref name="queueName" /> value specified here.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateProcessor(System.String,System.String)">
             <summary>
             Creates a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> instance that can be used to process messages using
             event handlers that are set on the processor. It uses <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> to specify
             how messages are received. Defaults to PeekLock mode. If you want to change the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" />,
             use <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateProcessor(System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusProcessorOptions)" /> method.
             The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set in <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions" /> type.
             </summary>
            
             <param name="topicName">The topic to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> for.</param>
             <param name="subscriptionName">The subscription to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> for.</param>
            
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> scoped to the specified topic and subscription.</returns>
             <exception cref="T:System.ArgumentException">
               The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> was constructed with a connection string containing the "EntityPath" token
               that has a different value than the <paramref name="topicName" /> value specified here.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateProcessor(System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusProcessorOptions)">
             <summary>
             Creates a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> instance that can be used to process messages using
             event handlers that are set on the processor. It uses <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> to specify
             how messages are received. Defaults to PeekLock mode. The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set in <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions" /> type.
             </summary>
            
             <param name="topicName">The topic to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> for.</param>
             <param name="subscriptionName">The subscription to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> for.</param>
             <param name="options">The set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions" /> to use for configuring the
             <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" />.</param>
            
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> scoped to the specified topic and subscription.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateSessionProcessor(System.String,Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions)">
             <summary>
             Creates a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" /> instance that can be used to process session messages using
             event handlers that are set on the processor. It uses <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> to specify
             how messages are received. Defaults to PeekLock mode. The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set in <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions" /> type.
             </summary>
            
             <param name="queueName">The queue to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" /> for.</param>
             <param name="options">The set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions" /> to use for configuring the
             <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" />.</param>
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" /> scoped to the specified queue.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateSessionProcessor(System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions)">
             <summary>
             Creates a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" /> instance that can be used to process
             messages using event handlers that are set on the processor. It uses <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> to specify
             how messages are received. Defaults to PeekLock mode. The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set in <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions" /> type.
             </summary>
            
             <param name="topicName">The topic to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" /> for.</param>
             <param name="subscriptionName">The subscription to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" /> for.</param>
             <param name="options">The set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions" /> to use for configuring the
             <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" />.</param>
            
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> scoped to the specified topic and subscription.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateRuleManager(System.String,System.String)">
             <summary>
             The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusRuleManager" /> is used to manage the rules for a subscription.
             </summary>
            
             <param name="topicName">The topic to create a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusRuleManager" /> for.</param>
             <param name="subscriptionName">The subscription specific to the specified topic to create
             a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusRuleManager" /> for.</param>
            
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.ServiceBusRuleManager" /> scoped to the specified subscription and topic.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClient.ValidateEntityName(System.String)">
             <summary>
             Validates that the specified entity name matches the entity path in the Connection,
             if an entity path is specified in the connection.
             </summary>
            
             <param name="entityName">Entity name to validate.</param>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusClientOptions">
             <summary>
               The set of options that can be specified when creating an <see cref="T:Azure.Messaging.ServiceBus.ServiceBusConnection" />
               to configure its behavior.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusClientOptions.TransportType">
             <summary>
               The type of protocol and transport that will be used for communicating with the Service Bus
               service.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusClientOptions.WebProxy">
             <summary>
               The proxy to use for communication over web sockets.
             </summary>
            
             <remarks>
               A proxy cannot be used for communication over TCP; if web sockets are not in
               use, specifying a proxy is an invalid option.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusClientOptions.RetryOptions">
            <summary>
            The set of options to use for determining whether a failed operation should be retried and,
            if so, the amount of time to wait between retry attempts.  These options also control the
            amount of time allowed for receiving messages and other interactions with the Service Bus service.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusClientOptions.EnableCrossEntityTransactions">
             <summary>
             Gets or sets a flag that indicates whether or not transactions may span multiple
             Service Bus entities.
             </summary>
            <value>
             <c>true</c>, when cross-entity transactions are enabled; <c>false</c> when
             transactions are not being used or should be limited to a single entity.
            </value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusClientOptions.EnableTransportMetrics">
            <summary>
            Gets or sets whether or not to enable metrics for the associated <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> instance.
            If set to <value>true</value>, <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.GetTransportMetrics" /> can be called.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClientOptions.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClientOptions.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClientOptions.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusClientOptions.Clone">
             <summary>
               Creates a new copy of the current <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClientOptions" />, cloning its attributes into a new instance.
             </summary>
            
             <returns>A new copy of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClientOptions" />.</returns>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusTransportMetrics">
            <summary>
            A set of metrics that can be used to monitor communication between the client and service.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusTransportMetrics.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusTransportMetrics" /> class for mocking.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusTransportMetrics.LastHeartBeat">
            <summary>
            Gets the last time that a heartbeat was received from the Service Bus service. These heartbeats are sent from the
            service approximately every 30 seconds.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusTransportMetrics.LastConnectionOpen">
            <summary>
            Gets the last time that a connection was opened for the associated <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> instance.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusTransportMetrics.LastConnectionClose">
            <summary>
            Gets the last time that a connection was closed for the associated <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> instance. If the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" />
            was disposed, then this time will not be updated again. It may be updated multiple times if the close is initiated by the service.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Constants.EpochTime">
            Represents 00:00:00 UTC Thursday 1, January 1970.
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Core.BasicRetryPolicy">
             <summary>
               The default retry policy for the Service Bus client library, respecting the
               configuration specified as a set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusRetryOptions" />.
             </summary>
            
             <seealso cref="T:Azure.Messaging.ServiceBus.ServiceBusRetryOptions" />
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.BasicRetryPolicy.Options">
             <summary>
               The set of options responsible for configuring the retry
               behavior.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.BasicRetryPolicy.JitterFactor">
             <summary>
               The factor to apply to the base delay for use as a base jitter value.
             </summary>
            
             <value>This factor is used as the basis for random jitter to apply to the calculated retry duration.</value>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.BasicRetryPolicy.#ctor(Azure.Messaging.ServiceBus.ServiceBusRetryOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.Core.BasicRetryPolicy" /> class.
             </summary>
            
             <param name="retryOptions">The options which control the retry approach.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.BasicRetryPolicy.CalculateTryTimeout(System.Int32)">
             <summary>
               Calculates the amount of time to allow the current attempt for an operation to
               complete before considering it to be timed out.
             </summary>
            
             <param name="attemptCount">The number of total attempts that have been made, including the initial attempt before any retries.</param>
            
             <returns>The amount of time to allow for an operation to complete.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.BasicRetryPolicy.CalculateRetryDelay(System.Exception,System.Int32)">
             <summary>
               Calculates the amount of time to wait before another attempt should be made.
             </summary>
            
             <param name="lastException">The last exception that was observed for the operation to be retried.</param>
             <param name="attemptCount">The number of total attempts that have been made, including the initial attempt before any retries.</param>
            
             <returns>The amount of time to delay before retrying the associated operation; if <c>null</c>, then the operation is no longer eligible to be retried.</returns>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Core.CancellationTokenExtensions">
             <summary>
               The set of extensions for the <see cref="T:System.Threading.CancellationToken" />
               struct.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.CancellationTokenExtensions.ThrowIfCancellationRequested``1(System.Threading.CancellationToken)">
             <summary>
               Throws an exception of the requested type if cancellation has been requested
               of the <paramref name="instance" />.
             </summary>
            
             <typeparam name="T">The type of exception to throw; the type must have a parameterless constructor.</typeparam>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Core.ClientLibraryInformation">
             <summary>
               The set of information describing the active version of the
               client library.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.ClientLibraryInformation.Current">
             <summary>
               The current set of information.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.ClientLibraryInformation.Product">
             <summary>
               The name of the client library product.
              </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.ClientLibraryInformation.Version">
             <summary>
               The version of the client library.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.ClientLibraryInformation.Framework">
             <summary>
               The version of the framework on which the client library was
               built.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.ClientLibraryInformation.Platform">
             <summary>
              The name of the platform on which the client library is currently running.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.ClientLibraryInformation.UserAgent">
             <summary>
              The client library information, formatted in the standard form used by SDK
              user agents when interacting with Azure services.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.ClientLibraryInformation.EnumerateProperties">
             <summary>
               Enumerates the client library properties, normalizing the property names.
             </summary>
            
             <returns>An enumerable set of the properties, with name and value.</returns>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Core.ServiceBusRetryOptionsExtensions">
             <summary>
               The set of extension methods for the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusRetryOptions" />
               class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.ServiceBusRetryOptionsExtensions.Clone(Azure.Messaging.ServiceBus.ServiceBusRetryOptions)">
             <summary>
               Creates a new copy of the current <see cref="T:Azure.Messaging.ServiceBus.ServiceBusRetryOptions" />, cloning its attributes into a new instance.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
             <returns>A new copy of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusRetryOptions" />.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.ServiceBusRetryOptionsExtensions.ToRetryPolicy(Azure.Messaging.ServiceBus.ServiceBusRetryOptions)">
             <summary>
               Converts the options into a retry policy for use.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
             <returns>The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusRetryPolicy" /> represented by the options.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.ServiceBusRetryOptionsExtensions.IsEquivalentTo(Azure.Messaging.ServiceBus.ServiceBusRetryOptions,Azure.Messaging.ServiceBus.ServiceBusRetryOptions)">
             <summary>
               Compares retry options between two instances to determine if the
               instances represent the same set of options.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
             <param name="other">The other set of retry options to consider.</param>
            
             <returns><c>true</c>, if the two sets of options are structurally equivalent; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Core.TimeSpanExtensions">
             <summary>
               The set of extensions for the <see cref="T:System.TimeSpan" />
               class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TimeSpanExtensions.CalculateRemaining(System.TimeSpan,System.TimeSpan)">
             <summary>
               Calculates the duration remaining in a given period, with consideration to
               the amount of time that has already elapsed.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
             <param name="elapsed">The amount of time that has already elapsed.</param>
            
             <returns>The amount of time remaining in the time period.</returns>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Core.TransportClient">
             <summary>
               Provides an abstraction for generalizing an Service Bus entity client so that a dedicated instance may provide operations
               for a specific transport, such as AMQP or JMS.  It is intended that the public <see cref="T:Azure.Messaging.ServiceBus.ServiceBusConnection" /> employ
               a transport client via containment and delegate operations to it rather than understanding protocol-specific details
               for different transports.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.TransportClient.IsClosed">
             <summary>
               Indicates whether or not this client has been closed.
               </summary>
            
             <value>
               <c>true</c> if the client is closed; otherwise, <c>false</c>.
             </value>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.TransportClient.ServiceEndpoint">
             <summary>
               The endpoint for the Service Bus service to which the client is associated.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.TransportClient.TransportMetrics">
            <summary>
            The metrics related to the client.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportClient.CreateSender(System.String,Azure.Messaging.ServiceBus.ServiceBusRetryPolicy,System.String)">
             <summary>
               Creates a sender strongly aligned with the active protocol and transport,
               responsible for sending <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessage" /> to the entity.
             </summary>
             <param name="entityPath">The entity path to send the message to.</param>
             <param name="retryPolicy">The policy which governs retry behavior and try timeouts.</param>
             <param name="identifier">The identifier for the sender.</param>
            
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.Core.TransportSender" /> configured in the requested manner.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportClient.CreateRuleManager(System.String,Azure.Messaging.ServiceBus.ServiceBusRetryPolicy,System.String)">
             <summary>
               Creates a rule manager strongly aligned with the active protocol and transport,
               responsible for adding, removing and getting rules from the Service Bus subscription.
             </summary>
            
             <param name="subscriptionPath">The path of the Service Bus subscription to which the rule manager is bound.</param>
             <param name="retryPolicy">The policy which governs retry behavior and try timeouts.</param>
             <param name="identifier">The identifier for the rule manager.</param>
            
             <returns>A <see cref="T:Azure.Messaging.ServiceBus.Core.TransportRuleManager" /> configured in the requested manner.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportClient.CloseAsync(System.Threading.CancellationToken)">
             <summary>
               Closes the connection to the transport client instance.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportClient.DisposeAsync">
             <summary>
               Performs the task needed to clean up resources used by the client,
               including ensuring that the client itself has been closed.
             </summary>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.TransportConnectionScope.IsDisposed">
             <summary>
               Indicates whether this <see cref="T:Azure.Messaging.ServiceBus.Core.TransportConnectionScope" /> has been disposed.
             </summary>
            
             <value><c>true</c> if disposed; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.TransportConnectionScope.SessionTimeout">
             <summary>
               The recommended timeout to associate with the session.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportConnectionScope.Dispose">
            <summary>
            Disposes of the connection scope.
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Core.TransportMessageBatch">
             <summary>
               Provides an abstraction for generalizing a batch of messages so that a dedicated instance may provide operations
               for a specific transport, such as AMQP or JMS.  It is intended that the public <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessageBatch" /> employ
               a transport batch via containment and delegate operations to it rather than understanding protocol-specific details
               for different transports.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.TransportMessageBatch.MaxSizeInBytes">
             <summary>
               The maximum size allowed for the batch, in bytes.  This includes the messages in the batch as
               well as any overhead for the batch itself when sent to the Queue/Topic.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.TransportMessageBatch.SizeInBytes">
             <summary>
               The size of the batch, in bytes, as it will be sent to the Queue/Topic
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.TransportMessageBatch.Count">
             <summary>
               The count of messages contained in the batch.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportMessageBatch.TryAddMessage(Azure.Messaging.ServiceBus.ServiceBusMessage)">
             <summary>
               Attempts to add a message to the batch, ensuring that the size
               of the batch does not exceed its maximum.
             </summary>
            
             <param name="message">The message to attempt to add to the batch.</param>
            
             <returns><c>true</c> if the message was added; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportMessageBatch.Clear">
             <summary>
               Clears the batch, removing all messages and resetting the
               available size.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportMessageBatch.AsReadOnly``1">
             <summary>
               Represents the batch as an enumerable set of transport-specific
               representations of a message.
             </summary>
            
             <typeparam name="T">The transport-specific message representation being requested.</typeparam>
            
             <returns>The set of messages as an enumerable of the requested type.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportMessageBatch.Dispose">
             <summary>
               Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.ServiceBus.Core.TransportMessageBatch" />.
             </summary>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Core.TransportReceiver">
            <summary>
            Provides an abstraction for generalizing a message receiver so that a dedicated instance may provide operations
            for a specific transport, such as AMQP or JMS.  It is intended that the public <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> and <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> employ
            a transport receiver via containment and delegate operations to it rather than understanding protocol-specific details
            for different transports.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.TransportReceiver.IsClosed">
             <summary>
             Indicates whether or not this receiver has been closed.
             </summary>
            
             <value>
             <c>true</c> if the consumer is closed; otherwise, <c>false</c>.
             </value>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.TransportReceiver.SessionId">
             <summary>
            
             </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.TransportReceiver.SessionLockedUntil">
            <summary>
            The Session Id associated with the receiver.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportReceiver.ReceiveMessagesAsync(System.Int32,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Receives a set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> from the entity using <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> mode.
            </summary>
            <param name="maximumMessageCount">The maximum number of messages that will be received.</param>
            <param name="maxWaitTime">An optional <see cref="T:System.TimeSpan" /> specifying the maximum time to wait for the first message before returning an empty list if no messages have been received.
                If not specified, the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusRetryOptions.TryTimeout" /> will be used.</param>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            <returns>List of messages received. Returns an empty list if no message is found.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportReceiver.CloseAsync(System.Threading.CancellationToken)">
             <summary>
             Closes the connection to the transport consumer instance.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportReceiver.OpenLinkAsync(System.Threading.CancellationToken)">
            <summary>
            Opens an AMQP link for use with receiver operations.
            </summary>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportReceiver.CompleteAsync(System.Guid,System.Threading.CancellationToken)">
             <summary>
             Completes a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" />. This will delete the message from the service.
             </summary>
            
             <param name="lockToken">The lockToken of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to complete.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             This operation can only be performed on a message that was received by this receiver
             when <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportReceiver.DeferAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
             <summary> Indicates that the receiver wants to defer the processing for the message.</summary>
            
             <param name="lockToken">The lockToken of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to defer.</param>
             <param name="propertiesToModify">The properties of the message to modify while deferring the message.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             A lock token can be found in <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.LockTokenGuid" />,
             only when <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             In order to receive this message again in the future, you will need to save the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.SequenceNumber" />
             and receive it using ReceiveDeferredMessageBatchAsync(IEnumerable, CancellationToken).
             Deferring messages does not impact message's expiration, meaning that deferred messages can still expire.
             This operation can only be performed on messages that were received by this receiver.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportReceiver.PeekMessagesAsync(System.Nullable{System.Int64},System.Int32,System.Threading.CancellationToken)">
             <summary>
             Fetches the next batch of active messages without changing the state of the receiver or the message source.
             </summary>
            
             <param name="sequenceNumber">The sequence number from where to read the message.</param>
             <param name="messageCount">The maximum number of messages that will be fetched.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             The first call to PeekBatchBySequenceAsync(long, int, CancellationToken) fetches the first active message for this receiver. Each subsequent call
             fetches the subsequent message in the entity.
             Unlike a received message, peeked message will not have lock token associated with it, and hence it cannot be Completed/Abandoned/Deferred/Deadlettered/Renewed.
             Also, unlike <see cref="M:Azure.Messaging.ServiceBus.Core.TransportReceiver.ReceiveMessagesAsync(System.Int32,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" />, this method will fetch even Deferred messages (but not Deadlettered messages).
             </remarks>
             <returns></returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportReceiver.AbandonAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
             <summary>
             Abandons a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" />. This will make the message available again for processing.
             </summary>
            
             <param name="lockToken">The lock token of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to abandon.</param>
             <param name="propertiesToModify">The properties of the message to modify while abandoning the message.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             Abandoning a message will increase the delivery count on the message.
             This operation can only be performed on messages that were received by this receiver
             when <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportReceiver.DeadLetterAsync(System.Guid,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
             <summary>
             Moves a message to the dead-letter subqueue.
             </summary>
            
             <param name="lockToken">The lock token of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to dead-letter.</param>
             <param name="deadLetterReason">The reason for dead-lettering the message.</param>
             <param name="deadLetterErrorDescription">The error description for dead-lettering the message.</param>
             <param name="propertiesToModify">The properties of the message to modify while moving to subqueue.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             In order to receive a message from the dead-letter queue, you will need a new
             <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> with the corresponding path.
             You can use EntityNameHelper.FormatDeadLetterPath(string)"/&gt; to help with this.
             This operation can only be performed on messages that were received by this receiver
             when <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportReceiver.ReceiveDeferredMessagesAsync(System.Int64[],System.Threading.CancellationToken)">
            <summary>
            Receives a <see cref="T:System.Collections.Generic.IList`1" /> of deferred messages identified by <paramref name="sequenceNumbers" />.
            </summary>
            <param name="sequenceNumbers">A <see cref="T:System.Collections.Generic.IList`1" /> containing the sequence numbers to receive.</param>
            <param name="cancellationToken"></param>
            <returns>Messages identified by sequence number are returned.
            Throws if the messages have not been deferred.</returns>
            <seealso cref="M:Azure.Messaging.ServiceBus.Core.TransportReceiver.DeferAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)" />
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportReceiver.RenewMessageLockAsync(System.Guid,System.Threading.CancellationToken)">
             <summary>
             Renews the lock on the message. The lock will be renewed based on the setting specified on the queue.
             </summary>
             <returns>New lock token expiry date and time in UTC format.</returns>
            
             <param name="lockToken">Lock token associated with the message.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportReceiver.RenewSessionLockAsync(System.Threading.CancellationToken)">
             <summary>
             Renews the lock on the session specified by the <see cref="P:Azure.Messaging.ServiceBus.Core.TransportReceiver.SessionId" />. The lock will be renewed based on the setting specified on the entity.
             </summary>
            
             <returns>New lock token expiry date and time in UTC format.</returns>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportReceiver.GetStateAsync(System.Threading.CancellationToken)">
             <summary>
             Gets the session state.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The session state as <see cref="T:System.BinaryData" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportReceiver.SetStateAsync(System.BinaryData,System.Threading.CancellationToken)">
             <summary>
             Set a custom state on the session which can be later retrieved using <see cref="M:Azure.Messaging.ServiceBus.Core.TransportReceiver.GetStateAsync(System.Threading.CancellationToken)" />
             </summary>
            
             <param name="sessionState">A <see cref="T:System.BinaryData" /> of session state</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>This state is stored on Service Bus forever unless you set an empty state on it.</remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.TransportRuleManager.IsClosed">
             <summary>
             Indicates whether or not this rule manager has been closed.
             </summary>
            
             <value>
             <c>true</c> if the rule manager is closed; otherwise, <c>false</c>.
             </value>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportRuleManager.AddRuleAsync(Azure.Messaging.ServiceBus.Administration.RuleProperties,System.Threading.CancellationToken)">
             <summary>
             Adds a rule to the current subscription to filter the messages reaching from topic to the subscription.
             </summary>
            
             <param name="properties">The rule properties for the rule to add.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A task instance that represents the asynchronous add rule operation.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportRuleManager.RemoveRuleAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Removes the rule on the subscription identified by <paramref name="ruleName" />.
             </summary>
            
             <param name="ruleName">Name of the rule</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A task instance that represents the asynchronous remove rule operation.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportRuleManager.GetRulesAsync(System.Threading.CancellationToken)">
             <summary>
             Get all rules associated with the subscription.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>Returns a list of rules description</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportRuleManager.CloseAsync(System.Threading.CancellationToken)">
             <summary>
             Closes the connection to the transport rule manager instance.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Core.TransportSender">
             <summary>
               Provides an abstraction for generalizing an Service Bus entity Producer so that a dedicated instance may provide operations
               for a specific transport, such as AMQP or JMS.  It is intended that the public <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSender" /> employ
               a transport producer via containment and delegate operations to it rather than understanding protocol-specific details
               for different transports.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Core.TransportSender.IsClosed">
             <summary>
               Indicates whether or not this producer has been closed.
             </summary>
            
             <value>
               <c>true</c> if the producer is closed; otherwise, <c>false</c>.
             </value>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportSender.CreateMessageBatchAsync(Azure.Messaging.ServiceBus.CreateMessageBatchOptions,System.Threading.CancellationToken)">
             <summary>
               Creates a size-constraint batch to which <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessage" /> may be added using a try-based pattern.  If a message would
               exceed the maximum allowable size of the batch, the batch will not allow adding the message and signal that scenario using its
               return value.
            
               Because messages that would violate the size constraint cannot be added, publishing a batch will not trigger an exception when
               attempting to send the message to the Queue/Topic.
             </summary>
            
             <param name="options">The set of options to consider when creating this batch.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessageBatch" /> with the requested <paramref name="options" />.</returns>
            
             <seealso cref="M:Azure.Messaging.ServiceBus.Core.TransportSender.CreateMessageBatchAsync(Azure.Messaging.ServiceBus.CreateMessageBatchOptions,System.Threading.CancellationToken)" />
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportSender.SendAsync(System.Collections.Generic.IReadOnlyCollection{Azure.Messaging.ServiceBus.ServiceBusMessage},System.Threading.CancellationToken)">
             <summary>
               Sends a list of messages to the associated Service Bus entity using a batched approach.
               If the size of the messages exceed the maximum size of a single batch,
               an exception will be triggered and the send will fail. In order to ensure that the messages
               being sent will fit in a batch, use <see cref="M:Azure.Messaging.ServiceBus.Core.TransportSender.SendBatchAsync(Azure.Messaging.ServiceBus.ServiceBusMessageBatch,System.Threading.CancellationToken)" /> instead.
             </summary>
            
             <param name="messages">The list of messages to send.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportSender.SendBatchAsync(Azure.Messaging.ServiceBus.ServiceBusMessageBatch,System.Threading.CancellationToken)">
             <summary>
               Sends a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessageBatch" /> to the associated Queue/Topic.
             </summary>
            
             <param name="messageBatch">The set of messages to send.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportSender.ScheduleMessagesAsync(System.Collections.Generic.IReadOnlyCollection{Azure.Messaging.ServiceBus.ServiceBusMessage},System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="messages"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportSender.CancelScheduledMessagesAsync(System.Int64[],System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="sequenceNumbers"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportSender.CloseAsync(System.Threading.CancellationToken)">
             <summary>
               Closes the connection to the transport producer instance.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Core.TransportTypeExtensions">
             <summary>
               The set of extension methods for the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusTransportType" /> enumeration.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportTypeExtensions.GetUriScheme(Azure.Messaging.ServiceBus.ServiceBusTransportType)">
             <summary>
               Determines the URI scheme to be used for the given connection type.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
             <returns>The scheme that should be used for the given connection type when forming an associated URI.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Core.TransportTypeExtensions.IsWebSocketTransport(Azure.Messaging.ServiceBus.ServiceBusTransportType)">
             <summary>
               Determines whether the specified transport makes use of web sockets.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
             <returns><c>true</c> if the transport uses web sockets; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty">
             <summary>
               The set of well-known properties associated with Service Bus diagnostics.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.DiagnosticIdAttribute">
            <summary>The attribute which represents a unique identifier for the diagnostics context.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.ServiceContextAttribute">
            <summary>The attribute which represents the Azure service to associate with diagnostics information.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.EntityAttribute">
            <summary>The attribute which represents the Service Bus entity instance to associate with diagnostics information.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.EndpointAttribute">
            <summary>The attribute which represents the fully-qualified endpoint address of the Service Bus namespace to associate with diagnostics information.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.ServiceBusServiceContext">
            <summary>The value which identifies the Service Bus diagnostics context.</summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.MessageActivityName">
             <summary>
               The activity name associated with events.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.SendActivityName">
             <summary>
               The activity name associated with the send operation.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.ScheduleActivityName">
             <summary>
               The activity name associated with the schedule operation.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.CancelActivityName">
             <summary>
               The activity name associated with the cancel
               scheduled message operation.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.ReceiveActivityName">
             <summary>
               The activity name associated with the receive
               operation.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.ReceiveDeferredActivityName">
             <summary>
               The activity name associated with the receive
               operation.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.PeekActivityName">
             <summary>
               The activity name associated with the peek
               operation.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.AbandonActivityName">
             <summary>
               The activity name associated with the abandon
               operation.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.CompleteActivityName">
             <summary>
               The activity name associated with the complete
               operation.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.DeadLetterActivityName">
             <summary>
               The activity name associated with the dead letter
               operation.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.DeferActivityName">
             <summary>
               The activity name associated with the defer
               operation.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.RenewMessageLockActivityName">
             <summary>
               The activity name associated with the renew message lock
               operation.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.RenewSessionLockActivityName">
             <summary>
               The activity name associated with the renew session lock
               operation.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.GetSessionStateActivityName">
             <summary>
               The activity name associated with the get session state
               operation.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.SetSessionStateActivityName">
             <summary>
               The activity name associated with the set session state
               operation.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.ProcessMessageActivityName">
             <summary>
               The activity name associated with the get session state
               operation.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Diagnostics.DiagnosticProperty.ProcessSessionMessageActivityName">
             <summary>
               The activity name associated with the set session state
               operation.
             </summary>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Diagnostics.EntityScopeFactory">
             <summary>
               Enables diagnostics instrumentation to be applied to <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessage" />
               instances.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.ServiceBus.Diagnostics.EntityScopeFactory.DiagnosticNamespace">
            <summary>The namespace used for the Service Bus diagnostic scope.</summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Diagnostics.EntityScopeFactory.TryExtractDiagnosticId(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String@)">
             <summary>
               Extracts a diagnostic id from a message's properties.
             </summary>
            
             <param name="properties">The properties holding the diagnostic id.</param>
             <param name="id">The value of the diagnostics identifier assigned to the event. </param>
            
             <returns><c>true</c> if the event was contained the diagnostic id; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Diagnostics.EntityScopeFactory.TryExtractDiagnosticId(System.Collections.Generic.IDictionary{System.String,System.Object},System.String@)">
             <summary>
               Extracts a diagnostic id from a message's properties.
             </summary>
            
             <param name="properties">The properties holding the diagnostic id.</param>
             <param name="id">The value of the diagnostics identifier assigned to the event. </param>
            
             <returns><c>true</c> if the event was contained the diagnostic id; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource">
             <summary>
               Serves as an ETW event source for logging of information about
               Entity's client.
             </summary>
            
             <remarks>
               When defining Start/Complete tasks, it is highly recommended that the
               the CompleteEvent.Id must be exactly StartEvent.Id + 1.
             </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource.Log">
            <summary>
              Provides a singleton instance of the event source for callers to
              use for logging.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource.#ctor">
            <summary>
              Prevents an instance of the <see cref="T:Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource" /> class from being
              created outside the scope of the <see cref="P:Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource.Log" /> instance, as well as setting up the
              integration with AzureEventSourceListener.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource.AmqpLinkAuthorizationRefreshStart(System.String,System.String)">
             <summary>
               Indicates that refreshing authorization for an AMQP link has started.
             </summary>
            
             <param name="identifier">The name of the Entity that the link is associated with.</param>
             <param name="endpoint">The service endpoint that the link is bound to for communication.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource.AmqpLinkAuthorizationRefreshComplete(System.String,System.String)">
             <summary>
               Indicates that refreshing authorization for an AMQP link has completed.
             </summary>
            
             <param name="identifier">The name of the Entity that the link is associated with.</param>
             <param name="endpoint">The service endpoint that the link is bound to for communication.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource.AmqpLinkAuthorizationRefreshError(System.String,System.String,System.String)">
             <summary>
               Indicates that an exception was encountered while refreshing authorization for an AMQP link has started.
             </summary>
            
             <param name="identifier">The name of the Entity that the link is associated with.</param>
             <param name="endpoint">The service endpoint that the link is bound to for communication.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource.ClientCreateStart(System.Type,System.String,System.String)">
             <summary>
               Indicates that a client is being created, which may correspond to
               a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" />, <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSender" />,
               or <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" />.
             </summary>
            
             <param name="clientType">The type of client being created.</param>
             <param name="fullyQualifiedNamespace">The namespace for the client.</param>
             <param name="entityName">The entity name for the client.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource.ClientCreateComplete(System.Type,System.String)">
             <summary>
               Indicates that a client has been created, which may correspond to a
               <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" />, <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSender" />, or
               <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" />.
             </summary>
            
             <param name="clientType">The type of client being closed.</param>
             <param name="identifier">An identifier to associate with the client.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource.ClientCreateException(System.Type,System.String,System.String,System.Exception)">
             <summary>
               Indicates that an exception was encountered while creating
               <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" />, <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSender" />, or
               <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" />.
             </summary>
            
             <param name="clientType">The type of client being closed.</param>
             <param name="fullyQualifiedNamespace">The namespace for the client.</param>
             <param name="entityPath">The entity path for the client.</param>
             <param name="exception">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource.ClientCloseStart(System.Type,System.String)">
             <summary>
               Indicates that a client is closing, which may correspond to
               a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" />, <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSender" />,
               <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" />, or a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" />.
             </summary>
            
             <param name="clientType">The type of client being closed.</param>
             <param name="identifier">An identifier to associate with the client.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource.ClientCloseComplete(System.Type,System.String)">
             <summary>
               Indicates that a client has been closed, which may correspond to an <see cref="T:Azure.Messaging.ServiceBus.ServiceBusConnection" />,
               <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSender" />, <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" />, or <c>EventProcessorClient</c>.
             </summary>
            
             <param name="clientType">The type of client being closed.</param>
             <param name="identifier">An identifier to associate with the client.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource.ClientCloseException(System.Type,System.String,System.Exception)">
             <summary>
               Indicates that an exception was encountered while closing an <see cref="T:Azure.Messaging.ServiceBus.ServiceBusConnection" />,
               <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSender" />, <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" />, or <c>EventProcessorClient</c>.
             </summary>
            
             <param name="clientType">The type of client being closed.</param>
             <param name="identifier">An identifier to associate with the client.</param>
             <param name="exception">The message for the exception that occurred.</param>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.EntityNameFormatter">
            <summary>
            This class can be used to format the path for different Service Bus entity types.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.EntityNameFormatter.FormatEntityPath(System.String,Azure.Messaging.ServiceBus.SubQueue)">
            <summary>
            Formats the entity path for a receiver or processor taking into account whether using a SubQueue.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.EntityNameFormatter.FormatDeadLetterPath(System.String)">
            <summary>
            Formats the dead letter path for either a queue, or a subscription.
            </summary>
            <param name="entityPath">The name of the queue, or path of the subscription.</param>
            <returns>The path as a string of the dead letter entity.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.EntityNameFormatter.FormatSubQueuePath(System.String,System.String)">
            <summary>
            Formats the subqueue path for either a queue, or a subscription.
            </summary>
            <param name="entityPath">The name of the queue, or path of the subscription.</param>
            <param name="subQueueName"></param>
            <returns>The path as a string of the subqueue entity.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.EntityNameFormatter.FormatSubscriptionPath(System.String,System.String)">
            <summary>
            Formats the subscription path, based on the topic path and subscription name.
            </summary>
            <param name="topicPath">The name of the topic, including slashes.</param>
            <param name="subscriptionName">The name of the subscription.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.EntityNameFormatter.FormatRulePath(System.String,System.String,System.String)">
            <summary>
            Formats the rule path, based on the topic path, subscription name and rule name.
            </summary>
            <param name="topicPath">The name of the topic, including slashes.</param>
            <param name="subscriptionName">The name of the subscription.</param>
            <param name="ruleName">The name of the rule</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.EntityNameFormatter.FormatTransferDeadLetterPath(System.String)">
            <summary>
            Utility method that creates the name for the transfer dead letter receiver, specified by <paramref name="entityPath" />
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Primitives.StringUtility.FormatForUser(System.String,System.Object[])">
            <summary>
            Formats a string+parameters using CurrentCulture.
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.LinkCloseMode">
            <summary>
            The mode in which links will be closed.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.LinkCloseMode.Detach">
            <summary>
            The link will be detached when closing.
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusConnection">
            <summary>
              A connection to the Azure Service Bus service, enabling client communications with a specific
              Service Bus entity instance within a Service Bus namespace. There is a one-to-one correspondence
              between <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> and <see cref="T:Azure.Messaging.ServiceBus.ServiceBusConnection" /> instances.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusConnection.FullyQualifiedNamespace">
            <summary>
              The fully qualified Service Bus namespace that the connection is associated with.
              This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusConnection.IsClosed">
             <summary>
               Indicates whether or not this <see cref="T:Azure.Messaging.ServiceBus.ServiceBusConnection" /> has been closed.
             </summary>
            
             <value>
               <c>true</c> if the connection is closed; otherwise, <c>false</c>.
             </value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusConnection.EntityPath">
            <summary>
            The entity path that the connection is bound to.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusConnection.ServiceEndpoint">
            <summary>
              The endpoint for the Service Bus service to which the connection is associated.
              This is essentially the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusConnection.FullyQualifiedNamespace" /> but with
              the scheme included.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusConnection.TransportType">
            <summary>
            The transport type used for this connection.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusConnection.RetryOptions">
            <summary>
            The retry options associated with this connection.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusConnection.#ctor">
            <summary>
            Parameterless constructor to allow mocking.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusConnection.#ctor(System.String,Azure.Messaging.ServiceBus.ServiceBusClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusConnection" /> class.
             </summary>
            
             <param name="connectionString">The connection string to use for connecting to the Service Bus namespace.</param>
             <param name="options">A set of options to apply when configuring the connection.</param>
            
             <remarks>
               If the connection string is copied from the Service Bus entity itself, it will contain the name of the desired Service Bus entity,
               and can be used directly without passing the  name="entityName" /&gt;.  The name of the Service Bus entity should be
               passed only once, either as part of the connection string or separately.
             </remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusConnection.#ctor(System.String,Azure.AzureNamedKeyCredential,Azure.Messaging.ServiceBus.ServiceBusClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusConnection" /> class.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Service Bus namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="credential">The <see cref="T:Azure.AzureNamedKeyCredential" /> credential to use for authorization.  Access controls may be specified by the Service Bus namespace or the requested Service Bus entity, depending on Azure configuration.</param>
             <param name="options">A set of options to apply when configuring the connection.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusConnection.#ctor(System.String,Azure.AzureSasCredential,Azure.Messaging.ServiceBus.ServiceBusClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusConnection" /> class.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Service Bus namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="credential">The <see cref="T:Azure.AzureSasCredential" /> credential to use for authorization.  Access controls may be specified by the Service Bus namespace or the requested Service Bus entity, depending on Azure configuration.</param>
             <param name="options">A set of options to apply when configuring the connection.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusConnection.#ctor(System.String,Azure.Core.TokenCredential,Azure.Messaging.ServiceBus.ServiceBusClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusConnection" /> class.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Service Bus namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="credential">The Azure managed identity credential to use for authorization.  Access controls may be specified by the Service Bus namespace or the requested Service Bus entity, depending on Azure configuration.</param>
             <param name="options">A set of options to apply when configuring the connection.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusConnection.CloseAsync(System.Threading.CancellationToken)">
             <summary>
               Closes the connection to the Service Bus namespace and associated Service Bus entity.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusConnection.DisposeAsync">
             <summary>
               Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusConnection" />,
               including ensuring that the connection itself has been closed.
             </summary>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusConnection.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusConnection.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusConnection.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusConnection.CreateTransportClient(Azure.Messaging.ServiceBus.Authorization.ServiceBusTokenCredential,Azure.Messaging.ServiceBus.ServiceBusClientOptions)">
             <summary>
               Builds a Service Bus client specific to the protocol and transport specified by the
               requested connection type of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClientOptions" />.
             </summary>
            
             <param name="credential">The Azure managed identity credential to use for authorization.</param>
             <param name="options"></param>
            
             <returns>A client generalization specific to the specified protocol/transport to which operations may be delegated.</returns>
            
             <remarks>
               As an internal method, only basic sanity checks are performed against arguments.  It is
               assumed that callers are trusted and have performed deep validation.
            
               Parameters passed are also assumed to be owned by thee transport client and safe to mutate or dispose;
               creation of clones or otherwise protecting the parameters is assumed to be the purview of the caller.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusConnection.BuildConnectionResource(Azure.Messaging.ServiceBus.ServiceBusTransportType,System.String,System.String)">
             <summary>
               Builds the audience of the connection for use in the signature.
             </summary>
            
             <param name="transportType">The type of protocol and transport that will be used for communicating with the Service Bus service.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Service Bus namespace.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="entityName">The name of the specific entity to connect the client to.</param>
            
             <returns>The value to use as the audience of the signature.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusConnection.ThrowIfClosed">
            <summary>
            Throw an ObjectDisposedException if the object is Closing.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusConnection.CreateWithCredential``1(System.String,``0,Azure.Messaging.ServiceBus.ServiceBusClientOptions)">
             <summary>
               Creates an <see cref="T:Azure.Messaging.ServiceBus.ServiceBusConnection" /> based on the provided options and credential.
             </summary>
            
             <typeparam name="TCredential">The type of credential being used.</typeparam>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="credential">The credential to use for authorization.  This may be of type <see cref="T:Azure.Core.TokenCredential" />, <see cref="T:Azure.AzureSasCredential" />, or <see cref="T:Azure.AzureNamedKeyCredential" />.</param>
             <param name="options">A set of options to apply when configuring the connection.</param>
            
             <returns>The connection that was created.</returns>
            
             <remarks>
               Ownership of the connection is transferred to the caller.  The caller holds responsibility
               for closing the connection and other cleanup activities.
             </remarks>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusConnectionStringProperties">
             <summary>
               The set of properties that comprise a Service Bus connection string.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusConnectionStringProperties.FullyQualifiedNamespace">
             <summary>
               The fully qualified Service Bus namespace that the consumer is associated with.  This is likely
               to be similar to <c>{yournamespace}.servicebus.windows.net</c>.
             </summary>
            
             <value>The namespace of the Service Bus, as derived from the endpoint address of the connection string.</value>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusConnectionStringProperties.Endpoint">
             <summary>
               The endpoint to be used for connecting to the Service Bus namespace.
             </summary>
            
             <value>The endpoint address, including protocol, from the connection string.</value>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusConnectionStringProperties.EntityPath">
             <summary>
               The name of the specific Service Bus entity instance under the associated Service Bus namespace.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusConnectionStringProperties.SharedAccessKeyName">
             <summary>
               The name of the shared access key, either for the Service Bus namespace
               or the Service Bus entity.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusConnectionStringProperties.SharedAccessKey">
             <summary>
               The value of the shared access key, either for the Service Bus namespace
               or the Service Bus entity.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusConnectionStringProperties.SharedAccessSignature">
             <summary>
               The value of the fully-formed shared access signature, either for the Service Bus
               namespace or the Service Bus entity.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusConnectionStringProperties.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusConnectionStringProperties.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusConnectionStringProperties.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusConnectionStringProperties.ToConnectionString">
             <summary>
               Creates an Service Bus connection string based on this set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusConnectionStringProperties" />.
             </summary>
            
             <returns>
               A valid Service Bus connection string; depending on the specified property information, this may
               represent the namespace-level or Event Hub-level.
             </returns>
            
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusConnectionStringProperties.Parse(System.String)">
             <summary>
               Parses the specified Service Bus connection string into its component properties.
             </summary>
            
             <param name="connectionString">The connection string to parse.</param>
            
             <returns>The component properties parsed from the connection string.</returns>
            
             <exception cref="T:System.FormatException">The specified connection string was malformed and could not be parsed.</exception>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusException">
             <summary>
               Serves as a basis for exceptions produced within the Service Bus
               context.
             </summary>
            
             <seealso cref="T:System.Exception" />
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusException.IsTransient">
             <summary>
               Indicates whether an exception should be considered transient or final.
             </summary>
            
             <value><c>true</c> if the exception is likely transient; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason">
             <summary>
               The reason for the failure of an Service Bus operation that resulted
               in the exception.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusException.EntityPath">
             <summary>
               The name of the Service Bus to which the exception is associated.
             </summary>
            
             <value>The name of the Service Bus entity, if available; otherwise, <c>null</c>.</value>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusException.ProcessorErrorSource">
            <summary>
            Can be used to hold the processor error source when we rethrow exceptions.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusException.Message">
             <summary>
               Gets a message that describes the current exception.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusException.#ctor(System.String,Azure.Messaging.ServiceBus.ServiceBusFailureReason,System.String,System.Exception)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusException" /> class, using the <paramref name="reason" />
               to detect whether or not it should be transient.
             </summary>
            
             <param name="message">The error message that explains the reason for the exception.</param>
             <param name="reason">The reason for the failure that resulted in the exception.</param>
             <param name="entityPath">The name of the Service Bus entity to which the exception is associated.</param>
             <param name="innerException"></param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusException.#ctor(System.Boolean,System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusFailureReason,System.Exception)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusException" /> class.
             </summary>
            
             <param name="isTransient"><c>true</c> if the exception should be considered transient; otherwise, <c>false</c>.</param>
             <param name="message">The error message that explains the reason for the exception.</param>
             <param name="entityName">The name of the Service Bus entity to which the exception is associated.</param>
             <param name="reason">The reason for the failure that resulted in the exception.</param>
             <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusException.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusFailureReason">
            <summary>
            The set of well-known reasons for an Service Bus operation failure that was the cause of an exception.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.GeneralError">
            <summary>
            The exception was the result of a general error within the client library.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityNotFound">
            <summary>
            A Service Bus resource cannot be found by the Service Bus service.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageLockLost">
            <summary>
            The lock on the message is lost. Callers should call attempt to receive and process the message again.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageNotFound">
            <summary>
            The requested message was not found.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageSizeExceeded">
            <summary>
            A message is larger than the maximum size allowed for its transport.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityDisabled">
            <summary>
            The Messaging Entity is disabled. Enable the entity again using Portal.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.QuotaExceeded">
            <summary>
            The quota applied to an Service Bus resource has been exceeded while interacting with the Azure Service Bus service.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceBusy">
            <summary>
            The Azure Service Bus service reports that it is busy in response to a client request to perform an operation.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceTimeout">
            <summary>
            An operation or other request timed out while interacting with the Azure Service Bus service.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.ServiceCommunicationProblem">
            <summary>
            There was a general communications error encountered when interacting with the Azure Service Bus service.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionCannotBeLocked">
            <summary>
            The requested session cannot be locked.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost">
            <summary>
            The lock on the session has expired. Callers should request the session again.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessagingEntityAlreadyExists">
            <summary>
            An entity with the same name exists under the same namespace.
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusMessage">
            <summary>
            The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessage" /> is used to send data to Service Bus Queues and Topics.
            When receiving messages, the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> is used.
            </summary>
            <remarks>
            The message structure is discussed in detail in the
            <see href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads">product documentation</see>.
            </remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusMessage.#ctor">
            <summary>
            Creates a new message.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusMessage.#ctor(System.String)">
            <summary>
            Creates a new message from the specified string, using UTF-8 encoding.
            </summary>
            <param name="body">The payload of the message as a string.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusMessage.#ctor(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Creates a new message from the specified payload.
            </summary>
            <param name="body">The payload of the message in bytes.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusMessage.#ctor(System.BinaryData)">
            <summary>
            Creates a new message from the specified <see cref="T:System.BinaryData" /> instance.
            </summary>
            <param name="body">The payload of the message.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusMessage.#ctor(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage)">
            <summary>
            Creates a new message from the specified received message by copying the properties.
            </summary>
            <param name="receivedMessage">The received message to copy the data from.</param>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusMessage.Body">
            <summary>
            Gets or sets the body of the message.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusMessage.MessageId">
            <summary>
            Gets or sets the MessageId to identify the message.
            </summary>
            <remarks>
            The message identifier is an application-defined value that uniquely identifies the
            message and its payload. The identifier is a free-form string and can reflect a GUID
            or an identifier derived from the application context. If enabled, the
            <see href="https://docs.microsoft.com/azure/service-bus-messaging/duplicate-detection">duplicate detection</see>
            feature identifies and removes second and further submissions of messages with the
            same MessageId.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusMessage.PartitionKey">
            <summary>Gets or sets a partition key for sending a message to a partitioned entity.</summary>
            <value>The partition key. Maximum length is 128 characters.</value>
            <remarks>
            For <see href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-partitioning">partitioned entities</see>,
            setting this value enables assigning related messages to the same internal partition, so that submission sequence
            order is correctly recorded. The partition is chosen by a hash function over this value and cannot be chosen
            directly. For session-aware entities, the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.SessionId" /> property overrides this value.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusMessage.TransactionPartitionKey">
            <summary>Gets or sets a partition key for sending a message into an entity via a partitioned transfer queue.</summary>
            <value>The partition key. Maximum length is 128 characters. </value>
            <remarks>
            If a message is sent via a transfer queue in the scope of a transaction, this value selects the
            transfer queue partition: This is functionally equivalent to <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.PartitionKey" /> and ensures that
            messages are kept together and in order as they are transferred.
            See <see href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-transactions#transfers-and-send-via">Transfers and Send Via</see>.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusMessage.SessionId">
            <summary>Gets or sets the session identifier for a session-aware entity.</summary>
            <value>The session identifier. Maximum length is 128 characters.</value>
            <remarks>
            For session-aware entities, this application-defined value specifies the session
            affiliation of the message. Messages with the same session identifier are subject
            to summary locking and enable exact in-order processing and demultiplexing.
            For session-unaware entities, this value is ignored.
            See <see href="https://docs.microsoft.com/azure/service-bus-messaging/message-sessions">Message Sessions</see>.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusMessage.ReplyToSessionId">
            <summary>Gets or sets a session identifier augmenting the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.ReplyTo" /> address.</summary>
            <value>Session identifier. Maximum length is 128 characters.</value>
            <remarks>
            This value augments the ReplyTo information and specifies which SessionId should be set
            for the reply when sent to the reply entity.
            See <see href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation">Message Routing and Correlation</see>
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusMessage.TimeToLive">
            <summary>
            Gets or sets the message’s "time to live" value.
            </summary>
            <value>The message’s time to live value.</value>
            <remarks>
            This value is the relative duration after which the message expires.
            When not set explicitly, the assumed value is the DefaultTimeToLive for the respective queue or topic.
            A message-level <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.TimeToLive" /> value cannot be longer than the entity's DefaultTimeToLive
            setting and it is silently adjusted if it does.
            See <see href="https://docs.microsoft.com/azure/service-bus-messaging/message-expiration">Expiration</see>.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusMessage.CorrelationId">
            <summary>Gets or sets the a correlation identifier.</summary>
            <value>Correlation identifier.</value>
            <remarks>
            Allows an application to specify a context for the message for the purposes of correlation,
            for example reflecting the MessageId of a message that is being replied to.
            See <see href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation">Message Routing and Correlation</see>.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusMessage.Subject">
            <summary>Gets or sets an application specific subject.</summary>
            <value>The application specific subject.</value>
            <remarks>
            This property enables the application to indicate the purpose of the message to the receiver in a standardized
            fashion, similar to an email subject line. The mapped AMQP property is "subject".
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusMessage.To">
            <summary>Gets or sets the "to" address.</summary>
            <value>The "to" address.</value>
            <remarks>
            This property is reserved for future use in routing scenarios and presently ignored by the broker itself.
            Applications can use this value in rule-driven
            <see href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-auto-forwarding">auto-forward chaining</see> scenarios to indicate the
            intended logical destination of the message.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusMessage.ContentType">
            <summary>Gets or sets the content type descriptor.</summary>
            <value>RFC2045 Content-Type descriptor.</value>
            <remarks>
            Optionally describes the payload of the message, with a descriptor following the format of
            RFC2045, Section 5, for example "application/json".
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusMessage.ReplyTo">
            <summary>Gets or sets the address of an entity to send replies to.</summary>
            <value>The reply entity address.</value>
            <remarks>
            This optional and application-defined value is a standard way to express a reply path
            to the receiver of the message. When a sender expects a reply, it sets the value to the
            absolute or relative path of the queue or topic it expects the reply to be sent to.
            See <see href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation">Message Routing and Correlation</see>.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusMessage.ScheduledEnqueueTime">
            <summary>
            Gets or sets the date and time in UTC at which the message will be enqueued. This
            property returns the time in UTC; when setting the property, the supplied DateTime value must also be in UTC.
            </summary>
            <value>
            The scheduled enqueue time in UTC. This value is for delayed message sending.
            It is utilized to delay messages sending to a specific time in the future.
            </value>
            <remarks>
            Message enqueuing time does not mean that the message will be sent at the same time. It will get enqueued, but the actual sending time
            depends on the queue's workload and its state.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusMessage.AmqpMessage">
            <summary>
            Gets the raw Amqp message data that will be transmitted over the wire.
            This can be used to enable scenarios that require setting AMQP header, footer, property, or annotation
            data that is not exposed as top level properties in the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessage" />.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusMessage.GetRawAmqpMessage">
            <summary>
            Gets the raw Amqp message data that will be transmitted over the wire.
            This can be used to enable scenarios that require setting AMQP header, footer, property, or annotation
            data that is not exposed as top level properties in the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessage" />.
            </summary>
            <returns>The raw Amqp message.</returns>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusMessage.ApplicationProperties">
            <summary>
            Gets the application properties bag, which can be used for custom message metadata.
            </summary>
            <remarks>
            Only following value types are supported:
            byte, sbyte, char, short, ushort, int, uint, long, ulong, float, double, decimal,
            bool, Guid, string, Uri, DateTime, DateTimeOffset, TimeSpan
            </remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusMessage.ToString">
            <summary>Returns a string that represents the current message.</summary>
            <returns>The string representation of the current message.</returns>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusMessageState">
            <summary>Represents the message state of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /></summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusMessageState.Active">
            <summary>Specifies an active message state.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusMessageState.Deferred">
            <summary>Specifies a deferred message state.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusMessageState.Scheduled">
            <summary>Specifies the scheduled message state.</summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusModelFactory">
            <summary>
            This class contains methods to create certain ServiceBus models.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusModelFactory.ServiceBusReceivedMessage(System.BinaryData,System.String,System.String,System.String,System.String,System.String,System.TimeSpan,System.String,System.String,System.String,System.String,System.String,System.DateTimeOffset,System.Collections.Generic.IDictionary{System.String,System.Object},System.Guid,System.Int32,System.DateTimeOffset,System.Int64,System.String,System.Int64,System.DateTimeOffset)">
            <summary>
            Creates a new ServiceBusReceivedMessage instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusModelFactory.ServiceBusReceivedMessage(System.BinaryData,System.String,System.String,System.String,System.String,System.String,System.TimeSpan,System.String,System.String,System.String,System.String,System.String,System.DateTimeOffset,System.Collections.Generic.IDictionary{System.String,System.Object},System.Guid,System.Int32,System.DateTimeOffset,System.Int64,System.String,System.Int64,System.DateTimeOffset,Azure.Messaging.ServiceBus.ServiceBusMessageState)">
            <summary>
            Creates a new ServiceBusReceivedMessage instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusModelFactory.QueueProperties(System.String,System.TimeSpan,System.Int64,System.Boolean,System.Boolean,System.TimeSpan,System.TimeSpan,System.Boolean,System.TimeSpan,System.Int32,System.Boolean,Azure.Messaging.ServiceBus.Administration.EntityStatus,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Azure.Messaging.ServiceBus.Administration.QueueProperties" /> instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusModelFactory.QueueProperties(System.String,System.TimeSpan,System.Int64,System.Boolean,System.Boolean,System.TimeSpan,System.TimeSpan,System.Boolean,System.TimeSpan,System.Int32,System.Boolean,Azure.Messaging.ServiceBus.Administration.EntityStatus,System.String,System.String,System.String,System.Boolean,System.Int64)">
            <summary>
            Creates a new <see cref="T:Azure.Messaging.ServiceBus.Administration.QueueProperties" /> instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusModelFactory.TopicProperties(System.String,System.Int64,System.Boolean,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean,Azure.Messaging.ServiceBus.Administration.EntityStatus,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Azure.Messaging.ServiceBus.Administration.TopicProperties" /> instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusModelFactory.TopicProperties(System.String,System.Int64,System.Boolean,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean,Azure.Messaging.ServiceBus.Administration.EntityStatus,System.Boolean,System.Int64)">
            <summary>
            Creates a new <see cref="T:Azure.Messaging.ServiceBus.Administration.TopicProperties" /> instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusModelFactory.SubscriptionProperties(System.String,System.String,System.TimeSpan,System.Boolean,System.TimeSpan,System.TimeSpan,System.Boolean,System.Int32,System.Boolean,Azure.Messaging.ServiceBus.Administration.EntityStatus,System.String,System.String,System.String)">
            <summary>
            Creates a new <see cref="M:Azure.Messaging.ServiceBus.ServiceBusModelFactory.SubscriptionProperties(System.String,System.String,System.TimeSpan,System.Boolean,System.TimeSpan,System.TimeSpan,System.Boolean,System.Int32,System.Boolean,Azure.Messaging.ServiceBus.Administration.EntityStatus,System.String,System.String,System.String)" /> instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusModelFactory.RuleProperties(System.String,Azure.Messaging.ServiceBus.Administration.RuleFilter,Azure.Messaging.ServiceBus.Administration.RuleAction)">
            <summary>
            Creates a new <see cref="M:Azure.Messaging.ServiceBus.ServiceBusModelFactory.RuleProperties(System.String,Azure.Messaging.ServiceBus.Administration.RuleFilter,Azure.Messaging.ServiceBus.Administration.RuleAction)" /> instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusModelFactory.QueueRuntimeProperties(System.String,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.DateTimeOffset,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Creates a new <see cref="M:Azure.Messaging.ServiceBus.ServiceBusModelFactory.QueueRuntimeProperties(System.String,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.DateTimeOffset,System.DateTimeOffset,System.DateTimeOffset)" /> instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusModelFactory.TopicRuntimeProperties(System.String,System.Int64,System.Int64,System.Int32,System.DateTimeOffset,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Creates a new <see cref="M:Azure.Messaging.ServiceBus.ServiceBusModelFactory.TopicRuntimeProperties(System.String,System.Int64,System.Int64,System.Int32,System.DateTimeOffset,System.DateTimeOffset,System.DateTimeOffset)" /> instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusModelFactory.SubscriptionRuntimeProperties(System.String,System.String,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.DateTimeOffset,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Creates a new <see cref="M:Azure.Messaging.ServiceBus.ServiceBusModelFactory.SubscriptionRuntimeProperties(System.String,System.String,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.DateTimeOffset,System.DateTimeOffset,System.DateTimeOffset)" /> instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusModelFactory.ServiceBusMessageBatch(System.Int64,System.Collections.Generic.IList{Azure.Messaging.ServiceBus.ServiceBusMessage},Azure.Messaging.ServiceBus.CreateMessageBatchOptions,System.Func{Azure.Messaging.ServiceBus.ServiceBusMessage,System.Boolean})">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessageBatch" /> class.
             </summary>
            
             <param name="batchSizeBytes">The size, in bytes, that the batch should report; this is a static value and will not mutate as messages are added.</param>
             <param name="batchMessageStore">A list to which messages will be added when <see cref="M:Azure.Messaging.ServiceBus.ServiceBusMessageBatch.TryAddMessage(Azure.Messaging.ServiceBus.ServiceBusMessage)" /> calls are successful.</param>
             <param name="batchOptions">The set of options to consider when creating this batch.</param>
             <param name="tryAddCallback"> A function that will be invoked when <see cref="M:Azure.Messaging.ServiceBus.ServiceBusMessageBatch.TryAddMessage(Azure.Messaging.ServiceBus.ServiceBusMessage)" /> is called;
             the return of this callback represents the result of <see cref="M:Azure.Messaging.ServiceBus.ServiceBusMessageBatch.TryAddMessage(Azure.Messaging.ServiceBus.ServiceBusMessage)" />.
             If not provided, all events will be accepted into the batch.</param>
            
             <returns>The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessageBatch" /> instance that was created.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusModelFactory.ServiceBusTransportMetrics(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Creates a new <see cref="M:Azure.Messaging.ServiceBus.ServiceBusModelFactory.ServiceBusTransportMetrics(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" /> instance for mocking.
            </summary>
            <param name="lastHeartbeat">The last time that a heartbeat was received from the service.</param>
            <param name="lastConnectionOpen">The last time that a connection was opened.</param>
            <param name="lastConnectionClose">The last time that a connection was closed.</param>
            <returns></returns>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage">
            <summary>
            The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> is used to receive data from Service Bus Queues and Subscriptions.
            When sending messages, the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessage" /> is used.
            </summary>
            <remarks>
            The message structure is discussed in detail in the
            <see href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads">product documentation</see>.
            </remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.#ctor(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Creates a new message from the specified payload.
            </summary>
            <param name="body">The payload of the message represented as bytes.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.#ctor(Azure.Core.Amqp.AmqpAnnotatedMessage)">
            <summary>
            Creates a new message from the specified Amqp message.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.IsSettled">
            <summary>
            Indicates whether the user has settled the message as part of their callback.
            If they have done so, we will not autocomplete.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.AmqpMessage">
            <summary>
            Gets the raw Amqp message data that was transmitted over the wire.
            This can be used to enable scenarios that require reading AMQP header, footer, property, or annotation
            data that is not exposed as top level properties in the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" />.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.GetRawAmqpMessage">
            <summary>
            Gets the raw Amqp message data that was transmitted over the wire.
            This can be used to enable scenarios that require reading AMQP header, footer, property, or annotation
            data that is not exposed as top level properties in the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" />.
            </summary>
            <returns>The raw Amqp message.</returns>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.Body">
            <summary>
            Gets the body of the message.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.MessageId">
            <summary>
            Gets the MessageId to identify the message.
            </summary>
            <remarks>
               The message identifier is an application-defined value that uniquely identifies the
               message and its payload. The identifier is a free-form string and can reflect a GUID
               or an identifier derived from the application context. If enabled, the
               <a href="https://docs.microsoft.com/azure/service-bus-messaging/duplicate-detection">duplicate detection</a>
               feature identifies and removes second and further submissions of messages with the
               same MessageId.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.PartitionKey">
            <summary>Gets a partition key for sending a message to a partitioned entity.</summary>
            <value>The partition key. Maximum length is 128 characters.</value>
            <remarks>
               For <a href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-partitioning">partitioned entities</a>,
               setting this value enables assigning related messages to the same internal partition, so that submission sequence
               order is correctly recorded. The partition is chosen by a hash function over this value and cannot be chosen
               directly. For session-aware entities, the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.SessionId" /> property overrides this value.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.TransactionPartitionKey">
            <summary>Gets a partition key for sending a message into an entity via a partitioned transfer queue.</summary>
            <value>The partition key. Maximum length is 128 characters. </value>
            <remarks>
               If a message is sent via a transfer queue in the scope of a transaction, this value selects the
               transfer queue partition: This is functionally equivalent to <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.PartitionKey" /> and ensures that
               messages are kept together and in order as they are transferred.
               See <a href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-transactions#transfers-and-send-via">Transfers and Send Via</a>.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.SessionId">
            <summary>Gets the session identifier for a session-aware entity.</summary>
            <value>The session identifier. Maximum length is 128 characters.</value>
            <remarks>
               For session-aware entities, this application-defined value specifies the session
               affiliation of the message. Messages with the same session identifier are subject
               to summary locking and enable exact in-order processing and demultiplexing.
               For session-unaware entities, this value is ignored.
               See <a href="https://docs.microsoft.com/azure/service-bus-messaging/message-sessions">Message Sessions</a>.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.ReplyToSessionId">
            <summary>Gets a session identifier augmenting the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.ReplyTo" /> address.</summary>
            <value>Session identifier. Maximum length is 128 characters.</value>
            <remarks>
               This value augments the ReplyTo information and specifies which SessionId should be set
               for the reply when sent to the reply entity. See <a href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation">Message Routing and Correlation</a>
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.TimeToLive">
            <summary>
            Gets the message’s "time to live" value.
            </summary>
            <value>The message’s time to live value.</value>
            <remarks>
                This value is the relative duration after which the message expires, starting from the instant
                 the message has been accepted and stored by the broker, as captured in <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.EnqueuedTime" />.
                 When not set explicitly, the assumed value is the DefaultTimeToLive for the respective queue or topic.
                 A message-level <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.TimeToLive" /> value cannot be longer than the entity's DefaultTimeToLive
                 setting and it is silently adjusted if it does.
                 See <a href="https://docs.microsoft.com/azure/service-bus-messaging/message-expiration">Expiration</a>
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.CorrelationId">
            <summary>Gets the correlation identifier.</summary>
            <value>Correlation identifier.</value>
            <remarks>
               Allows an application to specify a context for the message for the purposes of correlation,
               for example reflecting the MessageId of a message that is being replied to.
               See <a href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation">Message Routing and Correlation</a>.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.Subject">
            <summary>Gets an application specific label.</summary>
            <value>The application specific label</value>
            <remarks>
              This property enables the application to indicate the purpose of the message to the receiver in a standardized
              fashion, similar to an email subject line. The mapped AMQP property is "subject".
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.To">
            <summary>Gets the "to" address.</summary>
            <value>The "to" address.</value>
            <remarks>
               This property is reserved for future use in routing scenarios and presently ignored by the broker itself.
                Applications can use this value in rule-driven
                <a href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-auto-forwarding">auto-forward chaining</a> scenarios to indicate the
                intended logical destination of the message.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.ContentType">
            <summary>Gets the content type descriptor.</summary>
            <value>RFC2045 Content-Type descriptor.</value>
            <remarks>
              Optionally describes the payload of the message, with a descriptor following the format of
              RFC2045, Section 5, for example "application/json".
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.ReplyTo">
            <summary>Gets the address of an entity to send replies to.</summary>
            <value>The reply entity address.</value>
            <remarks>
               This optional and application-defined value is a standard way to express a reply path
               to the receiver of the message. When a sender expects a reply, it sets the value to the
               absolute or relative path of the queue or topic it expects the reply to be sent to.
               See <a href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation">Message Routing and Correlation</a>.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.ScheduledEnqueueTime">
            <summary>Gets the date and time in UTC at which the message will be enqueued. This
            property returns the time in UTC; when setting the property, the supplied DateTime value must also be in UTC.</summary>
            <value>The scheduled enqueue time in UTC. This value is for delayed message sending.
            It is utilized to delay messages sending to a specific time in the future.</value>
            <remarks> Message enqueuing time does not mean that the message will be sent at the same time. It will get enqueued, but the actual sending time
            depends on the queue's workload and its state.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.ApplicationProperties">
            <summary>
            Gets the application properties bag, which can be used for custom message metadata.
            </summary>
            <remarks>
            Only the following value types are supported:
            byte, sbyte, char, short, ushort, int, uint, long, ulong, float, double, decimal,
            bool, Guid, string, Uri, DateTime, DateTimeOffset, TimeSpan
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.LockToken">
            <summary>
            Gets the lock token for the current message.
            </summary>
            <remarks>
              The lock token is a reference to the lock that is being held by the broker in ReceiveMode.PeekLock mode.
              Locks are used to explicitly settle messages as explained in the <a href="https://docs.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement">product documentation in more detail</a>.
              The token can also be used to pin the lock permanently through the <a href="https://docs.microsoft.com/azure/service-bus-messaging/message-deferral">Deferral API</a> and, with that, take the message out of the
              regular delivery state flow. This property is read-only.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.DeliveryCount">
            <summary>
            Get the current delivery count.
            </summary>
            <value>This value starts at 1.</value>
            <remarks>
               Number of deliveries that have been attempted for this message. The count is incremented when a message lock expires,
               or the message is explicitly abandoned by the receiver. This property is read-only.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.LockedUntil">
            <summary>Gets the date and time in UTC until which the message will be locked in the queue/subscription.</summary>
            <value>The date and time until which the message will be locked in the queue/subscription.</value>
            <remarks>
            	For messages retrieved under a lock (peek-lock receive mode, not pre-settled) this property reflects the UTC
                instant until which the message is held locked in the queue/subscription. When the lock expires, the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.DeliveryCount" />
                is incremented and the message is again available for retrieval. This property is read-only.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.SequenceNumber">
            <summary>Gets the unique number assigned to a message by Service Bus.</summary>
            <remarks>
                The sequence number is a unique 64-bit integer assigned to a message as it is accepted
                and stored by the broker and functions as its true identifier. For partitioned entities,
                the topmost 16 bits reflect the partition identifier. Sequence numbers monotonically increase.
                They roll over to 0 when the 48-64 bit range is exhausted. This property is read-only.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.DeadLetterSource">
            <summary>
            Gets the name of the queue or subscription that this message was enqueued on, before it was dead-lettered.
            </summary>
            <remarks>
            	Only set in messages that have been dead-lettered and subsequently auto-forwarded from the dead-letter queue
                to another entity. Indicates the entity in which the message was dead-lettered. This property is read-only.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.EnqueuedSequenceNumber">
            <summary>Gets the original sequence number of the message.</summary>
            <value>The enqueued sequence number of the message.</value>
            <remarks>
            For messages that have been auto-forwarded, this property reflects the sequence number
            that had first been assigned to the message at its original point of submission. This property is read-only.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.EnqueuedTime">
            <summary>Gets the date and time of the sent time in UTC.</summary>
            <value>The enqueue time in UTC. </value>
            <remarks>
               The UTC instant at which the message has been accepted and stored in the entity.
               This value can be used as an authoritative and neutral arrival time indicator when
               the receiver does not want to trust the sender's clock. This property is read-only.
            </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.ExpiresAt">
            <summary>Gets the date and time in UTC at which the message is set to expire.</summary>
            <value>The message expiration time in UTC. This property is read-only.</value>
            <exception cref="T:System.InvalidOperationException">If the message has not been received. For example if a new message was created but not yet sent and received.</exception>
            <remarks>
             The UTC instant at which the message is marked for removal and no longer available for retrieval
             from the entity due to expiration. Expiry is controlled by the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.TimeToLive" /> property
             and this property is computed from <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.EnqueuedTime" />+<see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.TimeToLive" /></remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.DeadLetterReason">
            <summary>
            Gets the dead letter reason for the message.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.DeadLetterErrorDescription">
            <summary>
            Gets the dead letter error description for the message.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.State">
            <summary>Gets the state of the message.</summary>
            <value>The state of the message. </value>
            <remarks>
               The state of the message can be Active, Deferred, or Scheduled. Deferred messages have Deferred state,
               scheduled messages have Scheduled state, all other messages have Active state.
            </remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.ToString">
            <summary>Returns a string that represents the current message.</summary>
            <returns>The string representation of the current message.</returns>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusRetryMode">
             <summary>
               The type of approach to apply when calculating the delay
               between retry attempts.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusRetryMode.Fixed">
            <summary>Retry attempts happen at fixed intervals; each delay is a consistent duration.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusRetryMode.Exponential">
            <summary>Retry attempts will delay based on a backoff strategy, where each attempt will increase the duration that it waits before retrying.</summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusRetryOptions">
            <summary>
               The set of options that can be specified to influence how
               retry attempts are made, and a failure is eligible to be retried.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusRetryOptions.Mode">
             <summary>
               The approach to use for calculating retry delays.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusRetryOptions.MaxRetries">
            <summary>
              The maximum number of retry attempts before considering the associated operation
              to have failed.
            </summary>
            <value>The default retry limit is 3.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the requested number of retries is not between 0 and 100 (inclusive).</exception>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusRetryOptions.Delay">
            <summary>
              The delay between retry attempts for a fixed approach or the delay
              on which to base calculations for a backoff-based approach.
            </summary>
            <value>The default delay is 0.8 seconds.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the requested delay is not between 1 millisecond and 5 minutes (inclusive).</exception>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusRetryOptions.MaxDelay">
            <summary>
              The maximum permissible delay between retry attempts.
            </summary>
            <value>The default maximum delay is 60 seconds.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the requested delay is negative.</exception>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusRetryOptions.TryTimeout">
             <summary>
               The maximum duration to wait for completion of a single attempt, whether the initial
               attempt or a retry.
             </summary>
            
             <value>The default timeout is 60 seconds.</value>
             <exception cref="T:System.ArgumentException">Occurs when the requested timeout is negative.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the requested timeout is not between <see cref="F:System.TimeSpan.Zero" /> and 1 hour (inclusive).</exception>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusRetryOptions.CustomRetryPolicy">
             <summary>
               A custom retry policy to be used in place of the individual option values.
             </summary>
            
             <remarks>
               When populated, this custom policy will take precedence over the individual retry
               options provided.
             </remarks>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusRetryPolicy">
             <summary>
               An abstract representation of a policy to govern retrying of messaging operations.
             </summary>
            
             <remarks>
               It is recommended that developers without advanced needs not implement custom retry
               policies but instead configure the default policy by specifying the desired set of
               retry options when creating one of the Service Bus clients.
             </remarks>
            
             <seealso cref="T:Azure.Messaging.ServiceBus.ServiceBusRetryOptions" />
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusRetryPolicy.Logger">
             <summary>
               The instance of <see cref="T:Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource" /> which can be mocked for testing.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusRetryPolicy.CalculateTryTimeout(System.Int32)">
             <summary>
               Calculates the amount of time to allow the current attempt for an operation to
               complete before considering it to be timed out.
             </summary>
            
             <param name="attemptCount">The number of total attempts that have been made, including the initial attempt before any retries.</param>
            
             <returns>The amount of time to allow for an operation to complete.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusRetryPolicy.CalculateRetryDelay(System.Exception,System.Int32)">
             <summary>
               Calculates the amount of time to wait before another attempt should be made.
             </summary>
            
             <param name="lastException">The last exception that was observed for the operation to be retried.</param>
             <param name="attemptCount">The number of total attempts that have been made, including the initial attempt before any retries.</param>
            
             <returns>The amount of time to delay before retrying the associated operation; if <c>null</c>, then the operation is no longer eligible to be retried.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusRetryPolicy.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusRetryPolicy.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusRetryPolicy.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusTransportType">
             <summary>
               Specifies the type of protocol and transport that will be used for communicating with
               Azure Service Bus.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusTransportType.AmqpTcp">
            <summary>The connection uses the AMQP protocol over TCP.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusTransportType.AmqpWebSockets">
            <summary>The connection uses the AMQP protocol over web sockets.</summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.SubQueue">
            <summary>
            Represents the possible system subqueues that can be received from.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.SubQueue.None">
            <summary>
            No subqueue, the queue itself will be received from.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.SubQueue.DeadLetter">
            <summary>
            The dead-letter subqueue contains messages that have been dead-lettered.
            <see href="https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-dead-letter-queues#moving-messages-to-the-dlq" />
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.SubQueue.TransferDeadLetter">
            <summary>
            The transfer dead-letter subqueue contains messages that have been dead-lettered when
            the following conditions apply:
            <list type="bullet">
            <item>
            <description>A message passes through more than four queues or topics that are chained together.</description>
            </item>
            <item>
            <description>The destination queue or topic is disabled or deleted.</description>
            </item>
            <item>
            <description>The destination queue or topic exceeds the maximum entity size.</description>
            </item>
            </list>
            <seealso href="https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-dead-letter-queues#dead-lettering-in-forwardto-or-sendvia-scenarios" />
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ProcessErrorEventArgs">
            <summary>
            Contains information about the entity whose processing threw an exception,
            as well as the exception that has been thrown.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessErrorEventArgs.#ctor(System.Exception,Azure.Messaging.ServiceBus.ServiceBusErrorSource,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ProcessErrorEventArgs" /> class.
             </summary>
            
             <param name="exception">The exception that triggered the call to the error event handler.</param>
             <param name="errorSource">The source associated with the error.</param>
             <param name="fullyQualifiedNamespace">The endpoint used when this exception occurred.</param>
             <param name="entityPath">The entity path used when this exception occurred.</param>
             <param name="cancellationToken">The processor's <see cref="T:System.Threading.CancellationToken" /> instance which will be cancelled
             in the event that <see cref="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.StopProcessingAsync(System.Threading.CancellationToken)" /> is called.</param>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ProcessErrorEventArgs.Exception">
            <summary>Gets the exception that triggered the call to the error event handler.</summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ProcessErrorEventArgs.ErrorSource">
             <summary>Gets the source associated with the error.</summary>
            
             <value>The source associated with the error.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ProcessErrorEventArgs.FullyQualifiedNamespace">
            <summary>Gets the namespace name associated with the error event.
            This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ProcessErrorEventArgs.EntityPath">
            <summary>Gets the entity path associated with the error event.</summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ProcessErrorEventArgs.CancellationToken">
            <summary>
            Gets the processor's <see cref="T:System.Threading.CancellationToken" /> instance which will be
            cancelled when <see cref="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.StopProcessingAsync(System.Threading.CancellationToken)" /> is called.
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ProcessMessageEventArgs">
            <summary>
            The <see cref="T:Azure.Messaging.ServiceBus.ProcessMessageEventArgs" /> contain event args that are specific
            to the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> that is being processed.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ProcessMessageEventArgs.Message">
            <summary>
            The received message to be processed.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ProcessMessageEventArgs.CancellationToken">
            <summary>
            The processor's <see cref="T:System.Threading.CancellationToken" /> instance which will be
            cancelled when <see cref="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.StopProcessingAsync(System.Threading.CancellationToken)" /> is called.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessMessageEventArgs.#ctor(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,Azure.Messaging.ServiceBus.ServiceBusReceiver,System.Threading.CancellationToken)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ProcessMessageEventArgs" /> class.
             </summary>
            
             <param name="message">The message to be processed.</param>
             <param name="receiver">The receiver instance that can be used to perform message settlement.</param>
             <param name="cancellationToken">The processor's <see cref="T:System.Threading.CancellationToken" /> instance which will be cancelled
             in the event that <see cref="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.StopProcessingAsync(System.Threading.CancellationToken)" /> is called.
             </param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessMessageEventArgs.#ctor(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,Azure.Messaging.ServiceBus.ReceiverManager,System.Threading.CancellationToken)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ProcessMessageEventArgs" /> class.
             </summary>
            
             <param name="message">The message to be processed.</param>
             <param name="manager">The receiver manager for these event args.</param>
             <param name="cancellationToken">The processor's <see cref="T:System.Threading.CancellationToken" /> instance which will be cancelled
             in the event that <see cref="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.StopProcessingAsync(System.Threading.CancellationToken)" /> is called.
             </param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessMessageEventArgs.AbandonMessageAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
             Abandons a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" />.This will make the message available again for immediate processing as the lock on the message held by the receiver will be released.
             </summary>
            
             <param name="message">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to abandon.</param>
             <param name="propertiesToModify">The properties of the message to modify while abandoning the message.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             Abandoning a message will increase the delivery count on the message.
             This operation can only be performed on messages that were received by this receiver
             when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               <list type="bullet">
                 <item>
                   <description>
                     The lock for the message has expired or the message has already been completed. This does not apply for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageLockLost" /> in this case.
                   </description>
                 </item>
                 <item>
                   <description>
                     The lock for the session has expired or the message has already been completed. This only applies for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
                   </description>
                 </item>
               </list>
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessMessageEventArgs.CompleteMessageAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.Threading.CancellationToken)">
            <summary>
             Completes a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" />. This will delete the message from the service.
             </summary>
             <param name="message">The message to complete.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             This operation can only be performed on a message that was received by this receiver
             when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               <list type="bullet">
                 <item>
                   <description>
                     The lock for the message has expired or the message has already been completed. This does not apply for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageLockLost" /> in this case.
                   </description>
                 </item>
                 <item>
                   <description>
                     The lock for the session has expired or the message has already been completed. This only applies for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
                   </description>
                 </item>
               </list>
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessMessageEventArgs.DeadLetterMessageAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             Moves a message to the dead-letter subqueue.
             </summary>
            
             <param name="message">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to dead-letter.</param>
             <param name="deadLetterReason">The reason for dead-lettering the message.</param>
             <param name="deadLetterErrorDescription">The error description for dead-lettering the message.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             In order to receive a message from the dead-letter queue or transfer dead-letter queue,
             set the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions.SubQueue" /> property to <see cref="F:Azure.Messaging.ServiceBus.SubQueue.DeadLetter" />
             or <see cref="F:Azure.Messaging.ServiceBus.SubQueue.TransferDeadLetter" /> when calling
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)" /> or
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)" />.
             This operation can only be performed when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               <list type="bullet">
                 <item>
                   <description>
                     The lock for the message has expired or the message has already been completed. This does not apply for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageLockLost" /> in this case.
                   </description>
                 </item>
                 <item>
                   <description>
                     The lock for the session has expired or the message has already been completed. This only applies for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
                   </description>
                 </item>
               </list>
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessMessageEventArgs.DeadLetterMessageAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
             Moves a message to the dead-letter subqueue.
             </summary>
            
             <param name="message">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to dead-letter.</param>
             <param name="propertiesToModify">The properties of the message to modify while moving to subqueue.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             In order to receive a message from the dead-letter queue or transfer dead-letter queue,
             set the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions.SubQueue" /> property to <see cref="F:Azure.Messaging.ServiceBus.SubQueue.DeadLetter" />
             or <see cref="F:Azure.Messaging.ServiceBus.SubQueue.TransferDeadLetter" /> when calling
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)" /> or
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)" />.
             This operation can only be performed when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               <list type="bullet">
                 <item>
                   <description>
                     The lock for the message has expired or the message has already been completed. This does not apply for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageLockLost" /> in this case.
                   </description>
                 </item>
                 <item>
                   <description>
                     The lock for the session has expired or the message has already been completed. This only applies for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
                   </description>
                 </item>
               </list>
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessMessageEventArgs.DeferMessageAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary> Indicates that the receiver wants to defer the processing for the message.</summary>
            
             <param name="message">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to defer.</param>
             <param name="propertiesToModify">The properties of the message to modify while deferring the message.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             In order to receive this message again in the future, you will need to save the
             <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.SequenceNumber" />
             and receive it using <see cref="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveDeferredMessageAsync(System.Int64,System.Threading.CancellationToken)" />.
             Deferring messages does not impact message's expiration, meaning that deferred messages can still expire.
             This operation can only be performed on messages that were received by this receiver.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               <list type="bullet">
                 <item>
                   <description>
                     The lock for the message has expired or the message has already been completed. This does not apply for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageLockLost" /> in this case.
                   </description>
                 </item>
                 <item>
                   <description>
                     The lock for the session has expired or the message has already been completed. This only applies for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
                   </description>
                 </item>
               </list>
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessMessageEventArgs.RenewMessageLockAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.Threading.CancellationToken)">
            <summary>
             Renews the lock on the message. The lock will be renewed based on the setting specified on the queue.
             </summary>
            
             <remarks>
             When a message is received in <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" /> mode, the message is locked on the server for this
             receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration).
             If processing of the message requires longer than this duration, the lock needs to be renewed.
             For each renewal, it resets the time the message is locked by the LockDuration set on the Entity.
             </remarks>
            
             <param name="message">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to renew the lock for.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               The lock for the message has expired or the message has already been completed.
               The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageLockLost" /> in this case.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessMessageEventArgs.GetReceiveActions">
            <summary>
            Gets a <see cref="T:Azure.Messaging.ServiceBus.ProcessorReceiveActions" /> instance which enables receiving additional messages within the scope of the current event.
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ProcessorReceiveActions">
            <summary>
            A set of receive-related actions that can be performed from the processor message callback.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessorReceiveActions.#ctor">
            <summary>
            For mocking.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessorReceiveActions.ReceiveMessagesAsync(System.Int32,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
             <summary>
             Receives a list of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> from the entity using <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" /> mode
             configured in <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.ReceiveMode" />, which defaults to PeekLock mode.
             This method doesn't guarantee to return exact `maxMessages` messages, even if there are `maxMessages` messages available in the queue or topic.
             Messages received using this method are subject to the behavior defined in the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.AutoCompleteMessages" />
             and <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.MaxAutoLockRenewalDuration" /> properties.
             </summary>
            
             <param name="maxMessages">The maximum number of messages that will be received.</param>
             <param name="maxWaitTime">An optional <see cref="T:System.TimeSpan" /> specifying the maximum time to wait for the first message before returning an empty list if no messages are available.
             If not specified, the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusRetryOptions.TryTimeout" /> will be used.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>List of messages received. Returns an empty list if no message is found.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessorReceiveActions.ReceiveDeferredMessagesAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
             <summary>
             Receives a list of deferred <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> identified by <paramref name="sequenceNumbers" />.
             Messages received using this method are subject to the behavior defined in the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.AutoCompleteMessages" />
             and <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.MaxAutoLockRenewalDuration" /> properties.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
             <param name="sequenceNumbers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the sequence numbers to receive.</param>
            
             <returns>Messages identified by sequence number are returned.
             Throws if the messages have not been deferred.</returns>
             <seealso cref="M:Azure.Messaging.ServiceBus.ProcessMessageEventArgs.DeferMessageAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)" />
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               The specified sequence number does not correspond to a message that has been deferred.
               The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageNotFound" /> in this case.
             </exception>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ProcessSessionEventArgs">
            <summary>
            The <see cref="T:Azure.Messaging.ServiceBus.ProcessSessionEventArgs" /> contain event args related to the session being processed.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ProcessSessionEventArgs.CancellationToken">
            <summary>
            A <see cref="T:System.Threading.CancellationToken" /> instance which will be
            cancelled when <see cref="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.StopProcessingAsync(System.Threading.CancellationToken)" />
            is called, or when the session lock has been lost.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ProcessSessionEventArgs.SessionId">
            <summary>
            The Session Id associated with the session being processed.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ProcessSessionEventArgs.SessionLockedUntil">
            <summary>
            Gets the <see cref="T:System.DateTimeOffset" /> that the current session is locked until.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessSessionEventArgs.#ctor(Azure.Messaging.ServiceBus.ServiceBusSessionReceiver,System.Threading.CancellationToken)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ProcessSessionEventArgs" /> class.
             </summary>
            
             <param name="receiver">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> that will be used for all settlement methods
             for the args.</param>
             <param name="cancellationToken">The processor's <see cref="T:System.Threading.CancellationToken" /> instance which will be cancelled in the event that <see cref="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.StopProcessingAsync(System.Threading.CancellationToken)" /> is called.
             </param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessSessionEventArgs.GetSessionStateAsync(System.Threading.CancellationToken)">
             <summary>
             Gets the session state.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="P:Azure.Messaging.ServiceBus.ProcessSessionEventArgs.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The session state as <see cref="T:System.BinaryData" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessSessionEventArgs.SetSessionStateAsync(System.BinaryData,System.Threading.CancellationToken)">
             <summary>
             Set a custom state on the session which can be later retrieved using <see cref="M:Azure.Messaging.ServiceBus.ProcessSessionEventArgs.GetSessionStateAsync(System.Threading.CancellationToken)" />
             </summary>
            
             <param name="sessionState">A <see cref="T:System.BinaryData" /> of session state</param>
             <param name="cancellationToken">An optional <see cref="P:Azure.Messaging.ServiceBus.ProcessSessionEventArgs.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>This state is stored on Service Bus forever unless you set an empty state on it.</remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs">
            <summary>
            The <see cref="T:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs" /> contain event args that
            are specific to the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> and session that
            is being processed.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs.Message">
            <summary>
            Gets the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to be processed.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs.CancellationToken">
            <summary>
            Gets the <see cref="T:System.Threading.CancellationToken" /> instance which
            will be cancelled when <see cref="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.StopProcessingAsync(System.Threading.CancellationToken)" />
            is called, or when the session lock has been lost, or if <see cref="M:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs.ReleaseSession" /> is called.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs.SessionId">
            <summary>
            Gets the Session Id associated with the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" />.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs.SessionLockedUntil">
            <summary>
            Gets the DateTime that the session corresponding to
            the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> is locked until.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs.#ctor(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,Azure.Messaging.ServiceBus.ServiceBusSessionReceiver,System.Threading.CancellationToken)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs" /> class.
             </summary>
            
             <param name="message">The current <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" />.</param>
             <param name="receiver">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> that will be used for all settlement methods
             for the args.</param>
             <param name="cancellationToken">The processor's <see cref="T:System.Threading.CancellationToken" /> instance which will be cancelled in the event that <see cref="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.StopProcessingAsync(System.Threading.CancellationToken)" /> is called.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs.GetSessionStateAsync(System.Threading.CancellationToken)">
            <summary>
             Gets the session state.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The session state as <see cref="T:System.BinaryData" />.</returns>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               The lock for the session has expired.
               The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs.SetSessionStateAsync(System.BinaryData,System.Threading.CancellationToken)">
            <summary>
             Set a custom state on the session which can be later retrieved using <see cref="M:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver.GetSessionStateAsync(System.Threading.CancellationToken)" />
             </summary>
            
             <param name="sessionState">A <see cref="T:System.BinaryData" /> of session state</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>This state is stored on Service Bus forever unless you set an empty state on it.</remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               The lock for the session has expired.
               The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs.AbandonMessageAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
             Abandons a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" />.This will make the message available again for immediate processing as the lock on the message held by the receiver will be released.
             </summary>
            
             <param name="message">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to abandon.</param>
             <param name="propertiesToModify">The properties of the message to modify while abandoning the message.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             Abandoning a message will increase the delivery count on the message.
             This operation can only be performed on messages that were received by this receiver
             when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               <list type="bullet">
                 <item>
                   <description>
                     The lock for the message has expired or the message has already been completed. This does not apply for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageLockLost" /> in this case.
                   </description>
                 </item>
                 <item>
                   <description>
                     The lock for the session has expired or the message has already been completed. This only applies for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
                   </description>
                 </item>
               </list>
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs.CompleteMessageAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.Threading.CancellationToken)">
            <summary>
             Completes a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" />. This will delete the message from the service.
             </summary>
             <param name="message">The message to complete.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             This operation can only be performed on a message that was received by this receiver
             when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               <list type="bullet">
                 <item>
                   <description>
                     The lock for the message has expired or the message has already been completed. This does not apply for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageLockLost" /> in this case.
                   </description>
                 </item>
                 <item>
                   <description>
                     The lock for the session has expired or the message has already been completed. This only applies for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
                   </description>
                 </item>
               </list>
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs.DeadLetterMessageAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             Moves a message to the dead-letter subqueue.
             </summary>
            
             <param name="message">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to dead-letter.</param>
             <param name="deadLetterReason">The reason for dead-lettering the message.</param>
             <param name="deadLetterErrorDescription">The error description for dead-lettering the message.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             In order to receive a message from the dead-letter queue or transfer dead-letter queue,
             set the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions.SubQueue" /> property to <see cref="F:Azure.Messaging.ServiceBus.SubQueue.DeadLetter" />
             or <see cref="F:Azure.Messaging.ServiceBus.SubQueue.TransferDeadLetter" /> when calling
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)" /> or
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)" />.
             This operation can only be performed when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               <list type="bullet">
                 <item>
                   <description>
                     The lock for the message has expired or the message has already been completed. This does not apply for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageLockLost" /> in this case.
                   </description>
                 </item>
                 <item>
                   <description>
                     The lock for the session has expired or the message has already been completed. This only applies for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
                   </description>
                 </item>
               </list>
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs.DeadLetterMessageAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
             Moves a message to the dead-letter subqueue.
             </summary>
            
             <param name="message">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to dead-letter.</param>
             <param name="propertiesToModify">The properties of the message to modify while moving to subqueue.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             In order to receive a message from the dead-letter queue or transfer dead-letter queue,
             set the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions.SubQueue" /> property to <see cref="F:Azure.Messaging.ServiceBus.SubQueue.DeadLetter" />
             or <see cref="F:Azure.Messaging.ServiceBus.SubQueue.TransferDeadLetter" /> when calling
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)" /> or
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)" />.
             This operation can only be performed when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               <list type="bullet">
                 <item>
                   <description>
                     The lock for the message has expired or the message has already been completed. This does not apply for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageLockLost" /> in this case.
                   </description>
                 </item>
                 <item>
                   <description>
                     The lock for the session has expired or the message has already been completed. This only applies for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
                   </description>
                 </item>
               </list>
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs.DeferMessageAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary> Indicates that the receiver wants to defer the processing for the message.</summary>
            
             <param name="message">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to defer.</param>
             <param name="propertiesToModify">The properties of the message to modify while deferring the message.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             In order to receive this message again in the future, you will need to save the
             <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.SequenceNumber" />
             and receive it using <see cref="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveDeferredMessageAsync(System.Int64,System.Threading.CancellationToken)" />.
             Deferring messages does not impact message's expiration, meaning that deferred messages can still expire.
             This operation can only be performed on messages that were received by this receiver.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               <list type="bullet">
                 <item>
                   <description>
                     The lock for the message has expired or the message has already been completed. This does not apply for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageLockLost" /> in this case.
                   </description>
                 </item>
                 <item>
                   <description>
                     The lock for the session has expired or the message has already been completed. This only applies for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
                   </description>
                 </item>
               </list>
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs.ReleaseSession">
            <summary>
            Releases the session that is being processed. No new receives will be initiated for the session before the
            session is closed. Any already received messages will still be delivered to the user message handler, and in-flight message handlers
            will be allowed to complete. Messages will still be completed automatically if <see cref="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions.AutoCompleteMessages" />
            is <c>true</c>.
            The session may end up being reopened for processing immediately after closing if there are messages remaining in the session (
            This depends on what other session messages may be in the queue or subscription).
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs.RenewSessionLockAsync(System.Threading.CancellationToken)">
            <summary>
             Renews the lock on the session specified by the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver.SessionId" />. The lock will be renewed based on the setting specified on the entity.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             <para>
             When you accept a session, the session is locked for this receiver by the service for a duration as specified during the Queue/Subscription creation.
             If processing of the session requires longer than this duration, the session-lock needs to be renewed.
             For each renewal, it resets the time the session is locked by the LockDuration set on the Entity.
             </para>
             <para>
             Renewal of session renews all the messages in the session as well. Each individual message need not be renewed.
             </para>
             </remarks>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               The lock for the session has expired.
               The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs.GetReceiveActions">
            <summary>
            Gets a <see cref="T:Azure.Messaging.ServiceBus.ProcessorReceiveActions" /> instance which enables receiving additional messages within the scope of the current event.
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ReceiverManager">
            <summary>
            Represents a single receiver instance that multiple tasks spawned by the
            <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> may be using to receive and process messages.
            The manager will delegate to the user provided callbacks and handle automatic
            locking of messages.
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusErrorSource">
            <summary>The source of the error when <see cref="T:Azure.Messaging.ServiceBus.ProcessErrorEventArgs" /> is raised.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusErrorSource.Complete">
            <summary>Message completion operation.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusErrorSource.Abandon">
            <summary>Message abandon operation.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusErrorSource.ProcessMessageCallback">
            <summary>Process message handler invocation.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusErrorSource.Receive">
            <summary>Message receive operation.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusErrorSource.RenewLock">
            <summary>Lock renewal operation.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusErrorSource.AcceptSession">
            <summary>Session start operation.</summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusErrorSource.CloseSession">
            <summary>Session close operation.</summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusProcessor">
            <summary>
            The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> provides an abstraction around a set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" />
            that allows using an event based model for processing received <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" />.
            It is constructed by calling <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateProcessor(System.String,Azure.Messaging.ServiceBus.ServiceBusProcessorOptions)" />.
            The message handler is specified with the <see cref="E:Azure.Messaging.ServiceBus.ServiceBusProcessor.ProcessMessageAsync" />
            property. The error handler is specified with the <see cref="E:Azure.Messaging.ServiceBus.ServiceBusProcessor.ProcessErrorAsync" /> property.
            To start processing after the handlers have been specified, call <see cref="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.StartProcessingAsync(System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusProcessor.FullyQualifiedNamespace">
            <summary>
            Gets the fully qualified Service Bus namespace that the receiver is associated with. This is likely
            to be similar to <c>{yournamespace}.servicebus.windows.net</c>.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusProcessor.EntityPath">
            <summary>
            Gets the path of the Service Bus entity that the processor is connected to, specific to the
            Service Bus namespace that contains it.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusProcessor.Identifier">
            <summary>
            Gets the ID to identify this processor. This can be used to correlate logs and exceptions.
            </summary>
            <remarks>Every new processor has a unique ID.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusProcessor.ReceiveMode">
            <summary>
            Gets the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessor.ReceiveMode" /> used to specify how messages are received. Defaults to PeekLock mode.
            </summary>
            <value>
            The receive mode is specified using <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.ReceiveMode" />
            and has a default mode of <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
            </value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusProcessor.IsSessionProcessor">
            <summary>
            Gets whether the processor is configured to process session entities.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusProcessor.PrefetchCount">
            <summary>
            Gets the number of messages that will be eagerly requested from Queues or Subscriptions
            during processing. This is intended to help maximize throughput by allowing the
            processor to receive from a local cache rather than waiting on a service request.
            </summary>
            <value>
            The prefetch count is specified using <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.PrefetchCount" />
            and has a default value of 0.
            </value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusProcessor.IsProcessing">
             <summary>
             Gets whether or not this processor is currently processing messages.
             </summary>
            
             <value>
             <c>true</c> if the processor is processing messages; otherwise, <c>false</c>.
             </value>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusProcessor.Connection">
            <summary>
              The active connection to the Azure Service Bus service, enabling client communications for metadata
              about the associated Service Bus entity and access to transport-aware consumers.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusProcessor.MaxConcurrentCalls">
            <summary>Gets the maximum number of concurrent calls to the
            <see cref="E:Azure.Messaging.ServiceBus.ServiceBusProcessor.ProcessMessageAsync" /> message handler the processor should initiate.
            </summary>
            <value>
            The number of maximum concurrent calls is specified using <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.MaxConcurrentCalls" />
            and has a default value of 1.
            </value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusProcessor.AutoCompleteMessages">
            <summary>
            Gets a value that indicates whether the processor should automatically
            complete messages after the message handler has completed processing. If the
            message handler triggers an exception, the message will not be automatically
            completed.
            </summary>
            <remarks>
            If the message handler triggers an exception and did not settle the message,
            then the message will be automatically abandoned, irrespective of <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessor.AutoCompleteMessages" />.
            </remarks>
            <value>
            The option to auto complete messages is specified using <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.AutoCompleteMessages" />
            and has a default value of <c>true</c>.
            </value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusProcessor.MaxAutoLockRenewalDuration">
            <summary>
            Gets the maximum duration within which the lock will be renewed automatically. This
            value should be greater than the longest message lock duration; for example, the LockDuration Property.
            </summary>
            <remarks>The message renew can continue for sometime in the background
            after completion of message and result in a few false MessageLockLostExceptions temporarily.</remarks>
            <value>
            The maximum duration for lock renewal is specified using <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.MaxAutoLockRenewalDuration" />
            and has a default value of 5 minutes.
            </value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusProcessor.Logger">
            <summary>
            The instance of <see cref="T:Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource" /> which can be mocked for testing.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusProcessor.IsClosed">
             <summary>
               Indicates whether or not this <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> has been closed.
             </summary>
            
             <value>
             <c>true</c> if the processor is closed; otherwise, <c>false</c>.
             </value>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.#ctor(Azure.Messaging.ServiceBus.ServiceBusConnection,System.String,System.Boolean,Azure.Messaging.ServiceBus.ServiceBusProcessorOptions,System.String[],System.Int32,System.Int32,Azure.Messaging.ServiceBus.ServiceBusSessionProcessor)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> class.
             </summary>
            
             <param name="connection">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusConnection" /> connection to use for communication with the Service Bus service.</param>
             <param name="entityPath">The queue name or subscription path to process messages from.</param>
             <param name="isSessionEntity">Whether or not the processor is associated with a session entity.</param>
             <param name="options">The set of options to use when configuring the processor.</param>
             <param name="sessionIds">An optional set of session Ids to limit processing to.
             Only applies if isSessionEntity is true.</param>
             <param name="maxConcurrentSessions">The max number of sessions that can be processed concurrently.
             Only applies if isSessionEntity is true.</param>
             <param name="maxConcurrentCallsPerSession">The max number of concurrent calls per session.
             Only applies if isSessionEntity is true.</param>
             <param name="sessionProcessor">If this is for a session processor, will contain the session processor instance.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> class for mocking.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.#ctor(Azure.Messaging.ServiceBus.ServiceBusClient,System.String,Azure.Messaging.ServiceBus.ServiceBusProcessorOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> class for use with derived types.
            </summary>
            <param name="client">The client instance to use for the processor.</param>
            <param name="queueName">The name of the queue to processor from.</param>
            <param name="options">The set of options to use when configuring the processor.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.#ctor(Azure.Messaging.ServiceBus.ServiceBusClient,System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusProcessorOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> class for use with derived types.
            </summary>
            <param name="client">The client instance to use for the processor.</param>
            <param name="topicName">The topic to create a processor for.</param>
            <param name="subscriptionName">The subscription to create a processor for.</param>
            <param name="options">The set of options to use when configuring the processor.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.GetHashCode">
             <summary>
             Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.ToString">
             <summary>
             Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="E:Azure.Messaging.ServiceBus.ServiceBusProcessor.ProcessMessageAsync">
            <summary>
            The handler responsible for processing messages received from the Queue
            or Subscription.
            Implementation is mandatory.
            </summary>
            <remarks>
            It is not recommended that the state of the processor be managed directly from within this handler; requesting to start or stop the processor may result in
            a deadlock scenario.
            </remarks>
        </member>
        <member name="E:Azure.Messaging.ServiceBus.ServiceBusProcessor.ProcessSessionMessageAsync">
            <summary>
            The handler responsible for processing messages received from the Queue
            or Subscription. Implementation is mandatory.
            </summary>
        </member>
        <member name="E:Azure.Messaging.ServiceBus.ServiceBusProcessor.ProcessErrorAsync">
            <summary>
            The handler responsible for processing unhandled exceptions thrown while
            this processor is running.
            Implementation is mandatory.
            </summary>
            <remarks>
            It is not recommended that the state of the processor be managed directly from within this handler; requesting to start or stop the processor may result in
            a deadlock scenario.
            </remarks>
        </member>
        <member name="E:Azure.Messaging.ServiceBus.ServiceBusProcessor.SessionInitializingAsync">
            <summary>
            Optional handler that can be set to be notified when a new session is about to be processed.
            </summary>
        </member>
        <member name="E:Azure.Messaging.ServiceBus.ServiceBusProcessor.SessionClosingAsync">
            <summary>
            Optional handler that can be set to be notified when a session is about to be closed for processing.
            This means that the most recent <see cref="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMessageAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" /> call timed out so there are currently no messages
            available to be received for the session.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.OnProcessMessageAsync(Azure.Messaging.ServiceBus.ProcessMessageEventArgs)">
            <summary>
            Invokes the process message event handler after a message has been received.
            This method can be overridden to raise an event manually for testing purposes.
            </summary>
            <param name="args">The event args containing information related to the message.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.OnProcessErrorAsync(Azure.Messaging.ServiceBus.ProcessErrorEventArgs)">
            <summary>
            Invokes the error event handler when an error has occurred during processing.
            This method can be overridden to raise an event manually for testing purposes.
            </summary>
            <param name="args">The event args containing information related to the error.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.StartProcessingAsync(System.Threading.CancellationToken)">
             <summary>
             Signals the processor to begin processing messages. Should this method be
             called while the processor is already running, an
             <see cref="T:System.InvalidOperationException" /> is thrown.
             </summary>
            
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to
             signal the request to cancel the start operation.  This won't affect the
             processor once it starts running.
             </param>
             <exception cref="T:System.InvalidOperationException">
               This can occur if the processor is already running. This can be checked via the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessor.IsProcessing" /> property.
               This can also occur if event handlers have not been specified for the <see cref="E:Azure.Messaging.ServiceBus.ServiceBusProcessor.ProcessMessageAsync" /> or
               the <see cref="E:Azure.Messaging.ServiceBus.ServiceBusProcessor.ProcessErrorAsync" /> events.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.StopProcessingAsync(System.Threading.CancellationToken)">
             <summary>
             Signals the processor to stop processing messaging. Should this method be
             called while the processor is not running, no action is taken. This method
             will not close the underlying receivers, but will cause the receivers to stop
             receiving. To close the underlying receivers, <see cref="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.CloseAsync(System.Threading.CancellationToken)" /> should be called.
             </summary>
            
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to
             signal the request to cancel the stop operation. If the operation is successfully
             canceled, the processor will keep running.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.EnsureNotRunningAndInvoke(System.Action)">
             <summary>
             Invokes a specified action only if this <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> instance is not running.
             </summary>
            
             <param name="action">The action to invoke.</param>
            
             <exception cref="T:System.InvalidOperationException">Method is invoked while the event processor is running.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.CloseAsync(System.Threading.CancellationToken)">
            <summary>
              Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" />.
            </summary>
            <param name="cancellationToken"> An optional<see cref="T:System.Threading.CancellationToken" /> instance to signal the
            request to cancel the operation.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.DisposeAsync">
            <summary>
              Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" />.
              This is equivalent to calling <see cref="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.CloseAsync(System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.UpdateConcurrency(System.Int32)">
            <summary>
            Updates the concurrency for the processor. This method can be used to dynamically change the concurrency of a running processor.
            </summary>
            <param name="maxConcurrentCalls">The new max concurrent calls value. This will be reflected in the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessor.MaxConcurrentCalls" />
            property.</param>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions">
            <summary>
            The set of options that can be specified when creating a
            <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> to configure its behavior.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.PrefetchCount">
            <summary>
            Gets or sets the number of messages that will be eagerly requested
            from Queues or Subscriptions and queued locally, intended to help
            maximize throughput by allowing the processor to receive
            from a local cache rather than waiting on a service request.
            </summary>
            <value>The default value is 0.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
              A negative value is attempted to be set for the property.
            </exception>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.ReceiveMode">
             <summary>
             Gets or sets the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.ReceiveMode" /> used to specify how messages
             are received.
             </summary>
            
             <value>The mode to use for receiving messages. The default value is <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.AutoCompleteMessages">
             <summary>
             Gets or sets a value that indicates whether the processor
             should automatically complete messages after the <see cref="E:Azure.Messaging.ServiceBus.ServiceBusProcessor.ProcessMessageAsync" /> handler has
             completed processing. If the message handler triggers an exception, the message will not be automatically completed.
             </summary>
             <remarks>
             If the message handler triggers an exception and did not settle the message,
             then the message will be automatically abandoned, irrespective of <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.AutoCompleteMessages" />.
             </remarks>
            
             <value><c>true</c> to complete the message automatically on successful execution of the message handler; otherwise, <c>false</c>.
             The default value is <c>true</c>.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.MaxAutoLockRenewalDuration">
             <summary>
             Gets or sets the maximum duration within which the lock will be renewed automatically. This
             value should be greater than the longest message lock duration; for example, the LockDuration Property.
             </summary>
            
             <value>The maximum duration during which message locks are automatically renewed. The default value is 5 minutes.</value>
            
             <remarks>The message renew can continue for sometime in the background
             after completion of message and result in a few false MessageLockLostExceptions temporarily.</remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">
               A negative value is attempted to be set for the property.
             </exception>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.MaxReceiveWaitTime">
            <summary>
            The maximum amount of time to wait for each Receive call using the processor's underlying receiver.
            If not specified, the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusRetryOptions.TryTimeout" /> will be used.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              A value that is not positive is attempted to be set for the property.
            </exception>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.MaxConcurrentCalls">
             <summary>Gets or sets the maximum number of concurrent calls to the
             message handler the processor should initiate.
             </summary>
            
             <value>The maximum number of concurrent calls to the message handler. The default value is 1.</value>
             <exception cref="T:System.ArgumentOutOfRangeException">
               A value that is not positive is attempted to be set for the property.
             </exception>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.SubQueue">
             <summary>
             Gets or sets the subqueue to connect the processor to.
             </summary>
            
             <value>The subqueue to connect the processor to. The default value is <see cref="F:Azure.Messaging.ServiceBus.SubQueue.None" />, meaning the processor will
             not connect to a subqueue.
             </value>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.Equals(System.Object)">
             <summary>
             Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.GetHashCode">
             <summary>
             Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.ToString">
             <summary>
             Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.Clone">
             <summary>
             Creates a new copy of the current <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions" />, cloning its attributes into a new instance.
             </summary>
            
             <returns>A new copy of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions" />.</returns>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor">
            <summary>
            The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" /> provides an abstraction around a set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> that
            allows using an event based model for processing received <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" />.
            It is constructed by calling <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateSessionProcessor(System.String,Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions)" />.
            The message handler is specified with the <see cref="E:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.ProcessMessageAsync" />
            property. The error handler is specified with the <see cref="E:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.ProcessErrorAsync" /> property.
            To start processing after the handlers have been specified, call <see cref="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.StartProcessingAsync(System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.InnerProcessor">
            <summary>
            The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusProcessor" /> that the session processor delegates to.
            This can be overriden for testing purposes.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.EntityPath">
            <summary>
            Gets the path of the Service Bus entity that the processor is connected to, specific to the
            Service Bus namespace that contains it.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.Identifier">
            <summary>
            Gets the ID to identify this processor. This can be used to correlate logs and exceptions.
            </summary>
            <remarks>Every new processor has a unique ID.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.ReceiveMode">
            <summary>
            Gets the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessor.ReceiveMode" /> used to specify how messages are received. Defaults to PeekLock mode.
            </summary>
            <value>
            The receive mode is specified using <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.ReceiveMode" />
            and has a default mode of <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
            </value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.PrefetchCount">
            <summary>
            Gets the number of messages that will be eagerly requested from Queues or Subscriptions
            during processing. This is intended to help maximize throughput by allowing the
            processor to receive from a local cache rather than waiting on a service request.
            </summary>
            <value>
            The prefetch count is specified using <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.PrefetchCount" />
            and has a default value of 0.
            </value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.IsProcessing">
            <summary>
             Gets whether or not this processor is currently processing messages.
             </summary>
            
             <value>
             <c>true</c> if the processor is processing messages; otherwise, <c>false</c>.
             </value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.AutoCompleteMessages">
            <summary>
            Gets a value that indicates whether the processor should automatically
            complete messages after the message handler has completed processing. If the
            message handler triggers an exception, the message will not be automatically
            completed.
            </summary>
            <remarks>
            If the message handler triggers an exception and did not settle the message,
            then the message will be automatically abandoned, irrespective of <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessor.AutoCompleteMessages" />.
            </remarks>
            <value>
            The option to auto complete messages is specified using <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.AutoCompleteMessages" />
            and has a default value of <c>true</c>.
            </value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.IsClosed">
             <summary>
               Indicates whether or not this <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" /> has been closed.
             </summary>
            
             <value>
               <c>true</c> if the processor is closed; otherwise, <c>false</c>.
             </value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.MaxAutoLockRenewalDuration">
             <summary>
             Gets the maximum duration within which the session lock will be
             renewed automatically.
             </summary>
            
             <value>The maximum duration during which session locks are automatically renewed.</value>
            
             <remarks>The session lock renewal can continue for sometime in the background
             after completion of message and result in a few false SessionLockLost exceptions temporarily.
             </remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.MaxConcurrentSessions">
            <summary>Gets the maximum number of sessions that will be processed concurrently by the processor.
            The default value is 8.</summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.MaxConcurrentCallsPerSession">
            <summary>
            Gets the maximum number of calls to the callback the processor will initiate per session.
            Thus the total number of callbacks will be equal to MaxConcurrentSessions * MaxConcurrentCallsPerSession.
            The default value is 1.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.FullyQualifiedNamespace">
            <summary>
            Gets the fully qualified Service Bus namespace that the receiver is associated with. This is likely
            to be similar to <c>{yournamespace}.servicebus.windows.net</c>.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.SessionIdleTimeout">
            <summary>
            Gets the maximum amount of time to wait for a message to be received for the
            currently active session. After this time has elapsed, the processor will close the session
            and attempt to process another session.
            If not specified, the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusRetryOptions.TryTimeout" /> will be used.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" /> class for mocking.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.#ctor(Azure.Messaging.ServiceBus.ServiceBusClient,System.String,Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" /> class for use with derived types.
            </summary>
            <param name="client">The client instance to use for the processor.</param>
            <param name="queueName">The queue to create a processor for.</param>
            <param name="options">The set of options to use when configuring the processor.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.#ctor(Azure.Messaging.ServiceBus.ServiceBusClient,System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" /> class for use with derived types.
            </summary>
            <param name="client">The client instance to use for the processor.</param>
            <param name="topicName">The topic to create a processor for.</param>
            <param name="subscriptionName">The subscription to create a processor for.</param>
            <param name="options">The set of options to use when configuring the processor.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.OnProcessSessionMessageAsync(Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs)">
            <summary>
            Invokes the process message event handler after a message has been received.
            This method can be overriden to raise an event manually for testing purposes.
            </summary>
            <param name="args">The event args containing information related to the session message.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.OnProcessErrorAsync(Azure.Messaging.ServiceBus.ProcessErrorEventArgs)">
            <summary>
            Invokes the error event handler when an error has occurred during processing.
            This method can be overridden to raise an event manually for testing purposes.
            </summary>
            <param name="args">The event args containing information related to the error.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.OnSessionInitializingAsync(Azure.Messaging.ServiceBus.ProcessSessionEventArgs)">
            <summary>
            Invokes the session open event handler when a new session is about to be processed.
            This method can be overriden to raise an event manually for testing purposes.
            </summary>
            <param name="args">The event args containing information related to the session.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.OnSessionClosingAsync(Azure.Messaging.ServiceBus.ProcessSessionEventArgs)">
            <summary>
            Invokes the session close event handler when a session is about to be closed for processing.
            This method can be overriden to raise an event manually for testing purposes.
            </summary>
            <param name="args">The event args containing information related to the session.</param>
        </member>
        <member name="E:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.ProcessMessageAsync">
            <summary>
            The handler responsible for processing messages received from the Queue or Subscription. Implementation is mandatory.
            </summary>
            <remarks>
            It is not recommended that the state of the processor be managed directly from within this handler; requesting to start or stop the processor may result in
            a deadlock scenario.
            </remarks>
        </member>
        <member name="E:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.ProcessErrorAsync">
            <summary>
            The handler responsible for processing unhandled exceptions thrown while this processor is running.
            Implementation is mandatory.
            </summary>
            <remarks>
            It is not recommended that the state of the processor be managed directly from within this handler; requesting to start or stop the processor may result in
            a deadlock scenario.
            </remarks>
        </member>
        <member name="E:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.SessionInitializingAsync">
            <summary>
            Optional handler that can be set to be notified when a new session is about to be processed.
            </summary>
            <remarks>
            It is not recommended that the state of the processor be managed directly from within this handler; requesting to start or stop the processor may result in
            a deadlock scenario.
            </remarks>
        </member>
        <member name="E:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.SessionClosingAsync">
            <summary>
            Optional handler that can be set to be notified when a session is about to be closed for processing.
            This means that the most recent <see cref="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMessageAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" /> call timed out, or
            that <see cref="M:Azure.Messaging.ServiceBus.ProcessSessionMessageEventArgs.ReleaseSession" /> was called in the <see cref="E:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.ProcessMessageAsync" /> handler.
            </summary>
            <remarks>
            It is not recommended that the state of the processor be managed directly from within this handler; requesting to start or stop the processor may result in
            a deadlock scenario.
            </remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.StartProcessingAsync(System.Threading.CancellationToken)">
            <summary>
             Signals the processor to begin processing messages. Should this method be
             called while the processor is already running, an
             <see cref="T:System.InvalidOperationException" /> is thrown.
             </summary>
            
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to
             signal the request to cancel the start operation.  This won't affect the
             processor once it starts running.
             </param>
             <exception cref="T:System.InvalidOperationException">
               This can occur if the processor is already running. This can be checked via the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessor.IsProcessing" /> property.
               This can also occur if event handlers have not been specified for the <see cref="E:Azure.Messaging.ServiceBus.ServiceBusProcessor.ProcessMessageAsync" /> or
               the <see cref="E:Azure.Messaging.ServiceBus.ServiceBusProcessor.ProcessErrorAsync" /> events.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.StopProcessingAsync(System.Threading.CancellationToken)">
            <summary>
             Signals the processor to stop processing messaging. Should this method be
             called while the processor is not running, no action is taken. This method
             will not close the underlying receivers, but will cause the receivers to stop
             receiving. To close the underlying receivers, <see cref="M:Azure.Messaging.ServiceBus.ServiceBusProcessor.CloseAsync(System.Threading.CancellationToken)" /> should be called.
             </summary>
            
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to
             signal the request to cancel the stop operation. If the operation is successfully
             canceled, the processor will keep running.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.GetHashCode">
             <summary>
             Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.ToString">
             <summary>
             Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.CloseAsync(System.Threading.CancellationToken)">
            <summary>
              Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" />.
            </summary>
            <param name="cancellationToken"> An optional<see cref="T:System.Threading.CancellationToken" /> instance to signal the
            request to cancel the operation.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.DisposeAsync">
            <summary>
              Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" />.
              This is equivalent to calling <see cref="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.CloseAsync(System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.UpdateConcurrency(System.Int32,System.Int32)">
            <summary>
            Updates the concurrency for the processor. This method can be used to dynamically change the concurrency of a running processor.
            </summary>
            <param name="maxConcurrentSessions">The new max concurrent sessions value. This will be reflected in the
            <see cref="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.MaxConcurrentSessions" />property.</param>
            <param name="maxConcurrentCallsPerSession">The new max concurrent calls per session value. This will be reflect in the
            <see cref="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.MaxConcurrentCallsPerSession" />.</param>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions">
            <summary>
            The set of options that can be specified when creating a
            <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" /> to configure its behavior.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions.PrefetchCount">
            <summary>
            Gets or sets the number of messages that will be eagerly requested
            from Queues or Subscriptions and queued locally, intended to help
            maximize throughput by allowing the processor to receive
            from a local cache rather than waiting on a service request.
            </summary>
            <value>The default value is 0.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
              A negative value is attempted to be set for the property.
            </exception>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions.ReceiveMode">
            <summary>
             Gets or sets the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusProcessorOptions.ReceiveMode" /> used to specify how messages
             are received.
             </summary>
            
             <value>The mode to use for receiving messages. The default value is <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions.AutoCompleteMessages">
             <summary>Gets or sets a value that indicates whether the processor
             should automatically complete messages after the <see cref="E:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.ProcessMessageAsync" />
             handler has completed processing. If the message handler triggers an exception,
             the message will not be automatically completed.
             </summary>
             <remarks>
             If the message handler triggers an exception and did not settle the message,
             then the message will be automatically abandoned, irrespective of <see cref="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions.AutoCompleteMessages" />.
             </remarks>
            
             <value><c>true</c> to complete the message automatically on successful execution of the message handler; otherwise, <c>false</c>.
             The default value is <c>true</c>.</value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions.MaxAutoLockRenewalDuration">
             <summary>
             Gets or sets the maximum duration within which the session lock will be renewed automatically. This value
             should be greater than the queue's LockDuration Property.
             </summary>
            
             <value>The maximum duration during which session locks are automatically renewed. The default value is 5 minutes.</value>
             <remarks>The session lock renewal can continue for sometime in the background
             after completion of message and result in a few false SessionLockLost exceptions temporarily.</remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">
               A negative value is attempted to be set for the property.
             </exception>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions.SessionIdleTimeout">
             <summary>
             Gets or sets the maximum amount of time to wait for a message to be received for the
             currently active session. After this time has elapsed, the processor will close the session
             and attempt to process another session.
             If not specified, the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusRetryOptions.TryTimeout" /> will be used.
             </summary>
            
             <remarks>
             If <see cref="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions.SessionIds" /> is populated and <see cref="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions.MaxConcurrentSessions" /> is greater or equal to
             the number of sessions specified in <see cref="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions.SessionIds" />, the session will not be closed when the idle timeout elapses.
             However, it will still control the amount of time each receive call waits.
             </remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">
               A value that is not positive is attempted to be set for the property.
             </exception>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions.MaxConcurrentSessions">
             <summary>
             Gets or sets the maximum number of sessions that can be processed concurrently by the processor.
             </summary>
            
             <value>The maximum number of concurrent sessions to process. The default value is 8.</value>
             <exception cref="T:System.ArgumentOutOfRangeException">
               A value that is not positive is attempted to be set for the property.
             </exception>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions.MaxConcurrentCallsPerSession">
             <summary>
             Gets or sets the maximum number of concurrent calls to the message handler the processor should initiate per session.
             Thus the total number of concurrent calls will be equal to MaxConcurrentSessions * MaxConcurrentCallsPerSession.
             The default value is 1.
             </summary>
            
             <value>The maximum number of concurrent calls to the message handler for each session that is being processed.</value>
             <exception cref="T:System.ArgumentOutOfRangeException">
               A value that is not positive is attempted to be set for the property.
             </exception>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions.SessionIds">
            <summary>
            Gets an optional list of session IDs to scope
            the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" /> to. If the list is
            left empty, the processor will not be limited to any specific
            session IDs.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions.Equals(System.Object)">
             <summary>
             Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions.GetHashCode">
             <summary>
             Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessorOptions.ToString">
             <summary>
             Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.SessionReceiverManager">
            <summary>
            Represents a thread-safe abstraction around a single session receiver that threads spawned
            by the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor" /> use to receive and process messages.
            If <see cref="P:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.MaxConcurrentCallsPerSession" /> &gt; 1, there may be
            multiple threads using the same <see cref="T:Azure.Messaging.ServiceBus.SessionReceiverManager" />. The manager will delegate
            to the user provided callbacks and handle automatic locking of sessions.
            The receiver instance will only be closed when no other threads are using it, or when the user
            has called <see cref="M:Azure.Messaging.ServiceBus.ServiceBusSessionProcessor.StopProcessingAsync(System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode">
            <summary>
            The mode in which to receive messages.
            </summary>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock">
             <summary>
             Once a message is received in this mode, the receiver has a lock on the message for a
             particular duration. If the message is not settled by this time, it lands back on Service Bus
             to be fetched by the next receive operation.
             </summary>
            
             <remarks>This is the default value for <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiveMode" />, and should be used for guaranteed delivery.</remarks>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.ReceiveAndDelete">
            <summary>
            ReceiveAndDelete will delete the message from Service Bus as soon as the message is delivered.
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusReceiver">
            <summary>
            The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> is responsible for receiving
            <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> and settling messages from Queues and Subscriptions.
            It is constructed by calling <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)" />.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.FullyQualifiedNamespace">
            <summary>
            The fully qualified Service Bus namespace that the receiver is associated with.  This is likely
            to be similar to <c>{yournamespace}.servicebus.windows.net</c>.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.EntityPath">
            <summary>
            The path of the Service Bus entity that the receiver is connected to, specific to the
            Service Bus namespace that contains it.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode">
            <summary>
            The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> used to specify how messages are received.
            </summary>
            <value>
            The option to auto complete messages is specified when creating the receiver
            using <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions.ReceiveMode" /> and has a default mode of
            <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
            </value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.IsSessionReceiver">
            <summary>
            Indicates whether the receiver entity is session enabled.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.PrefetchCount">
            <summary>
            The number of messages that will be eagerly requested from Queues or Subscriptions and queued locally without regard to
            whether a processing is currently active, intended to help maximize throughput by allowing the receiver to receive
            from a local cache rather than waiting on a service request
            </summary>
            <value>
            The option to auto complete messages is specified when creating the receiver
            using <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions.PrefetchCount" /> and has a default value of 0.
            </value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.Identifier">
            <summary>
            Gets the ID to identify this client. This can be used to correlate logs and exceptions.
            </summary>
            <remarks>Every new client has a unique ID.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.IsClosed">
             <summary>
               Indicates whether or not this <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> has been closed.
             </summary>
            
             <value>
             <c>true</c> if the receiver is closed; otherwise, <c>false</c>.
             </value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.InnerReceiver">
            <summary>
            An abstracted Service Bus transport-specific receiver that is associated with the
            Service Bus entity gateway; intended to perform delegated operations.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ScopeFactory">
            <summary>
            Responsible for creating entity scopes.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.Logger">
             <summary>
               The instance of <see cref="T:Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource" /> which can be mocked for testing.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.#ctor(Azure.Messaging.ServiceBus.ServiceBusConnection,System.String,System.Boolean,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions,System.String,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> class.
             </summary>
            
             <param name="connection">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusConnection" /> connection to use for communication with the Service Bus service.</param>
             <param name="entityPath"></param>
             <param name="isSessionEntity"></param>
             <param name="options">A set of options to apply when configuring the consumer.</param>
             <param name="sessionId">An optional session Id to scope the receiver to. If not specified,
                 the next available session returned from the service will be used.</param>
             <param name="isProcessor">Whether or not the receiver is being created for a processor.</param>
             <param name="cancellationToken">The cancellation token to use when opening the receiver link.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> class for mocking.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.#ctor(Azure.Messaging.ServiceBus.ServiceBusClient,System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> class for use with derived types.
            </summary>
            <param name="client">The client instance to use for the receiver.</param>
            <param name="queueName">The name of the queue to receive from.</param>
            <param name="options">The set of options to use when configuring the receiver.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.#ctor(Azure.Messaging.ServiceBus.ServiceBusClient,System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> class for use with derived types.
            </summary>
            <param name="client">The client instance to use for the receiver.</param>
            <param name="topicName">The topic to create a receiver for.</param>
            <param name="subscriptionName">The subscription to create a receiver for.</param>
            <param name="options">The set of options to use when configuring the receiver.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.CloseAsync(System.Threading.CancellationToken)">
            <summary>
              Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" />.
            </summary>
            <param name="cancellationToken"> An optional<see cref="T:System.Threading.CancellationToken" /> instance to signal the
            request to cancel the operation.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMessagesAsync(System.Int32,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
             <summary>
             Receives a list of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> from the entity using <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> mode.
             <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> defaults to PeekLock mode.
             This method doesn't guarantee to return exact `maxMessages` messages,
             even if there are `maxMessages` messages available in the queue or topic.
             </summary>
            
             <param name="maxMessages">The maximum number of messages that will be received.</param>
             <param name="maxWaitTime">An optional <see cref="T:System.TimeSpan" /> specifying the maximum time to wait for the first message before returning an empty list if no messages are available.
             If not specified, the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusRetryOptions.TryTimeout" /> will be used.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>List of messages received. Returns an empty list if no message is found.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMessagesAsync(System.Threading.CancellationToken)">
            <summary>
            Receives messages as an asynchronous enumerable from the entity using <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> mode.
            <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> defaults to PeekLock mode. Messages will be received from the entity as
            the IAsyncEnumerable is iterated. If no messages are available, this method will continue polling
            until messages are available, i.e. it will never return null.
            </summary>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the
            request to cancel the operation.</param>
            <returns>The message received.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMessageAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
             <summary>
             Receives a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> from the entity using <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> mode.
             <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> defaults to PeekLock mode.
             </summary>
             <param name="maxWaitTime">An optional <see cref="T:System.TimeSpan" /> specifying the maximum time to wait for a message before returning
             null if no messages are available.
             If not specified, the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusRetryOptions.TryTimeout" /> will be used.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the
             operation.</param>
            
             <returns>The message received. Returns null if no message is found.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.PeekMessageAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
             <summary>
             Fetches the next active <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> without changing the state of the receiver or the message source.
             </summary>
             <param name="fromSequenceNumber">An optional sequence number from where to peek the
             message. This corresponds to the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.SequenceNumber" />.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the
             operation.</param>
            
             <remarks>
             The first call to <see cref="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.PeekMessageAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)" /> fetches the first active message for this receiver. Each subsequent call fetches the subsequent message in the entity.
             Unlike a received message, a peeked message will not have a lock token associated with it, and hence it cannot be Completed/Abandoned/Deferred/Deadlettered/Renewed.
             Also, unlike <see cref="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMessageAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" />, this method will fetch even Deferred messages (but not Deadlettered message).
             </remarks>
            
             <returns>The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> that represents the next message to be read. Returns null when nothing to peek.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.PeekMessagesAsync(System.Int32,System.Nullable{System.Int64},System.Threading.CancellationToken)">
             Fetches a list of active messages without changing the state of the receiver or the message source.
            
             <param name="maxMessages">The maximum number of messages that will be fetched.</param>
             <param name="fromSequenceNumber">An optional sequence number from where to peek the
             message. This corresponds to the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.SequenceNumber" />.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel
             the operation.</param>
            
             <remarks>
             Unlike a received message, a peeked message will not have a lock token associated with it, and hence it cannot be
             Completed/Abandoned/Deferred/Deadlettered/Renewed.
             Also, unlike <see cref="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMessageAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" />, this method will fetch even Deferred messages (but not Deadlettered messages).
             </remarks>
            
             <returns>An <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> of messages that were peeked.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.OpenLinkAsync(System.Threading.CancellationToken)">
            <summary>
            Opens an AMQP link for use with receiver operations.
            </summary>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.CompleteMessageAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.Threading.CancellationToken)">
             <summary>
             Completes a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" />. This will delete the message from the service.
             </summary>
             <param name="message">The message to complete.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             This operation can only be performed on a message that was received by this receiver
             when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               <list type="bullet">
                 <item>
                   <description>
                     The lock for the message has expired or the message has already been completed. This does not apply for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageLockLost" /> in this case.
                   </description>
                 </item>
                 <item>
                   <description>
                     The lock for the session has expired or the message has already been completed. This only applies for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
                   </description>
                 </item>
               </list>
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.CompleteMessageAsync(System.Guid,System.Threading.CancellationToken)">
             <summary>
             Completes a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" />. This will delete the message from the service.
             </summary>
            
             <param name="lockToken">The lock token of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> message to complete.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             This operation can only be performed on a message that was received by this receiver
             when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.AbandonMessageAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
             <summary>
             Abandons a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" />.This will make the message available again for immediate processing as the lock on the message held by the receiver will be released.
             </summary>
            
             <param name="message">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to abandon.</param>
             <param name="propertiesToModify">The properties of the message to modify while abandoning the message.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             Abandoning a message will increase the delivery count on the message.
             This operation can only be performed on messages that were received by this receiver
             when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               <list type="bullet">
                 <item>
                   <description>
                     The lock for the message has expired or the message has already been completed. This does not apply for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageLockLost" /> in this case.
                   </description>
                 </item>
                 <item>
                   <description>
                     The lock for the session has expired or the message has already been completed. This only applies for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
                   </description>
                 </item>
               </list>
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.AbandonMessageAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
             <summary>
             Abandons a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" />. This will make the message available again for processing.
             </summary>
            
             <param name="lockToken">The lock token <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to abandon.</param>
             <param name="propertiesToModify">The properties of the message to modify while abandoning the message.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             Abandoning a message will increase the delivery count on the message.
             This operation can only be performed on messages that were received by this receiver
             when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.DeadLetterMessageAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
             <summary>
             Moves a message to the dead-letter subqueue.
             </summary>
            
             <param name="message">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to dead-letter.</param>
             <param name="propertiesToModify">The properties of the message to modify while moving to subqueue.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             In order to receive a message from the dead-letter queue or transfer dead-letter queue,
             set the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions.SubQueue" /> property to <see cref="F:Azure.Messaging.ServiceBus.SubQueue.DeadLetter" />
             or <see cref="F:Azure.Messaging.ServiceBus.SubQueue.TransferDeadLetter" /> when calling
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)" /> or
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)" />.
             This operation can only be performed when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               <list type="bullet">
                 <item>
                   <description>
                     The lock for the message has expired or the message has already been completed. This does not apply for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageLockLost" /> in this case.
                   </description>
                 </item>
                 <item>
                   <description>
                     The lock for the session has expired or the message has already been completed. This only applies for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
                   </description>
                 </item>
               </list>
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.DeadLetterMessageAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
             <summary>
             Moves a message to the dead-letter subqueue.
             </summary>
            
             <param name="lockToken">The lock token of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to dead-letter.</param>
             <param name="propertiesToModify">The properties of the message to modify while moving to subqueue.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             In order to receive a message from the dead-letter queue or transfer dead-letter queue,
             set the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions.SubQueue" /> property to <see cref="F:Azure.Messaging.ServiceBus.SubQueue.DeadLetter" />
             or <see cref="F:Azure.Messaging.ServiceBus.SubQueue.TransferDeadLetter" /> when calling
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)" /> or
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)" />.
             This operation can only be performed when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.DeadLetterMessageAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             Moves a message to the dead-letter subqueue.
             </summary>
            
             <param name="message">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to dead-letter.</param>
             <param name="deadLetterReason">The reason for dead-lettering the message.</param>
             <param name="deadLetterErrorDescription">The error description for dead-lettering the message.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             In order to receive a message from the dead-letter queue or transfer dead-letter queue,
             set the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions.SubQueue" /> property to <see cref="F:Azure.Messaging.ServiceBus.SubQueue.DeadLetter" />
             or <see cref="F:Azure.Messaging.ServiceBus.SubQueue.TransferDeadLetter" /> when calling
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)" /> or
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateReceiver(System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusReceiverOptions)" />.
             This operation can only be performed when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             </remarks>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               <list type="bullet">
                 <item>
                   <description>
                     The lock for the message has expired or the message has already been completed. This does not apply for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageLockLost" /> in this case.
                   </description>
                 </item>
                 <item>
                   <description>
                     The lock for the session has expired or the message has already been completed. This only applies for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
                   </description>
                 </item>
               </list>
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.DeadLetterMessageAsync(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             Moves a message to the dead-letter subqueue.
             </summary>
            
             <param name="lockToken">The lock token of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to dead-letter.</param>
             <param name="deadLetterReason">The reason for dead-lettering the message.</param>
             <param name="deadLetterErrorDescription">The error description for dead-lettering the message.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             A lock token can be found in <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.LockTokenGuid" />,
             only when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             In order to receive a message from the dead-letter queue, you will need a new <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" />, with the corresponding path.
             You can use EntityNameHelper.FormatDeadLetterPath(string) to help with this.
             This operation can only be performed on messages that were received by this receiver.
             </remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.DeferMessageAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
             <summary> Indicates that the receiver wants to defer the processing for the message.</summary>
            
             <param name="message">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to defer.</param>
             <param name="propertiesToModify">The properties of the message to modify while deferring the message.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             In order to receive this message again in the future, you will need to save the
             <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.SequenceNumber" />
             and receive it using <see cref="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveDeferredMessageAsync(System.Int64,System.Threading.CancellationToken)" />.
             Deferring messages does not impact message's expiration, meaning that deferred messages can still expire.
             This operation can only be performed on messages that were received by this receiver.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               <list type="bullet">
                 <item>
                   <description>
                     The lock for the message has expired or the message has already been completed. This does not apply for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageLockLost" /> in this case.
                   </description>
                 </item>
                 <item>
                   <description>
                     The lock for the session has expired or the message has already been completed. This only applies for session-enabled entities.
                     The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
                   </description>
                 </item>
               </list>
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.DeferMessageAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
             <summary> Indicates that the receiver wants to defer the processing for the message.</summary>
            
             <param name="lockToken">The lockToken of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to defer.</param>
             <param name="propertiesToModify">The properties of the message to modify while deferring the message.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             A lock token can be found in <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.LockTokenGuid" />,
             only when <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveMode" /> is set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" />.
             In order to receive this message again in the future, you will need to save the
             <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.SequenceNumber" />
             and receive it using <see cref="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveDeferredMessageAsync(System.Int64,System.Threading.CancellationToken)" />.
             Deferring messages does not impact message's expiration, meaning that deferred messages can still expire.
             This operation can only be performed on messages that were received by this receiver.
             </remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveDeferredMessageAsync(System.Int64,System.Threading.CancellationToken)">
             <summary>
             Receives a deferred message identified by <paramref name="sequenceNumber" />.
             </summary>
            
             <param name="sequenceNumber">The sequence number of the message to receive. This corresponds to
             the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.SequenceNumber" />.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The deferred message identified by the specified sequence number.
             Throws if the message has not been deferred.</returns>
             <seealso cref="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.DeferMessageAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)" />
             <seealso cref="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.DeferMessageAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)" />
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               The specified sequence number does not correspond to a message that has been deferred.
               The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageNotFound" /> in this case.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.ReceiveDeferredMessagesAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
             <summary>
             Receives a list of deferred messages identified by <paramref name="sequenceNumbers" />.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
             <param name="sequenceNumbers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the sequence numbers to receive.</param>
            
             <returns>Messages identified by sequence number are returned.
             Throws if the messages have not been deferred.</returns>
             <seealso cref="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.DeferMessageAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)" />
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               The specified sequence number does not correspond to a message that has been deferred.
               The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageNotFound" /> in this case.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.RenewMessageLockAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.Threading.CancellationToken)">
             <summary>
             Renews the lock on the message. The lock will be renewed based on the setting specified on the queue.
             </summary>
            
             <remarks>
             When a message is received in <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" /> mode, the message is locked on the server for this
             receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration).
             If processing of the message requires longer than this duration, the lock needs to be renewed.
             For each renewal, it resets the time the message is locked by the LockDuration set on the Entity.
             </remarks>
            
             <param name="message">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to renew the lock for.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               The lock for the message has expired or the message has already been completed.
               The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageLockLost" /> in this case.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.RenewMessageLockAsync(System.Guid,System.Threading.CancellationToken)">
             <summary>
             Renews the lock on the message. The lock will be renewed based on the setting specified on the queue.
             </summary>
            
             <remarks>
             When a message is received in <see cref="F:Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock" /> mode, the message is locked on the server for this
             receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration).
             If processing of the message requires longer than this duration, the lock needs to be renewed.
             For each renewal, it resets the time the message is locked by the LockDuration set on the Entity.
             </remarks>
            
             <param name="lockToken">The lockToken of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" /> to renew the lock for.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.DisposeAsync">
             <summary>
             Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" />.
             This is equivalent to calling <see cref="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.CloseAsync(System.Threading.CancellationToken)" />.
             </summary>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.Equals(System.Object)">
             <summary>
             Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.GetHashCode">
             <summary>
             Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiver.ToString">
             <summary>
             Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions">
            <summary>
            The set of options that can be specified when creating a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" />
            to configure its behavior.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions.PrefetchCount">
            <summary>
            Gets or sets the number of messages that will be eagerly requested from Queues or Subscriptions and queued locally without regard to
            whether the receiver is actively receiving, intended to help maximize throughput by allowing the receiver to receive
            from a local cache rather than waiting on a service request.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              A negative value is attempted to be set for the property.
            </exception>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions.ReceiveMode">
            <summary>
            Gets or sets the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions.ReceiveMode" /> used to specify how messages are received. Defaults to PeekLock mode.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions.SubQueue">
            <summary>
            Gets or sets the subqueue to connect the receiver to. By default, the receiver will not connect to a subqueue.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions.Equals(System.Object)">
             <summary>
             Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions.GetHashCode">
             <summary>
             Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions.ToString">
             <summary>
             Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions.Clone">
             <summary>
             Creates a new copy of the current <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions" />, cloning its attributes into a new instance.
             </summary>
            
             <returns>A new copy of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiverOptions" />.</returns>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver">
            <summary>
            The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> is responsible for receiving <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage" />
             and settling messages from session-enabled Queues and Subscriptions. It is constructed by calling
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.AcceptNextSessionAsync(System.String,System.String,Azure.Messaging.ServiceBus.ServiceBusSessionReceiverOptions,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver.SessionId">
            <summary>
            The Session Id associated with the receiver.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver.SessionLockedUntil">
            <summary>
            Gets the <see cref="T:System.DateTimeOffset" /> that the receiver's session is locked until.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver.CreateSessionReceiverAsync(System.String,Azure.Messaging.ServiceBus.ServiceBusConnection,Azure.Messaging.ServiceBus.ServiceBusSessionReceiverOptions,System.String,System.Threading.CancellationToken,System.Boolean)">
             <summary>
             Creates a session receiver which can be used to interact with all messages with the same sessionId.
             </summary>
             <param name="entityPath">The name of the specific queue to associate the receiver with.</param>
             <param name="connection">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusConnection" /> connection to use for communication with the Service Bus service.</param>
             <param name="options">A set of options to apply when configuring the receiver.</param>
             <param name="sessionId">The Session Id to receive from or null to receive from the next available session.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
             <param name="isProcessor">True if called from the session processor.</param>
             <returns>Returns a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> class.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver.#ctor(Azure.Messaging.ServiceBus.ServiceBusConnection,System.String,Azure.Messaging.ServiceBus.ServiceBusSessionReceiverOptions,System.Threading.CancellationToken,System.String,System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusReceiver" /> class.
             </summary>
            
             <param name="connection">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusConnection" /> connection to use for communication with the Service Bus service.</param>
             <param name="entityPath"></param>
             <param name="options">A set of options to apply when configuring the consumer.</param>
             <param name="cancellationToken">The cancellation token to use when opening the receiver link.</param>
             <param name="sessionId">An optional session Id to receive from.</param>
             <param name="isProcessor"></param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" /> class for mocking.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver.GetSessionStateAsync(System.Threading.CancellationToken)">
             <summary>
             Gets the session state.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The session state as <see cref="T:System.BinaryData" />.</returns>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               The lock for the session has expired.
               The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver.SetSessionStateAsync(System.BinaryData,System.Threading.CancellationToken)">
             <summary>
             Set a custom state on the session which can be later retrieved using <see cref="M:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver.GetSessionStateAsync(System.Threading.CancellationToken)" />
             </summary>
            
             <param name="sessionState">A <see cref="T:System.BinaryData" /> of session state</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>This state is stored on Service Bus forever unless you set an empty state on it.</remarks>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               The lock for the session has expired.
               The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver.RenewSessionLockAsync(System.Threading.CancellationToken)">
             <summary>
             Renews the lock on the session specified by the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver.SessionId" />. The lock will be renewed based on the setting specified on the entity.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             <para>
             When you accept a session, the session is locked for this receiver by the service for a duration as specified during the Queue/Subscription creation.
             If processing of the session requires longer than this duration, the session-lock needs to be renewed.
             For each renewal, it resets the time the session is locked by the LockDuration set on the Entity.
             </para>
             <para>
             Renewal of session renews all the messages in the session as well. Each individual message need not be renewed.
             </para>
             </remarks>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               The lock for the session has expired.
               The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.SessionLockLost" /> in this case.
             </exception>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiverOptions">
            <summary>
            The set of options that can be specified when creating a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSessionReceiver" />
            to configure its behavior.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionReceiverOptions.PrefetchCount">
            <summary>
            Gets or sets the number of messages that will be eagerly requested from Queues or Subscriptions and queued locally without regard to
            whether the receiver is actively receiving, intended to help maximize throughput by allowing the receiver to receive
            from a local cache rather than waiting on a service request.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              A negative value is attempted to be set for the property.
            </exception>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSessionReceiverOptions.ReceiveMode">
            <summary>
            Gets or sets the <see cref="P:Azure.Messaging.ServiceBus.ServiceBusSessionReceiverOptions.ReceiveMode" /> used to specify how messages are received. Defaults to PeekLock mode.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionReceiverOptions.Equals(System.Object)">
             <summary>
             Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionReceiverOptions.GetHashCode">
             <summary>
             Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSessionReceiverOptions.ToString">
             <summary>
             Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.AmqpFieldSessionId">
            <summary>
              Looks up a localized string similar to Failed to retreive session ID from broker. Please retry..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.AmqpMessageSizeExceeded">
            <summary>
              Looks up a localized string similar to The received message (delivery-id:{0}, size:{1} bytes) exceeds the limit ({2} bytes) currently allowed on the link..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.ArgumentInvalidCombination">
            <summary>
              Looks up a localized string similar to The following arguments must all be provided or none at all: {0}..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.ArgumentMustBePositive">
            <summary>
              Looks up a localized string similar to The value of the argument {0} must be positive..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.ArgumentNullOrWhiteSpace">
            <summary>
              Looks up a localized string similar to The argument {0} is null or white space..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.ArgumentStringTooBig">
            <summary>
              Looks up a localized string similar to The argument '{0}' cannot exceed {1} characters..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.BrokeredMessageListIsNullOrEmpty">
            <summary>
              Looks up a localized string similar to There are no brokeredMessages supplied. Please make sure input messages are not empty..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.CannotLockMessageOnSessionEntity">
            <summary>
              Looks up a localized string similar to Messages cannot be locked when working with session-enabled entities. Locks are handled at the session level..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.CannotRegisterNonSessionEventHandlerWhenUsingSession">
            <summary>
              Looks up a localized string similar to When using a sessionful entity, the Session event handler must be used..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.CannotRegisterSessionEventHandlerWhenNotUsingSessions">
            <summary>
              Looks up a localized string similar to When not using a sessionful entity, the non-session event handler must be used..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.CannotSendAnEmptyMessage">
            <summary>
              Looks up a localized string similar to Sending empty {0} is not a valid operation..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.CannotStartMessageProcessorWithoutHandler">
            <summary>
              Looks up a localized string similar to Cannot begin processing without {0} handler set..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.CharacterReservedForUriScheme">
            <summary>
              Looks up a localized string similar to '{0}' contains character '{1}' which is not allowed because it is reserved in the Uri scheme..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.ClosedInstanceCannotPerformOperation">
            <summary>
              Looks up a localized string similar to {0} has already been closed and cannot perform the requested operation..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.CouldNotAcquireAccessToken">
            <summary>
              Looks up a localized string similar to Unable to acquire an access token using the provided credential..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.CouldNotCreateLink">
            <summary>
              Looks up a localized string similar to Unable to create the items needed to communicate with the Service Bus service..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.DefaultServerBusyException">
            <summary>
              Looks up a localized string similar to This request has been blocked because the entity or namespace is being throttled. Please retry the operation, and if condition continues, please slow down your rate of request..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.DisposedConnectionMessageProcessorMustStop">
            <summary>
              Looks up a localized string similar to The message processor is unable to continue and will stop processing; the host application has closed the connection to the Service Bus service..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.ExponentialRetryBackoffRange">
            <summary>
              Looks up a localized string similar to The minimum back off period '{0}' cannot exceed the maximum back off period of '{1}'..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.FailedToSerializeUnsupportedType">
            <summary>
              Looks up a localized string similar to Serialization operation failed due to unsupported type {0}..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.HandlerHasAlreadyBeenAssigned">
            <summary>
              Looks up a localized string similar to Another handler has already been assigned to this event and there can be only one..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.HandlerHasNotBeenAssigned">
            <summary>
              Looks up a localized string similar to This handler has not been previously assigned to this event..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.InvalidAmqpMessageBodyType">
            <summary>
              Looks up a localized string similar to {0} is not a supported body type..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.InvalidAmqpMessageProperty">
            <summary>
              Looks up a localized string similar to {0} is not a supported user property type..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.InvalidAmqpMessageValueBody">
            <summary>
              Looks up a localized string similar to {0} is not a supported value body type..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.InvalidCharacterInEntityName">
            <summary>
              Looks up a localized string similar to The entity name or path contains an invalid character '{0}'. The supplied value is '{1}'..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.InvalidConnectionString">
            <summary>
              Looks up a localized string similar to The connection string could not be parsed; either it was malformed or contains no well-known tokens..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.InvalidEncoding">
            <summary>
              Looks up a localized string similar to The string has an invalid encoding format..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.InvalidEndpointAddress">
            <summary>
              Looks up a localized string similar to The endpoint address could not be parsed; it was either malformed or not using the `sb://` scheme..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.InvalidFullyQualifiedNamespace">
            <summary>
              Looks up a localized string similar to The value '{0}' is not a well-formed Service Bus fully qualified namespace..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.InvalidSharedAccessSignature">
            <summary>
              Looks up a localized string similar to The shared access signature could not be parsed; it was either malformed or incorrectly encoded..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.InvalidTransportType">
            <summary>
              Looks up a localized string similar to The requested transport type, '{0}' is not supported..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.ListOfLockTokensCannotBeEmpty">
            <summary>
              Looks up a localized string similar to List of lock tokens cannot be empty.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.MaxPermittedLengthExceeded">
            <summary>
              Looks up a localized string similar to The maximum permitted length of {0} was exceeded..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.MessageBatchIsLocked">
            <summary>
              Looks up a localized string similar to The message batch is currently being used in communication with the Service Bus service; messages may not be added until the active operation is complete..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.MessageHandlerAlreadyRegistered">
            <summary>
              Looks up a localized string similar to A message handler has already been registered..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.MessageLockLost">
            <summary>
              Looks up a localized string similar to The lock supplied is invalid. Either the lock expired, or the message has already been removed from the queue, or was received by a different receiver instance..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.MessageProcessorIsNotRunning">
            <summary>
              Looks up a localized string similar to The message processor is not currently running. It needs to be started before it can be stopped..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.MessageSizeExceeded">
            <summary>
              Looks up a localized string similar to The message (id:{0}, size:{1} bytes) is larger than is currently allowed ({2} bytes)..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.MissingConnectionInformation">
            <summary>
              Looks up a localized string similar to The connection string used for an Service Bus client must specify the Service Bus namespace host and either a Shared Access Key (both the name and value) OR a Shared Access Signature to be valid..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.NotSupportedPropertyType">
            <summary>
              Looks up a localized string similar to '{0}' is not a supported type..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.OnlyOneEntityNameMayBeSpecified">
            <summary>
              Looks up a localized string similar to The queue or topic name provided does not match the EntityPath in the connection string passed to the ServiceBusClient constructor..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.OnlyOneSharedAccessAuthorizationMayBeSpecified">
            <summary>
              Looks up a localized string similar to The authorization for a connection string may specifiy a shared key or precomputed shared access signature, but not both.  Please verify that your connection string does not have the `SharedAccessSignature` token if you are passing the `SharedKeyName` and `SharedKey`..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.OperationNotSupported">
            <summary>
              Looks up a localized string similar to The operation is only supported in 'PeekLock' receive mode..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.PeekLockModeRequired">
            <summary>
              Looks up a localized string similar to This operation is not supported for peeked messages. Only messages received in PeekLock mode can be settled..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.PluginAlreadyRegistered">
            <summary>
              Looks up a localized string similar to The {0} plugin has already been registered..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.ProxyMustUseWebSockets">
            <summary>
              Looks up a localized string similar to A proxy may only be used for a web sockets connection..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.RuleFilterNotSupported">
            <summary>
              Looks up a localized string similar to Provided rule filter {0} is not supported. Supported values are: {1}, {2}.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.RunningMessageProcessorCannotPerformOperation">
            <summary>
              Looks up a localized string similar to The message processor is already running and needs to be stopped in order to perform this operation..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.SendViaCannotBeUsedWithEntityInConnectionString">
            <summary>
              Looks up a localized string similar to When sending via a different entity, an entity path is not allowed to specified in the connection string..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.SessionFilterMissing">
            <summary>
              Looks up a localized string similar to Failed to retreive session filter from broker. Please retry..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.SessionHandlerAlreadyRegistered">
            <summary>
              Looks up a localized string similar to A session handler has already been registered..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.SessionLockExpiredOnMessageSession">
            <summary>
              Looks up a localized string similar to The session lock was lost. Request a new session receiver..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.SharedAccessKeyIsRequired">
            <summary>
              Looks up a localized string similar to In order to update the signature, a shared access key must have been provided when the shared access signature was created..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.SharedKeyCredentialCannotGenerateTokens">
            <summary>
              Looks up a localized string similar to A shared key credential is unable to generate a token directly. Please use this credential when creating an Service Bus entity Client, for proper generation of shared key tokens..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.SqlRuleFilterStatmentTooLong">
            <summary>
              Looks up a localized string similar to The length of the filter statement is {0}, which exceeds the maximum length of {1}.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.TimeoutMustBeNonNegative">
            <summary>
              Looks up a localized string similar to Argument {0} must be a non-negative timeout value. The provided value was {1}..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.TimeoutMustBePositive">
            <summary>
              Looks up a localized string similar to Argument {0} must be a positive timeout value. The provided value was {1}..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.TimeoutMustBePositiveNonZero">
            <summary>
              Looks up a localized string similar to Argument {0} must be a positive non-zero timeout value. The provided value was {1}..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.TokenMissingAudience">
            <summary>
              Looks up a localized string similar to The provided token does not specify the 'Audience' value..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.TokenMissingExpiresOn">
            <summary>
              Looks up a localized string similar to The provided token does not specify the 'ExpiresOn' value..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.TransactionReconnectionError">
             <summary>
               Looks up a localized string similar to An attempt was made to reconnect the {0} sender link as part of a cross-entity transaction. This could not be completed successfully because the {1} receiver
            needs to be re-established first. Attempting the transaction again will allow the correct link to be established first..
             </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.UnknownConnectionType">
            <summary>
              Looks up a localized string similar to The specified connection type, "{0}", is not recognized as valid in this context..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.UnknownRetryMode">
            <summary>
              Looks up a localized string similar to The requested retry mode, '{0}', is not known; a retry delay canot be determined..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.UnsupportedCredential">
            <summary>
              Looks up a localized string similar to The credential provided is not a supported type..
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.Resources.UnsupportedTransportEventType">
            <summary>
              Looks up a localized string similar to The requested transport event type, '{0}', is not supported by the active transport client..
            </summary>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusRuleManager">
            <summary>
            Manages rules for subscriptions.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusRuleManager.SubscriptionPath">
            <summary>
            The path of the Service Bus subscription that the rule manager is connected to, specific to the
            Service Bus namespace that contains it.
            </summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusRuleManager.Identifier">
            <summary>
            Gets the ID to identify this client. This can be used to correlate logs and exceptions.
            </summary>
            <remarks>Every new client has a unique ID.</remarks>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusRuleManager.IsClosed">
             <summary>
               Indicates whether or not this <see cref="T:Azure.Messaging.ServiceBus.ServiceBusRuleManager" /> has been closed.
             </summary>
            
             <value>
             <c>true</c> if the rule manager is closed; otherwise, <c>false</c>.
             </value>
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusRuleManager.InnerRuleManager">
            <summary>
            An abstracted Service Bus transport-specific rule manager that is associated with the
            Service Bus entity gateway; intended to perform delegated operations.
            </summary>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusRuleManager.#ctor(Azure.Messaging.ServiceBus.ServiceBusConnection,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusRuleManager" /> class.
             </summary>
            
             <param name="connection">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusConnection" /> connection to use for communication with the Service Bus service.</param>
             <param name="subscriptionPath">The path of the Service Bus subscription to which the rule manager is bound.</param>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusRuleManager.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusRuleManager" /> class for mocking.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusRuleManager.AddRuleAsync(System.String,Azure.Messaging.ServiceBus.Administration.RuleFilter,System.Threading.CancellationToken)">
             <summary>
             Adds a rule to the current subscription to filter the messages reaching from topic to the subscription.
             </summary>
            
             <param name="ruleName">Name of the rule</param>
             <param name="filter">The filter expression against which messages will be matched.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             You can add rules to the subscription that decides which messages from the topic should reach the subscription.
             A default <see cref="T:Azure.Messaging.ServiceBus.Administration.TrueRuleFilter" /> rule named <see cref="F:Azure.Messaging.ServiceBus.Administration.RuleProperties.DefaultRuleName" /> is always added while creation of the Subscription.
             You can add multiple rules with distinct names to the same subscription.
             Multiple filters combine with each other using logical OR condition. i.e., If any filter succeeds, the message is passed on to the subscription.
             </remarks>
            
             <returns>A task instance that represents the asynchronous add rule operation.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusRuleManager.AddRuleAsync(Azure.Messaging.ServiceBus.Administration.CreateRuleOptions,System.Threading.CancellationToken)">
             <summary>
             Adds a rule to the current subscription to filter the messages reaching from topic to the subscription.
             </summary>
            
             <param name="options">The options for the rule to add.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>
             You can add rules to the subscription that decides which messages from the topic should reach the subscription.
             A default <see cref="T:Azure.Messaging.ServiceBus.Administration.TrueRuleFilter" /> rule named <see cref="F:Azure.Messaging.ServiceBus.Administration.RuleProperties.DefaultRuleName" /> is always added while creation of the Subscription.
             You can add multiple rules with distinct names to the same subscription.
             Multiple filters combine with each other using logical OR condition. i.e., If any filter succeeds, the message is passed on to the subscription.
             </remarks>
            
             <returns>A task instance that represents the asynchronous add rule operation.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusRuleManager.RemoveRuleAsync(System.String,System.Threading.CancellationToken)">
             <summary>
             Removes the rule on the subscription identified by <paramref name="ruleName" />.
             </summary>
            
             <param name="ruleName">Name of the rule</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A task instance that represents the asynchronous remove rule operation.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusRuleManager.GetRulesAsync(System.Threading.CancellationToken)">
             <summary>
             Get all rules associated with the subscription.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>Returns a list of <see cref="T:Azure.Messaging.ServiceBus.Administration.RuleProperties" /></returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusRuleManager.DisposeAsync">
             <summary>
             Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusRuleManager" />.
             This is equivalent to calling <see cref="M:Azure.Messaging.ServiceBus.ServiceBusRuleManager.CloseAsync" />.
             </summary>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusRuleManager.CloseAsync">
             <summary>
             Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusRuleManager" />.
             </summary>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusRuleManager.Equals(System.Object)">
             <summary>
             Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusRuleManager.GetHashCode">
             <summary>
             Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusRuleManager.ToString">
             <summary>
             Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Azure.Messaging.ServiceBus.CreateMessageBatchOptions">
             <summary>
               The set of options that can be specified to influence the way in which an service bus message batch
               behaves and is sent to the Queue/Topic.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.CreateMessageBatchOptions.MaxSizeInBytes">
             <summary>
               The maximum size to allow for a single batch of messages, in bytes.
             </summary>
            
             <value>
               The desired limit, in bytes, for the size of the associated service bus message batch.  If <c>null</c>,
               the maximum size allowed by the active transport will be used.
             </value>
             <exception cref="T:System.ArgumentOutOfRangeException">
               A negative value is attempted to be set for the property.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.CreateMessageBatchOptions.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.CreateMessageBatchOptions.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.CreateMessageBatchOptions.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.CreateMessageBatchOptions.Clone">
             <summary>
               Creates a new copy of the current <see cref="T:Azure.Messaging.ServiceBus.CreateMessageBatchOptions" />, cloning its attributes into a new instance.
             </summary>
            
             <returns>A new copy of <see cref="T:Azure.Messaging.ServiceBus.CreateMessageBatchOptions" />.</returns>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusMessageBatch">
             <summary>
               A set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessage" /> with size constraints known up-front,
               intended to be sent to the Queue/Topic as a single batch.
               A <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessageBatch" /> can be created using
               <see cref="M:Azure.Messaging.ServiceBus.ServiceBusSender.CreateMessageBatchAsync(System.Threading.CancellationToken)" />.
               Messages can be added to the batch using the <see cref="M:Azure.Messaging.ServiceBus.ServiceBusMessageBatch.TryAddMessage(Azure.Messaging.ServiceBus.ServiceBusMessage)" /> method on the batch.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusMessageBatch.MaxSizeInBytes">
             <summary>
               The maximum size allowed for the batch, in bytes.  This includes the messages in the batch as
               well as any overhead for the batch itself when sent to the Queue/Topic.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusMessageBatch.SizeInBytes">
             <summary>
               The size of the batch, in bytes, as it will be sent to the Queue/Topic.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusMessageBatch.Count">
             <summary>
               The count of messages contained in the batch.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusMessageBatch.#ctor(Azure.Messaging.ServiceBus.Core.TransportMessageBatch,Azure.Messaging.ServiceBus.Diagnostics.EntityScopeFactory)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessageBatch" /> class.
             </summary>
            
             <param name="transportBatch">The  transport-specific batch responsible for performing the batch operations.</param>
             <param name="entityScope">The entity scope used for instrumentation.</param>
            
             <remarks>
               As an internal type, this class performs only basic sanity checks against its arguments.  It
               is assumed that callers are trusted and have performed deep validation.
            
               Any parameters passed are assumed to be owned by this instance and safe to mutate or dispose;
               creation of clones or otherwise protecting the parameters is assumed to be the purview of the
               caller.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusMessageBatch.TryAddMessage(Azure.Messaging.ServiceBus.ServiceBusMessage)">
             <summary>
               Attempts to add a message to the batch, ensuring that the size
               of the batch does not exceed its maximum. If the message is modified
               after being added to the batch, the batch will fail to send if the modification
               caused the batch to exceed the maximum allowable size. Therefore it is best
               to not modify a message after adding it to the batch.
             </summary>
            
             <param name="message">The message to attempt to add to the batch.</param>
            
             <returns><c>true</c> if the message was added; otherwise, <c>false</c>.</returns>
            
             <exception cref="T:System.InvalidOperationException">
               When a batch is sent, it will be locked for the duration of that operation.  During this time,
               no messages may be added to the batch.  Calling <c>TryAdd</c> while the batch is being sent will
               result in an <see cref="T:System.InvalidOperationException" /> until the send has completed.
             </exception>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusMessageBatch.Dispose">
             <summary>
               Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessageBatch" />.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusMessageBatch.Clear">
             <summary>
               Clears the batch, removing all messages and resetting the
               available size.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusMessageBatch.AsReadOnly``1">
             <summary>
               Represents the batch as an enumerable set of specific representations of a message.
             </summary>
            
             <typeparam name="T">The specific message representation being requested.</typeparam>
            
             <returns>The set of messages as an enumerable of the requested type.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusMessageBatch.Lock">
             <summary>
               Locks the batch to prevent new messages from being added while a service
               operation is active.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusMessageBatch.Unlock">
             <summary>
               Unlocks the batch, allowing new messages to be added.
             </summary>
            
        </member>
        <member name="T:Azure.Messaging.ServiceBus.ServiceBusSender">
             <summary>
               A client responsible for sending <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessage" /> to a specific Service Bus entity
               (Queue or Topic). It can be used for both session and non-session entities. It is constructed by calling <see cref="M:Azure.Messaging.ServiceBus.ServiceBusClient.CreateSender(System.String)" />.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.ServiceBus.ServiceBusSender.MinimumBatchSizeLimit">
            <summary>The minimum allowable size, in bytes, for a batch to be sent.</summary>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSender.FullyQualifiedNamespace">
             <summary>
               The fully qualified Service Bus namespace that the producer is associated with.  This is likely
               to be similar to <c>{yournamespace}.servicebus.windows.net</c>.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSender.EntityPath">
             <summary>
               The path of the entity that the sender is connected to, specific to the
               Service Bus namespace that contains it.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSender.IsClosed">
             <summary>
               Indicates whether or not this <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSender" /> has been closed.
             </summary>
            
             <value>
             <c>true</c> if the sender is closed; otherwise, <c>false</c>.
             </value>
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSender.Logger">
             <summary>
               The instance of <see cref="T:Azure.Messaging.ServiceBus.Diagnostics.ServiceBusEventSource" /> which can be mocked for testing.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.ServiceBus.ServiceBusSender.Identifier">
            <summary>
            Gets the ID to identify this client. This can be used to correlate logs and exceptions.
            </summary>
            <remarks>Every new client has a unique ID.</remarks>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSender.#ctor(System.String,Azure.Messaging.ServiceBus.ServiceBusConnection)">
            <summary>
              Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSender" /> class.
            </summary>
            <param name="entityPath">The entity path to send the message to.</param>
            <param name="connection">The connection for the sender.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSender.#ctor">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSender" /> class for mocking.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSender.#ctor(Azure.Messaging.ServiceBus.ServiceBusClient,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSender" /> class for use with derived types.
            </summary>
            <param name="client">The client instance to use for the sender.</param>
            <param name="queueOrTopicName">The name of the queue or topic to send to.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSender.SendMessageAsync(Azure.Messaging.ServiceBus.ServiceBusMessage,System.Threading.CancellationToken)">
             <summary>
               Sends a message to the associated entity of Service Bus.
             </summary>
             <param name="message">The message to send.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               The message exceeds the maximum size allowed, as determined by the Service Bus service.
               The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageSizeExceeded" /> in this case.
               For more information on service limits, see
               <see href="https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-quotas#messaging-quotas" />.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSender.SendMessagesAsync(System.Collections.Generic.IEnumerable{Azure.Messaging.ServiceBus.ServiceBusMessage},System.Threading.CancellationToken)">
             <summary>
               Sends a set of messages to the associated Service Bus entity using a batched approach.
               If the size of the messages exceed the maximum size of a single batch,
               an exception will be triggered and the send will fail. In order to ensure that the messages
               being sent will fit in a batch, use <see cref="M:Azure.Messaging.ServiceBus.ServiceBusSender.SendMessagesAsync(Azure.Messaging.ServiceBus.ServiceBusMessageBatch,System.Threading.CancellationToken)" /> instead.
             </summary>
            
             <param name="messages">The set of messages to send.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
             <exception cref="T:Azure.Messaging.ServiceBus.ServiceBusException">
               The set of messages exceeds the maximum size allowed in a single batch, as determined by the Service Bus service.
               The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusException.Reason" /> will be set to <see cref="F:Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageSizeExceeded" /> in this case.
               For more information on service limits, see
               <see href="https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-quotas#messaging-quotas" />.
             </exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSender.CreateMessageBatchAsync(System.Threading.CancellationToken)">
             <summary>
               Creates a size-constraint batch to which <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessage" /> may be added using
               a <see cref="M:Azure.Messaging.ServiceBus.ServiceBusMessageBatch.TryAddMessage(Azure.Messaging.ServiceBus.ServiceBusMessage)" />. If a message would exceed the maximum
               allowable size of the batch, the batch will not allow adding the message and signal that
               scenario using it return value.
            
               Because messages that would violate the size constraint cannot be added, publishing a batch
               will not trigger an exception when attempting to send the messages to the Queue/Topic.
             </summary>
            
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessageBatch" /> with the default batch options.</returns>
            
             <seealso cref="M:Azure.Messaging.ServiceBus.ServiceBusSender.CreateMessageBatchAsync(Azure.Messaging.ServiceBus.CreateMessageBatchOptions,System.Threading.CancellationToken)" />
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSender.CreateMessageBatchAsync(Azure.Messaging.ServiceBus.CreateMessageBatchOptions,System.Threading.CancellationToken)">
             <summary>
               Creates a size-constraint batch to which <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessage" /> may be added using a try-based pattern.  If a message would
               exceed the maximum allowable size of the batch, the batch will not allow adding the message and signal that scenario using its
               return value.
            
               Because messages that would violate the size constraint cannot be added, publishing a batch will not trigger an exception when
               attempting to send the messages to the Queue/Topic.
             </summary>
            
             <param name="options">The set of options to consider when creating this batch.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>An <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessageBatch" /> with the requested <paramref name="options" />.</returns>
            
             <seealso cref="M:Azure.Messaging.ServiceBus.ServiceBusSender.CreateMessageBatchAsync(Azure.Messaging.ServiceBus.CreateMessageBatchOptions,System.Threading.CancellationToken)" />
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSender.SendMessagesAsync(Azure.Messaging.ServiceBus.ServiceBusMessageBatch,System.Threading.CancellationToken)">
             <summary>
               Sends a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessageBatch" />
               containing a set of <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessage" /> to
               the associated Service Bus entity.
             </summary>
            
             <param name="messageBatch">The batch of messages to send. A batch may be created using <see cref="M:Azure.Messaging.ServiceBus.ServiceBusSender.CreateMessageBatchAsync(System.Threading.CancellationToken)" />.</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
             <returns>A task to be resolved on when the operation has completed.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSender.ScheduleMessageAsync(Azure.Messaging.ServiceBus.ServiceBusMessage,System.DateTimeOffset,System.Threading.CancellationToken)">
             <summary>
             Schedules a message to appear on Service Bus at a later time.
             </summary>
            
             <param name="message">The <see cref="T:Azure.Messaging.ServiceBus.ServiceBusMessage" /> to schedule.</param>
             <param name="scheduledEnqueueTime">The UTC time at which the message should be available for processing</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>Although the message will not be available to be received until the scheduledEnqueueTime, it can still be peeked before that time.
             Messages can also be scheduled by setting <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.ScheduledEnqueueTime" /> and
             using <see cref="M:Azure.Messaging.ServiceBus.ServiceBusSender.SendMessageAsync(Azure.Messaging.ServiceBus.ServiceBusMessage,System.Threading.CancellationToken)" />,
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusSender.SendMessagesAsync(System.Collections.Generic.IEnumerable{Azure.Messaging.ServiceBus.ServiceBusMessage},System.Threading.CancellationToken)" />, or
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusSender.SendMessagesAsync(Azure.Messaging.ServiceBus.ServiceBusMessageBatch,System.Threading.CancellationToken)" />.</remarks>
            
             <returns>The sequence number of the message that was scheduled.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSender.ScheduleMessagesAsync(System.Collections.Generic.IEnumerable{Azure.Messaging.ServiceBus.ServiceBusMessage},System.DateTimeOffset,System.Threading.CancellationToken)">
             <summary>
             Schedules a set of messages to appear on Service Bus at a later time.
             </summary>
            
             <param name="messages">The set of messages to schedule.</param>
             <param name="scheduledEnqueueTime">The UTC time at which the message should be available for processing</param>
             <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <remarks>Although the message will not be available to be received until the scheduledEnqueueTime, it can still be peeked before that time.
             Messages can also be scheduled by setting <see cref="P:Azure.Messaging.ServiceBus.ServiceBusMessage.ScheduledEnqueueTime" /> and
             using <see cref="M:Azure.Messaging.ServiceBus.ServiceBusSender.SendMessageAsync(Azure.Messaging.ServiceBus.ServiceBusMessage,System.Threading.CancellationToken)" />,
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusSender.SendMessagesAsync(System.Collections.Generic.IEnumerable{Azure.Messaging.ServiceBus.ServiceBusMessage},System.Threading.CancellationToken)" />, or
             <see cref="M:Azure.Messaging.ServiceBus.ServiceBusSender.SendMessagesAsync(Azure.Messaging.ServiceBus.ServiceBusMessageBatch,System.Threading.CancellationToken)" />.</remarks>
            
             <returns>The sequence number of the message that was scheduled.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSender.CancelScheduledMessageAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Cancels a message that was scheduled.
            </summary>
            <param name="sequenceNumber">The <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.SequenceNumber" /> of the message to be cancelled.</param>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSender.CancelScheduledMessagesAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a set of messages that were scheduled.
            </summary>
            <param name="sequenceNumbers">The set of <see cref="P:Azure.Messaging.ServiceBus.ServiceBusReceivedMessage.SequenceNumber" /> of the messages to be cancelled.</param>
            <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSender.CloseAsync(System.Threading.CancellationToken)">
            <summary>
              Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSender" />.
            </summary>
            <param name="cancellationToken"> An optional<see cref="T:System.Threading.CancellationToken" /> instance to signal the
            request to cancel the operation.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSender.DisposeAsync">
             <summary>
               Performs the task needed to clean up resources used by the <see cref="T:Azure.Messaging.ServiceBus.ServiceBusSender" />.
               This is equivalent to calling <see cref="M:Azure.Messaging.ServiceBus.ServiceBusSender.CloseAsync(System.Threading.CancellationToken)" />.
             </summary>
            
             <returns>A task to be resolved on when the operation has completed.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSender.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSender.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.ServiceBusSender.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="T:Azure.Core.Pipeline.DiagnosticScope.ActivityKind">
            <summary>
            Kind describes the relationship between the Activity, its parents, and its children in a Trace.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Internal">
            <summary>
            Default value.
            Indicates that the Activity represents an internal operation within an application, as opposed to an operations with remote parents or children.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Server">
            <summary>
            Server activity represents request incoming from external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Client">
            <summary>
            Client activity represents outgoing request to the external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Producer">
            <summary>
            Producer activity represents output provided to external components.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Consumer">
            <summary>
            Consumer activity represents output received from an external component.
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.ActivityExtensions">
            <summary>
            Until we can reference the 5.0 of System.Diagnostics.DiagnosticSource
            </summary>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.#ctor(Azure.Core.ClientOptions,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> class.
            </summary>
            <param name="options">The customer provided client options object.</param>
            <param name="suppressNestedClientActivities">Flag controlling if <see cref="T:System.Diagnostics.Activity" />
             created by this <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> for client method calls should be suppressed when called
             by other Azure SDK client methods.  It's recommended to set it to true for new clients; use default (null)
             for backward compatibility reasons, or set it to false to explicitly disable suppression for specific cases.
             The default value could change in the future, the flag should be only set to false if suppression for the client
             should never be enabled.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.#ctor(System.String,System.String,Azure.Core.DiagnosticsOptions,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> class.
            </summary>
            <param name="optionsNamespace">Namespace of the client class, such as Azure.Storage or Azure.AppConfiguration.</param>
            <param name="providerNamespace">Azure Resource Provider namespace of the Azure service SDK is primarily used for.</param>
            <param name="diagnosticsOptions">The customer provided client diagnostics options.</param>
            <param name="suppressNestedClientActivities">Flag controlling if <see cref="T:System.Diagnostics.Activity" />
             created by this <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> for client method calls should be suppressed when called
             by other Azure SDK client methods.  It's recommended to set it to true for new clients, use default (null) for old clients
             for backward compatibility reasons, or set it to false to explicitly disable suppression for specific cases.
             The default value could change in the future, the flag should be only set to false if suppression for the client
             should never be enabled.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.ExtractFailureContent(System.String,Azure.Core.ResponseHeaders,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Partial method that can optionally be defined to extract the error
            message, code, and details in a service specific manner.
            </summary>
            <param name="content">The error content.</param>
            <param name="responseHeaders">The response headers.</param>
            <param name="additionalInfo">Additional error details.</param>
        </member>
        <member name="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1">
            <summary>
            Both <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1" /> and <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerator`1" /> are defined as public structs so that foreach can use duck typing
            to call <see cref="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.GetEnumerator" /> and avoid heap memory allocation.
            Please don't delete this method and don't make these types private.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Azure.Core.Argument">
             <summary>
               Provides a consistent means for verifying arguments and other invariants for a given
               member.
             </summary>
            
             <remarks>
               This class extends the <see cref="T:Azure.Core.Argument" /> type, referenced as a partial
               class via shared source; the base partial class definition may be found in the "SharedSource"
               folder of this project.
             </remarks>
            
            <summary>
            Argument validation.
            </summary>
            <remarks>
              <para>This class should be shared via source using Azure.Core.props and contain only common argument validation.
                It is declared partial so that you can use the same familiar class name but extend it with project-specific validation.
                To extend the functionality of this class, just declare your own partial <see cref="T:Azure.Core.Argument" /> class with project-specific methods.
              </para>
              <para>
                Be sure to document exceptions thrown by these methods on your public methods.
              </para>
            </remarks>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotEmptyOrWhiteSpace(System.String,System.String)">
             <summary>
               Ensures that an argument's value is a string comprised of only whitespace, though
               <c>null</c> is considered a valid value.  An <see cref="T:System.ArgumentException" /> is thrown
               if that invariant is not met.
             </summary>
            
             <param name="argumentValue">The value of the argument to verify.</param>
             <param name="argumentName">The name of the argument being considered.</param>
            
             <exception cref="T:System.ArgumentException">The argument is empty or contains only white-space.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertNotTooLong(System.String,System.Int32,System.String)">
             <summary>
               Ensures that a string argument's length is below a maximum allowed threshold,
               throwing an <see cref="T:System.ArgumentOutOfRangeException" /> if that invariant is not met.
             </summary>
            
             <param name="argumentValue">The value of the argument to verify.</param>
             <param name="maximumLength">The maximum allowable length for the <paramref name="argumentValue" />; its length must be less than or equal to this value.</param>
             <param name="argumentName">The name of the argument being considered.</param>
            
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="argumentValue" /> exceeds <paramref name="maximumLength" /> characters.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNegative(System.TimeSpan,System.String)">
             <summary>
               Ensures that an argument's value is not a negative value, throwing an
               <see cref="T:System.ArgumentOutOfRangeException" /> if that invariant is not met.
             </summary>
            
             <param name="argumentValue">The value of the argument to verify.</param>
             <param name="argumentName">The name of the argument being considered.</param>
            
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="argumentValue" /> is a negative <see cref="T:System.TimeSpan" /> value.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertPositive(System.TimeSpan,System.String)">
             <summary>
               Ensures that an argument's value is a positive value, throwing an
               <see cref="T:System.ArgumentOutOfRangeException" /> if that invariant is not met.
             </summary>
            
             <param name="argumentValue">The value of the argument to verify.</param>
             <param name="argumentName">The name of the argument being considered.</param>
            
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="argumentValue" /> is not positive <see cref="T:System.TimeSpan" /> value.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertAtLeast``1(``0,``0,System.String)">
             <summary>
               Ensures that an argument's value is at least as large as a given lower bound, throwing
               <see cref="T:System.ArgumentException" /> if that invariant is not met.
             </summary>
            
             <param name="argumentValue">The value of the argument to verify.</param>
             <param name="minimumValue">The minimum to use for comparison; <paramref name="argumentValue" /> must be greater than or equal to this value.</param>
             <param name="argumentName">The name of the argument being considered.</param>
            
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="argumentValue" /> is less than <paramref name="minimumValue" />.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertNotDisposed(System.Boolean,System.String)">
             <summary>
               Ensures that an instance has not been disposed, throwing an
               <see cref="T:System.ObjectDisposedException" /> if that invariant is not met.
             </summary>
            
             <param name="wasDisposed"><c>true</c> if the target instance has been disposed; otherwise, <c>false</c>.</param>
             <param name="targetName">The name of the target instance that is being verified.</param>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertWellFormedServiceBusNamespace(System.String,System.String)">
             <summary>
               Ensures that an argument's value is a well-formed Service Bus fully qualified namespace value,
               throwing a <see cref="T:System.ArgumentException" /> if that invariant is not met.
             </summary>
            
             <param name="argumentValue">The argument value.</param>
             <param name="argumentName">Name of the argument.</param>
            
            
             <exception cref="T:System.ArgumentException"><paramref name="argumentValue" /> is not a well-formed Service Bus fully qualified namespace.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty collection.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty collection.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null, an empty string, or consists only of white-space characters.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string or consists only of white-space characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotDefault``1(``0@,System.String)">
            <summary>
            Throws if <paramref name="value" /> is the default value for type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of structure to validate which implements <see cref="T:System.IEquatable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is the default value for type <typeparamref name="T" />.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertInRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is less than the <paramref name="minimum" /> or greater than the <paramref name="maximum" />.
            </summary>
            <typeparam name="T">The type of to validate which implements <see cref="T:System.IComparable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="minimum">The minimum value to compare.</param>
            <param name="maximum">The maximum value to compare.</param>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNull``1(``0,System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is not null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not null.</exception>
        </member>
        <member name="T:Azure.Core.AppContextSwitchHelper">
            <summary>
            Helper for interacting with AppConfig settings and their related Environment variable settings.
            </summary>
        </member>
        <member name="M:Azure.Core.AppContextSwitchHelper.GetConfigValue(System.String,System.String)">
            <summary>
            Determines if either an AppContext switch or its corresponding Environment Variable is set
            </summary>
            <param name="appContexSwitchName">Name of the AppContext switch.</param>
            <param name="environmentVariableName">Name of the Environment variable.</param>
            <returns>If the AppContext switch has been set, returns the value of the switch.
            If the AppContext switch has not been set, returns the value of the environment variable.
            False if neither is set.
            </returns>
        </member>
        <member name="T:Azure.Core.HashCodeBuilder">
            <summary>
            Copied from https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/HashCode.cs.
            </summary>
        </member>
        <member name="T:Azure.Core.ArrayBufferWriter`1">
            <summary>
            Represents a heap-based, array-backed output sink into which <typeparam name="T" /> data can be written.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with the default initial capacity.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with an initial capacity specified.
            </summary>
            <param name="initialCapacity">The minimum capacity with which to initialize the underlying buffer.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="initialCapacity" /> is not positive (i.e. less than or equal to 0).
            </exception>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenMemory">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlyMemory`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenSpan">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlySpan`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenCount">
            <summary>
            Returns the amount of data written to the underlying buffer so far.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.Capacity">
            <summary>
            Returns the total amount of space within the underlying buffer.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.FreeCapacity">
            <summary>
            Returns the amount of space available that can still be written into without forcing the underlying buffer to grow.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Clear">
            <summary>
            Clears the data written to the underlying buffer.
            </summary>
            <remarks>
            You must clear the <see cref="T:Azure.Core.ArrayBufferWriter`1" /> before trying to re-use it.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Advance(System.Int32)">
            <summary>
            Notifies <see cref="T:System.Buffers.IBufferWriter`1" /> that <paramref name="count" /> amount of data was written to the output <see cref="T:System.Span`1" />/<see cref="T:System.Memory`1" />.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="count" /> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when attempting to advance past the end of the underlying buffer.
            </exception>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetMemory(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Memory`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Memory`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetSpan(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Span`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Span`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="T:Azure.Core.AzureResourceProviderNamespaceAttribute">
            <summary>
            This attribute should be set on all client assemblies with value of one of the resource providers
            from the https://docs.microsoft.com/azure/azure-resource-manager/management/azure-services-resource-providers list.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Azure.ServiceBusClientBuilderExtensions">
            <summary>
               The set of extensions to add the Service Bus client types to the clients builder
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.ServiceBusClientBuilderExtensions.AddServiceBusClient``1(``0,System.String)">
             <summary>
               Registers a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> instance with the provided <paramref name="connectionString" />.
             </summary>
            
        </member>
        <member name="M:Microsoft.Extensions.Azure.ServiceBusClientBuilderExtensions.AddServiceBusClientWithNamespace``1(``0,System.String)">
             <summary>
               Registers a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> instance with the provided <paramref name="fullyQualifiedNamespace" />.
             </summary>
            
        </member>
        <member name="M:Microsoft.Extensions.Azure.ServiceBusClientBuilderExtensions.AddServiceBusClient``2(``0,``1)">
             <summary>
               Registers a <see cref="T:Azure.Messaging.ServiceBus.ServiceBusClient" /> instance with connection options loaded from the provided <paramref name="configuration" /> instance.
             </summary>
            
        </member>
        <member name="M:Microsoft.Extensions.Azure.ServiceBusClientBuilderExtensions.AddServiceAdministrationBusClient``1(``0,System.String)">
             <summary>
               Registers a <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> instance with the provided <paramref name="connectionString" />.
             </summary>
            
        </member>
        <member name="M:Microsoft.Extensions.Azure.ServiceBusClientBuilderExtensions.AddServiceBusAdministrationClient``1(``0,System.String)">
             <summary>
               Registers a <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> instance with the provided <paramref name="connectionString" />.
             </summary>
            
        </member>
        <member name="M:Microsoft.Extensions.Azure.ServiceBusClientBuilderExtensions.AddServiceBusAdministrationClientWithNamespace``1(``0,System.String)">
             <summary>
               Registers a <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> instance with the provided <paramref name="fullyQualifiedNamespace" />.
             </summary>
            
        </member>
        <member name="M:Microsoft.Extensions.Azure.ServiceBusClientBuilderExtensions.AddServiceBusAdministrationClient``2(``0,``1)">
             <summary>
               Registers a <see cref="T:Azure.Messaging.ServiceBus.Administration.ServiceBusAdministrationClient" /> instance with connection options loaded from the provided <paramref name="configuration" /> instance.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Primitives.PropertyDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpTransactionEnlistment.System#Transactions#IPromotableSinglePhaseNotification#Initialize">
            <summary>Notifies a transaction participant that enlistment has completed successfully.</summary><exception cref="T:System.Transactions.TransactionException">An attempt to enlist or serialize a transaction.</exception>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpTransactionEnlistment.System#Transactions#IPromotableSinglePhaseNotification#SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
            <summary>Notifies an enlisted object that the transaction is being committed.</summary><param name="singlePhaseEnlistment">A <see cref="T:System.Transactions.SinglePhaseEnlistment" /> interface used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpTransactionEnlistment.System#Transactions#IPromotableSinglePhaseNotification#Rollback(System.Transactions.SinglePhaseEnlistment)">
            <summary>Notifies an enlisted object that the transaction is being rolled back.</summary><param name="singlePhaseEnlistment">A <see cref="T:System.Transactions.SinglePhaseEnlistment" /> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.AmqpTransactionEnlistment.System#Transactions#ITransactionPromoter#Promote">
            <summary>Notifies an enlisted object that an escalation of the delegated transaction has been requested.</summary><returns>A transmitter/receiver propagation token that marshals a distributed transaction. For more information, see <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" />.</returns>
        </member>
        <member name="M:Azure.Messaging.ServiceBus.Amqp.MessageBody.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.Pipeline.TaskExtensions.Enumerator`1.System#Collections#IEnumerator#Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary><returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
    </members>
</doc>
